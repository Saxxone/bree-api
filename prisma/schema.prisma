// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  name            String
  bio             String?
  img             String
  password        String
  posts           Post[]
  files           File[]
  likedPosts      Post[]    @relation("likedPosts")
  bookmarkedPosts Post[]    @relation("bookmarkedPosts")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model Post {
  id            String    @id @default(uuid())
  text          String?
  media         String[]
  mediaType     String[]
  published     Boolean?  @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  likedBy       User[]    @relation("likedPosts")
  likeCount     Int       @default(0)
  bookmarkedBy  User[]    @relation("bookmarkedPosts")
  bookmarkCount Int       @default(0)
  parent        Post?     @relation("comments", fields: [parentId], references: [id])
  parentId      String?
  comments      Post[]    @relation("comments")
  commentCount  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model File {
  id           String    @id @default(uuid())
  originalname String
  filename     String
  size         Int
  type         String
  url          String
  path         String
  mimetype     String
  status       Status    @default(PENDING)
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  UPLOADED
}
