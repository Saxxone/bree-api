// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(uuid())
  email                     String                     @unique
  username                  String                     @unique
  name                      String
  bio                       String?                    @db.VarChar(140)
  verified                  Boolean                    @default(false)
  banner                    String?
  img                       String
  password                  String?
  posts                     Post[]
  files                     File[]
  likedPosts                Post[]                     @relation("likedPosts")
  bookmarkedPosts           Post[]                     @relation("bookmarkedPosts")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  deletedAt                 DateTime?
  recipient                 Chat[]                     @relation("chatRecipient")
  sender                    Chat[]                     @relation("chatSender")
  deletedBy                 Chat[]                     @relation("chatDeletedBy")
  Room                      Room?                      @relation(fields: [roomId], references: [id])
  roomId                    String?
  publicKey                 String?
  userChatEncryptedMessages UserChatEncryptedMessage[]
  LongPost                  LongPost[]
  AuthToken                 AuthToken[]
}

model Post {
  id            String    @id @default(uuid())
  text          String?
  media         String[]
  mediaTypes    String[]
  published     Boolean?  @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  likedBy       User[]    @relation("likedPosts")
  likeCount     Int       @default(0)
  bookmarkedBy  User[]    @relation("bookmarkedPosts")
  bookmarkCount Int       @default(0)
  parent        Post?     @relation("comments", fields: [parentId], references: [id])
  parentId      String?
  comments      Post[]    @relation("comments")
  commentCount  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  type          PostType  @default(SHORT)
  longPost      LongPost? @relation(fields: [longPostId], references: [id])
  longPostId    String?
}

model LongPost {
  id        String          @id @default(uuid())
  content   LongPostBlock[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Post      Post[]
  User      User?           @relation(fields: [userId], references: [id])
  userId    String?
}

model LongPostBlock {
  id         String   @id @default(uuid())
  longPostId String
  longPost   LongPost @relation(fields: [longPostId], references: [id])
  text       String
  media      String[]
  mediaTypes String[]
}

model File {
  id           String    @id @default(uuid())
  originalname String
  filename     String
  size         Int
  type         String
  url          String
  path         String
  mimetype     String
  status       Status    @default(PENDING)
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Chat {
  id                    String                     @id @default(uuid())
  to                    User                       @relation("chatRecipient", fields: [toUserId], references: [id])
  from                  User                       @relation("chatSender", fields: [fromUserId], references: [id])
  text                  String?
  media                 String?
  mediaType             String[]
  read                  Boolean                    @default(false)
  deletedBy             User?                      @relation("chatDeletedBy", fields: [deletedByUserId], references: [id])
  deletedByUserId       String?
  deletedByMe           Boolean                    @default(false)
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  deletedAt             DateTime?
  toUserId              String
  fromUserId            String
  status                Status                     @default(PENDING)
  room                  Room?                      @relation(fields: [roomId], references: [id])
  roomId                String?
  userEncryptedMessages UserChatEncryptedMessage[]
}

model UserChatEncryptedMessage {
  id               String   @id @default(uuid())
  chat             Chat     @relation(fields: [chatId], references: [id])
  chatId           String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  encryptedMessage String
  createdAt        DateTime @default(now())
}

model Room {
  id           String   @id @default(uuid())
  chats        Chat[]
  participants User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roomType     RoomType @default(PRIVATE)
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  UPLOADED
  DELETED
  SENT
  DELIVERED
  SEEN
}

enum RoomType {
  PRIVATE
  PUBLIC
}

enum PostType {
  LONG
  SHORT
}

model AuthToken {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  token          String   @unique
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isRefreshToken Boolean  @default(false)

  @@unique([userId, isRefreshToken])
}
