var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.297,1,2.784]],["body/controllers/AppController.html",[0,2.144,1,4.603,2,1.732,3,0.175,4,0.175,5,0.09,6,4.517,7,0.709,8,1.761,9,7.315,10,1.879,11,0.015,12,5.209,13,0.883,14,5.209,15,1.369,16,1.139,17,0.559,18,0.959,19,4.329,20,4.517,21,3.537,22,4.517,23,0.175,24,0.286,25,2.571,26,1.665,27,5.209,28,1.479,29,4.517,30,5.209,31,0.012,32,0.012]],["title/modules/AppModule.html",[33,1.297,34,2.784]],["body/modules/AppModule.html",[1,3.917,2,1.552,3,0.109,4,0.109,5,0.056,11,0.015,17,0.624,18,0.593,19,4.115,20,2.794,22,2.794,23,0.109,24,0.177,31,0.009,32,0.009,33,1.824,34,5.623,35,1.444,36,1.444,37,1.59,38,1.59,39,1.444,40,2.708,41,1.59,42,2.794,43,2.794,44,2.794,45,4.404,46,4.404,47,4.404,48,4.404,49,4.404,50,4.404,51,4.404,52,4.115,53,2.303,54,1.59,55,1.514,56,3.222,57,3.637,58,3.222,59,2.794,60,3.222,61,2.794,62,3.222,63,3.222,64,3.222,65,3.222,66,3.222,67,2.794,68,2.794,69,4.666,70,4.666,71,2.794,72,2.885,73,3.332,74,3.222,75,3.222,76,2.511,77,1.992,78,3.222,79,3.222,80,3.222,81,2.301,82,3.222,83,3.222,84,2.301,85,2.301,86,3.222,87,3.222,88,3.222,89,3.222,90,3.222,91,3.222,92,3.222,93,3.222,94,3.222,95,3.222,96,3.222,97,3.222,98,3.222,99,2.794,100,4.666,101,4.666]],["title/injectables/AppService.html",[19,2.411,102,0.948]],["body/injectables/AppService.html",[3,0.201,4,0.201,5,0.103,11,0.015,17,0.477,18,1.099,19,4.327,23,0.201,24,0.328,31,0.013,32,0.013,102,1.701,103,2.556,104,5.175]],["title/controllers/AuthController.html",[0,1.297,105,2.784]],["body/controllers/AuthController.html",[0,1.112,2,1.112,3,0.113,4,0.113,5,0.058,7,0.455,8,1.309,10,2.336,11,0.015,13,1.097,15,1.701,16,1.277,17,0.517,18,0.616,21,3.552,23,0.113,24,0.184,26,1.531,28,1.839,31,0.009,32,0.009,72,2.068,105,3.422,106,2.899,107,1.834,108,3.343,109,3.01,110,4.792,111,4.792,112,4.792,113,4.155,114,4.155,115,3.343,116,3.343,117,3.343,118,1.839,119,1.4,120,1.007,121,1.514,122,1.659,123,3.763,124,3.343,125,3.343,126,3.343,127,4.368,128,3.343,129,3.343,130,3.343,131,3.343,132,4.591,133,3.343,134,3.343,135,3.343,136,3.343,137,3.343,138,1.834,139,2.068,140,3.343,141,3.343,142,3.343,143,3.464,144,2.899,145,2.899,146,2.899,147,3.343,148,2.106,149,1.834,150,3.343,151,1.432,152,2.252,153,6.117,154,3.343,155,3.343,156,2.653,157,3.343,158,3.343,159,3.343,160,3.343,161,3.343,162,3.343,163,3.343,164,4.792,165,3.343,166,3.343,167,3.343,168,3.343,169,3.343,170,3.343,171,2.899]],["title/guards/AuthGuard.html",[72,2.411,172,3.039]],["body/guards/AuthGuard.html",[3,0.115,4,0.115,5,0.059,7,0.466,8,1.331,11,0.015,13,0.961,15,1.28,16,1.092,17,0.542,18,0.897,21,1.877,23,0.191,24,0.188,26,1.557,28,1.611,31,0.009,32,0.009,72,3.013,77,2.116,102,1.185,109,2.226,118,1.611,119,1.226,120,1.016,121,1.327,127,4.415,151,2.087,152,3.07,156,1.402,173,3.422,174,2.444,175,5.36,176,4.872,177,3.422,178,4.849,179,6.058,180,3.422,181,4.225,182,4.819,183,3.422,184,2.967,185,2.29,186,4.225,187,3.725,188,3.422,189,4.423,190,4.423,191,2.265,192,2.116,193,2.444,194,2.967,195,2.967,196,1.877,197,3.479,198,2.116,199,1.877,200,2.741,201,2.444,202,4.423,203,2.668,204,2.43,205,2.265,206,2.967,207,2.967,208,2.967,209,2.668,210,2.967,211,2.832,212,1.832,213,2.116,214,3.798,215,2.967,216,2.265,217,2.444,218,2.967,219,1.989,220,2.967,221,2.967]],["title/modules/AuthModule.html",[33,1.297,45,2.581]],["body/modules/AuthModule.html",[2,1.872,3,0.142,4,0.142,5,0.073,11,0.015,17,0.607,18,0.777,23,0.142,24,0.232,31,0.01,32,0.01,33,2.106,35,1.891,36,1.891,37,2.082,38,2.082,39,1.891,40,3.127,41,2.082,45,5.164,52,4.479,53,2.778,54,2.082,55,1.982,57,4.387,105,4.523,143,4.479,144,3.657,148,2.723,149,2.314,178,4.019,191,3.725,192,2.609,193,3.012,204,1.806,216,2.792,217,3.012,222,3.657,223,4.218,224,3.657,225,2.723,226,4.218,227,4.218,228,4.218,229,3.012,230,4.218,231,4.218,232,4.218,233,4.218,234,4.218,235,4.218]],["title/injectables/AuthService.html",[102,0.948,143,2.411]],["body/injectables/AuthService.html",[3,0.054,4,0.054,5,0.095,7,0.216,8,0.731,11,0.015,13,0.931,15,1.374,16,1.294,17,0.507,18,0.293,23,0.054,24,0.087,26,1.108,28,1.725,31,0.005,32,0.005,55,0.748,102,0.651,103,0.681,109,2.675,113,2.322,114,2.322,118,1.486,119,1.235,120,0.814,121,1.223,122,0.551,127,1.912,143,1.656,145,1.379,146,1.379,148,1.849,151,1.147,152,2.923,156,2.849,178,3.735,185,2.923,190,4.281,191,1.053,192,0.984,193,1.136,198,3.041,199,3.013,200,2.9,204,0.681,211,3.192,212,2.149,213,1.656,214,4.077,216,3.255,217,3.512,219,1.556,225,1.529,229,1.136,236,1.379,237,4.067,238,2.678,239,2.678,240,2.678,241,3.467,242,1.379,243,2.015,244,1.591,245,1.591,246,4.077,247,2.678,248,3.467,249,1.591,250,2.678,251,4.918,252,1.591,253,2.034,254,2.678,255,1.591,256,2.678,257,1.591,258,2.678,259,1.591,260,1.591,261,2.921,262,3.041,263,4.955,264,1.591,265,2.678,266,1.379,267,2.087,268,0.984,269,0.598,270,1.591,271,2.678,272,1.24,273,3.467,274,1.136,275,1.136,276,1.912,277,2.144,278,1.136,279,1.136,280,2.322,281,4.067,282,2.678,283,4.918,284,2.698,285,3.007,286,3.467,287,3.512,288,1.591,289,1.136,290,1.591,291,1.591,292,2.678,293,1.591,294,4.067,295,2.678,296,2.322,297,2.678,298,2.678,299,1.591,300,2.428,301,4.538,302,1.379,303,4.538,304,2.678,305,2.678,306,2.678,307,2.678,308,2.295,309,3.467,310,2.678,311,2.678,312,2.678,313,2.904,314,1.591,315,2.678,316,1.379,317,1.379,318,1.591,319,1.591,320,1.591,321,1.24,322,1.591,323,1.591,324,1.591,325,2.678,326,1.591,327,1.136,328,1.24,329,0.873,330,1.379,331,1.379,332,1.379,333,1.379,334,2.678,335,1.591,336,1.591,337,1.591,338,1.591,339,1.591,340,1.591,341,1.24,342,1.591,343,1.591,344,1.591,345,1.591,346,1.591,347,1.379,348,1.591,349,1.591]],["title/interfaces/AuthUser.html",[196,2.139,268,2.411]],["body/interfaces/AuthUser.html",[3,0.165,4,0.165,5,0.085,7,0.665,11,0.015,16,1.424,17,0.391,23,0.229,24,0.34,31,0.012,32,0.012,119,1.057,120,0.761,132,3.024,196,2.683,198,3.024,253,2.778,261,2.913,262,3.024,268,3.832,269,1.839,287,5.107,350,3.812,351,3.492,352,3.492,353,2.778,354,1.83,355,2.842,356,3.812,357,3.812,358,3.812,359,3.812,360,3.492,361,3.812,362,3.049,363,3.812,364,3.812,365,3.812,366,3.812,367,3.812,368,3.812]],["title/classes/Chat.html",[24,0.214,369,2.581]],["body/classes/Chat.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,369,4.693,370,1.373,371,5.294]],["title/controllers/ChatController.html",[0,1.297,372,2.784]],["body/controllers/ChatController.html",[0,1.219,2,1.219,3,0.123,4,0.123,5,0.063,7,0.499,8,1.397,10,2.418,11,0.015,13,1.136,15,1.761,16,1.304,17,0.509,18,0.675,23,0.123,24,0.201,25,1.81,26,1.171,28,1.81,31,0.01,32,0.01,84,2.618,85,2.618,107,2.011,118,1.81,119,1.378,120,0.991,121,1.49,122,2.557,138,2.806,187,2.011,272,2.858,284,2.011,372,3.652,373,3.178,374,3.178,375,2.806,376,2.525,377,6.373,378,2.525,379,2.525,380,3.178,381,5.114,382,3.666,383,3.385,384,1.81,385,3.652,386,3.666,387,4.434,388,3.666,389,2.267,390,1.81,391,3.652,392,3.666,393,2.011,394,4.811,395,3.987,396,3.666,397,2.618,398,2.267,399,1.81,400,2.618,401,3.178,402,3.423,403,2.858,404,3.666,405,3.666,406,3.178,407,2.267,408,2.858,409,3.178,410,2.618,411,3.666,412,2.858,413,2.618,414,3.666,415,2.858,416,3.666,417,2.618,418,3.666]],["title/classes/ChatCreatedEvent.html",[24,0.214,407,2.411]],["body/classes/ChatCreatedEvent.html",[3,0.165,4,0.165,5,0.085,7,0.665,11,0.015,13,1.212,16,1.382,23,0.165,24,0.269,31,0.012,32,0.012,118,1.389,119,1.595,120,1.173,121,1.143,151,2.094,300,2.414,354,1.83,370,1.099,407,3.832,419,4.24,420,5.575,421,5.575,422,6.196,423,3.832,424,4.89,425,4.89,426,4.89,427,4.89,428,4.89,429,4.89,430,4.89,431,4.89,432,4.89,433,4.89]],["title/injectables/ChatCreatedListener.html",[102,0.948,434,3.039]],["body/injectables/ChatCreatedListener.html",[3,0.175,4,0.175,5,0.09,7,0.706,8,1.757,10,1.873,11,0.015,13,0.88,15,1.364,17,0.558,18,0.956,23,0.175,24,0.285,31,0.012,32,0.012,84,3.708,85,3.708,102,1.564,103,2.224,118,1.475,119,1.122,120,0.808,121,1.214,387,5.578,389,3.211,401,4.502,407,4.519,408,4.047,434,5.015,435,4.502,436,6.433,437,6.433,438,5.192,439,5.192,440,5.192]],["title/classes/ChatGateway.html",[24,0.214,441,2.784]],["body/classes/ChatGateway.html",[3,0.141,4,0.141,5,0.072,7,0.569,8,1.529,10,2.02,11,0.015,13,1.069,15,1.1,17,0.538,23,0.141,24,0.23,25,2.066,26,1.337,28,1.189,31,0.01,32,0.01,109,2.475,118,1.59,119,1.21,120,0.981,121,1.309,123,2.432,151,1.792,156,1.714,200,1.642,289,4.505,354,1.653,369,4.648,370,0.941,400,2.988,402,4.2,403,3.262,441,3.998,442,3.628,443,6.265,444,6.309,445,4.185,446,4.185,447,5.47,448,4.185,449,4.185,450,4.166,451,5.598,452,4.185,453,5.598,454,4.854,455,3.628,456,4.854,457,3.262,458,3.262,459,2.175,460,3.628,461,3.628,462,3.628,463,3.628,464,3.628,465,3.628,466,3.628,467,3.628,468,4.185,469,4.185]],["title/modules/ChatModule.html",[33,1.297,46,2.581]],["body/modules/ChatModule.html",[2,1.954,3,0.152,4,0.152,5,0.078,11,0.015,17,0.6,18,0.829,23,0.152,24,0.247,31,0.011,32,0.011,33,2.176,35,2.019,36,2.019,37,2.223,38,2.223,39,2.019,40,3.229,41,2.223,46,5.215,53,2.901,54,2.223,55,2.117,148,2.774,149,2.471,225,2.774,372,4.672,402,4.287,403,3.511,441,4.197,470,3.905,471,3.905,472,3.833,473,4.504,474,4.504,475,4.504,476,2.471,477,3.905]],["title/injectables/ChatService.html",[102,0.948,402,2.266]],["body/injectables/ChatService.html",[3,0.081,4,0.081,5,0.042,7,0.329,8,1.027,11,0.015,13,1.092,15,1.693,16,0.815,17,0.498,18,0.445,23,0.081,24,0.133,26,1.474,28,1.695,31,0.007,32,0.007,102,0.914,103,1.035,109,2.596,118,1.77,119,1.393,120,0.929,121,1.457,122,2.386,123,1.405,148,2.343,149,1.326,151,1.61,152,2.168,156,2.639,185,2.446,200,2.212,204,1.035,212,0.909,225,1.957,243,2.185,253,2.068,261,1.61,269,0.909,272,1.884,289,1.726,300,1.193,329,2.531,362,2.967,369,3.445,375,2.062,376,1.856,378,1.856,379,1.856,384,1.856,389,1.495,390,1.856,393,2.062,394,4.265,399,1.193,400,2.685,402,2.185,407,1.495,408,1.884,420,1.884,421,2.93,450,3.219,459,1.256,472,3.238,476,1.326,477,2.096,478,2.096,479,3.759,480,1.664,481,5.204,482,1.726,483,2.417,484,3.759,485,3.054,486,2.417,487,3.759,488,2.417,489,3.759,490,2.417,491,3.759,492,2.417,493,2.417,494,2.417,495,2.417,496,2.488,497,4.513,498,2.096,499,2.417,500,3.259,501,2.417,502,2.325,503,2.417,504,2.417,505,2.417,506,3.759,507,2.417,508,2.417,509,4.026,510,2.417,511,2.417,512,2.417,513,3.259,514,2.096,515,3.759,516,3.759,517,2.417,518,2.096,519,2.417,520,1.884,521,2.417,522,2.417,523,2.417,524,2.417,525,2.096,526,2.096,527,3.054,528,1.726,529,1.6,530,2.417]],["title/classes/CreateChatDto.html",[24,0.214,450,2.411]],["body/classes/CreateChatDto.html",[3,0.151,4,0.151,5,0.077,7,0.609,11,0.015,13,1.289,16,1.372,23,0.151,24,0.246,31,0.011,32,0.011,120,1.184,121,1.816,329,3.579,354,1.729,370,1.007,421,5.085,450,3.621,485,4.875,497,5.657,526,5.657,531,6.673,532,3.491,533,6.524,534,3.792,535,6.524,536,4.318,537,4.478,538,4.478,539,4.478,540,4.478,541,4.478,542,4.478,543,4.478,544,4.478]],["title/classes/CreateFedUserDto.html",[24,0.214,277,2.411]],["body/classes/CreateFedUserDto.html",[3,0.134,4,0.134,5,0.069,7,0.54,10,2.566,11,0.015,13,1.205,16,1.41,17,0.317,23,0.182,24,0.337,31,0.01,32,0.01,119,1.425,120,1.107,121,1.541,199,3.616,253,2.954,277,3.339,278,5.198,308,4.362,354,1.595,355,2.305,370,0.892,545,2.832,546,5.714,547,5.714,548,3.856,549,3.966,550,5.774,551,3.966,552,3.439,553,3.966,554,3.966,555,4.682,556,3.966,557,3.966,558,5.323,559,5.424,560,3.439,561,6.422,562,2.832,563,2.305,564,3.439]],["title/classes/CreateFileDto.html",[24,0.214,565,2.784]],["body/classes/CreateFileDto.html",[3,0.175,4,0.175,5,0.09,7,0.709,11,0.015,13,1.24,16,1.353,23,0.175,24,0.286,31,0.012,32,0.012,119,1.513,120,1.138,354,1.904,362,2.89,370,1.171,565,4.603,566,6.519,567,4.06,568,4.999,569,6.07,570,5.457,571,5.209,572,5.209,573,5.209,574,5.209]],["title/classes/CreateHealthDto.html",[24,0.214,575,2.581]],["body/classes/CreateHealthDto.html",[3,0.205,4,0.205,5,0.105,11,0.014,23,0.205,24,0.334,31,0.013,32,0.013,370,1.368,575,4.683,576,5.274,577,4.741]],["title/classes/CreateNotificationDto.html",[24,0.214,578,2.411]],["body/classes/CreateNotificationDto.html",[3,0.205,4,0.205,5,0.105,11,0.014,23,0.205,24,0.334,31,0.013,32,0.013,370,1.368,578,4.375,579,5.274,580,4.741]],["title/classes/CreatePostDto.html",[24,0.214,581,2.411]],["body/classes/CreatePostDto.html",[3,0.135,4,0.135,5,0.069,7,0.544,10,2.572,11,0.015,13,1.208,16,1.311,17,0.433,23,0.135,24,0.298,31,0.01,32,0.01,120,1.183,121,1.778,204,2.96,269,1.503,329,3.381,354,1.603,370,0.899,423,2.471,536,4.079,548,3.876,550,5.557,559,5.208,562,2.854,581,3.356,582,6.323,583,3.115,584,4.401,585,4.804,586,5.344,587,3.465,588,3.465,589,3.996,590,4.706,591,3.996,592,3.996,593,3.996,594,3.996,595,4.804,596,3.996,597,5.427,598,5.427,599,5.427,600,5.427,601,6.163,602,3.465]],["title/classes/CreateRoomDto.html",[24,0.214,603,2.411]],["body/classes/CreateRoomDto.html",[3,0.183,4,0.183,5,0.094,7,0.737,11,0.015,13,0.919,16,1.31,17,0.433,23,0.223,24,0.363,31,0.012,32,0.012,120,0.843,122,1.877,261,3.052,269,2.039,354,1.951,370,1.219,534,3.151,603,4.086,604,5.15,605,3.588,606,5.555,607,5.421,608,3.871,609,3.588,610,4.701]],["title/classes/CreateUserDto.html",[24,0.214,563,2.266]],["body/classes/CreateUserDto.html",[3,0.129,4,0.129,5,0.066,7,0.523,10,2.603,11,0.015,13,1.223,16,1.409,17,0.307,23,0.178,24,0.332,31,0.01,32,0.01,119,1.406,120,1.123,121,1.647,199,3.568,253,2.915,277,2.376,278,5.25,308,4.304,354,1.56,355,3.51,370,0.864,545,2.744,546,5.639,547,5.639,548,3.773,550,5.731,552,3.332,555,4.581,558,5.236,559,5.391,560,3.332,561,6.374,562,2.744,563,3.071,564,3.332,611,3.842,612,3.842,613,3.842,614,3.842,615,3.842,616,3.842,617,3.842,618,3.842]],["title/classes/ExceptionsLoggerFilter.html",[24,0.214,619,3.039]],["body/classes/ExceptionsLoggerFilter.html",[3,0.129,4,0.129,5,0.091,7,0.523,8,1.443,11,0.015,13,0.895,15,1.388,17,0.482,18,0.707,23,0.129,24,0.211,28,1.501,31,0.01,32,0.01,77,2.376,118,1.501,119,1.142,120,0.822,121,1.235,138,3.74,152,2.838,187,2.899,200,2.764,205,3.497,212,1.445,219,3.78,276,3.773,289,2.744,321,2.995,341,4.707,347,5.236,370,0.864,389,2.376,496,3.997,619,4.119,620,3.332,621,6.038,622,5.283,623,5.283,624,6.503,625,6.038,626,6.503,627,3.842,628,5.283,629,5.283,630,3.842,631,3.842,632,3.842,633,3.842,634,3.842,635,5.283,636,3.842,637,5.283,638,3.842,639,3.842,640,3.332,641,3.332,642,3.842,643,5.283,644,3.842,645,3.842,646,3.842,647,3.842,648,3.842,649,4.581,650,3.842,651,3.842,652,3.842,653,5.283,654,5.283,655,3.842]],["title/classes/File.html",[5,0.067,24,0.214]],["body/classes/File.html",[3,0.206,4,0.206,5,0.13,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,656,5.294]],["title/controllers/FileController.html",[0,1.297,657,2.784]],["body/controllers/FileController.html",[0,0.927,2,0.927,3,0.094,4,0.094,5,0.104,7,0.379,8,1.146,10,2.169,11,0.015,13,1.019,15,1.58,16,1.219,17,0.538,18,0.513,23,0.094,24,0.153,25,1.377,26,0.891,28,1.794,31,0.008,32,0.008,76,2.174,77,1.724,107,1.53,109,1.977,118,1.592,119,1.365,120,0.935,121,1.311,122,2.187,123,1.621,138,2.301,139,1.724,156,1.718,187,2.301,200,2.571,204,1.796,212,1.577,274,3.6,275,1.991,276,2.995,284,1.53,327,2.995,328,2.174,329,1.53,332,2.418,333,2.418,375,3.076,376,2.07,378,2.07,379,2.07,383,3.979,384,1.377,385,2.995,390,1.377,391,2.995,393,1.53,395,3.269,397,1.991,398,1.724,399,1.377,412,2.174,413,1.991,415,2.174,417,1.991,568,1.991,657,2.995,658,2.174,659,5.04,660,2.788,661,2.788,662,2.788,663,4.463,664,2.788,665,2.788,666,3.929,667,2.788,668,2.788,669,3.6,670,4.194,671,4.194,672,4.194,673,2.765,674,2.418,675,2.174,676,4.194,677,3.636,678,2.418,679,2.788,680,2.174,681,2.788,682,3.269,683,2.418,684,2.418,685,2.418,686,2.418,687,2.418,688,2.418,689,2.418,690,3.6,691,4.37,692,2.418,693,2.418,694,2.418,695,2.418,696,2.418,697,2.418,698,2.418,699,2.418,700,2.418,701,3.636,702,2.418,703,2.788,704,2.788,705,2.788,706,3.636,707,2.788,708,2.788,709,2.788,710,2.788,711,2.788,712,2.788,713,2.788,714,1.449,715,2.788,716,2.174,717,2.788,718,2.788,719,2.418,720,2.788,721,2.788,722,2.788,723,2.788,724,2.788]],["title/modules/FileModule.html",[33,1.297,47,2.581]],["body/modules/FileModule.html",[2,2.033,3,0.161,4,0.161,5,0.083,11,0.015,17,0.585,18,0.881,23,0.161,24,0.263,31,0.011,32,0.011,33,2.24,35,2.146,36,2.146,37,2.363,38,2.363,39,2.146,40,3.325,41,2.363,47,5.198,53,3.018,54,2.363,55,2.25,148,2.819,149,2.626,225,2.819,229,3.419,657,4.809,673,4.113,674,4.151,725,4.151,726,4.151,727,4.787,728,4.787]],["title/injectables/FileService.html",[102,0.948,673,2.139]],["body/injectables/FileService.html",[3,0.069,4,0.069,5,0.118,7,0.279,8,0.901,10,0.739,11,0.015,13,1.115,15,1.73,16,1.315,17,0.467,18,0.377,23,0.069,24,0.112,26,1.662,28,1.782,31,0.006,32,0.006,81,1.462,102,0.802,103,0.877,109,2.744,118,1.726,119,1.314,120,1.002,121,1.421,122,2.23,123,1.19,148,2.09,149,1.124,151,1.412,152,2.856,156,2.57,185,2.23,200,2.526,211,1.916,212,1.956,213,1.266,219,1.19,225,1.784,242,1.776,243,2.757,246,2.57,253,1.855,261,0.877,269,0.77,275,1.462,276,1.462,280,1.776,284,1.124,300,2.043,313,2.355,317,1.776,330,1.776,331,1.776,354,0.974,375,2.603,376,1.628,378,1.628,379,2.043,384,1.628,390,1.628,393,1.809,399,1.011,476,1.124,480,1.493,496,3.868,509,1.462,527,3.14,528,1.462,529,1.356,568,1.462,569,1.776,570,1.596,663,4.023,666,4.332,669,3.968,673,1.809,675,1.596,690,1.462,729,1.776,730,4.332,731,3.297,732,4.139,733,4.744,734,3.297,735,2.048,736,2.048,737,2.048,738,3.297,739,2.048,740,2.048,741,2.048,742,2.048,743,4.139,744,2.048,745,3.589,746,3.297,747,2.048,748,3.297,749,2.048,750,2.048,751,2.048,752,1.356,753,1.356,754,2.048,755,1.462,756,2.048,757,1.776,758,2.048,759,2.048,760,2.048,761,2.048,762,2.048,763,2.048,764,3.297,765,2.048,766,2.048,767,1.356,768,2.048,769,2.048,770,4.744,771,1.462,772,2.048,773,2.048,774,2.048,775,2.048,776,2.048,777,4.139,778,1.776,779,1.776,780,2.048,781,3.297,782,2.048,783,2.048,784,2.048,785,2.048,786,3.297,787,2.048,788,2.048,789,2.048,790,2.048,791,2.048,792,2.048,793,2.048,794,1.776,795,2.048,796,2.048,797,2.048,798,2.048,799,2.859,800,3.297,801,4.744,802,2.048,803,3.297,804,3.297,805,2.355,806,1.776,807,1.776,808,2.048]],["title/classes/GoogleAuthUser.html",[24,0.214,262,2.411]],["body/classes/GoogleAuthUser.html",[3,0.125,4,0.125,5,0.064,7,0.506,11,0.015,13,1.313,16,1.415,17,0.297,23,0.2,24,0.284,31,0.01,32,0.01,119,1.283,120,1.205,132,2.299,196,2.039,198,3.67,253,2.874,261,2.211,262,3.193,268,2.299,269,1.398,287,2.654,351,5.565,352,2.654,353,1.666,354,1.525,355,2.16,356,4.625,357,4.625,358,4.625,359,4.625,360,3.688,361,4.625,362,3.126,363,4.625,364,4.625,365,4.625,366,4.625,367,4.625,368,4.625,370,0.836,809,3.717,810,3.717,811,3.717,812,3.717,813,3.717,814,3.717,815,3.717,816,3.717,817,3.717,818,3.717,819,3.717,820,3.717,821,3.717,822,3.717]],["title/classes/Health.html",[24,0.214,823,2.581]],["body/classes/Health.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,823,4.693,824,5.294]],["title/controllers/HealthController.html",[0,1.297,825,2.784]],["body/controllers/HealthController.html",[0,1.15,2,1.15,3,0.117,4,0.117,5,0.06,7,0.471,8,1.341,10,2.366,11,0.015,13,1.112,15,1.724,17,0.496,18,0.637,21,3.739,23,0.117,24,0.19,26,2.096,28,1.863,31,0.009,32,0.009,107,1.898,151,1.481,152,3.083,246,2.697,275,2.47,706,4.257,779,2.999,823,3.25,825,3.506,826,2.999,827,6.212,828,6.212,829,6.212,830,6.212,831,6.212,832,3.459,833,3.459,834,3.459,835,3.459,836,3.459,837,3.459,838,3.459,839,3.459,840,3.459,841,3.459,842,4.91,843,4.91,844,6.815,845,4.91,846,4.91,847,4.91,848,2.697,849,2.999,850,3.827,851,3.506,852,2.999,853,3.459,854,3.459,855,4.91,856,3.459,857,3.459,858,3.459,859,3.459,860,6.56,861,4.91,862,2.999,863,3.459,864,3.459,865,3.459,866,3.459,867,2.999,868,3.459,869,3.459,870,2.999,871,2.999,872,3.459,873,3.459,874,3.459,875,3.459,876,3.459,877,3.459,878,3.459,879,3.459,880,3.459,881,3.459]],["title/modules/HealthModule.html",[33,1.297,48,2.581]],["body/modules/HealthModule.html",[2,2.085,3,0.168,4,0.168,5,0.086,11,0.015,17,0.593,18,0.917,23,0.168,24,0.274,31,0.012,32,0.012,33,2.282,35,2.233,36,2.233,37,2.459,38,2.459,39,2.233,40,3.387,41,2.459,48,5.014,53,3.095,54,2.459,55,2.341,57,3.883,825,4.899,848,3.883,882,4.319,883,4.319,884,5.014,885,4.981,886,4.981,887,4.981,888,6.269,889,6.269,890,4.319]],["title/injectables/HealthService.html",[102,0.948,884,2.581]],["body/injectables/HealthService.html",[3,0.137,4,0.137,5,0.07,7,0.552,8,1.498,11,0.015,13,1.177,15,1.924,16,1.228,17,0.438,18,0.747,23,0.137,24,0.223,28,1.973,31,0.01,32,0.01,102,1.333,103,1.737,118,1.889,119,1.438,120,1.035,121,1.555,122,2.48,212,1.526,362,3.383,375,3.65,376,2.707,378,2.707,379,2.707,384,2.707,390,2.707,393,3.008,459,2.108,480,1.978,527,4.599,528,2.897,529,2.685,575,4.74,823,4.599,884,3.629,891,3.518,892,5.483,893,4.057,894,4.057,895,4.057,896,4.057,897,4.057,898,3.518,899,3.518]],["title/classes/JoinRoomDto.html",[24,0.214,900,2.581]],["body/classes/JoinRoomDto.html",[3,0.169,4,0.169,5,0.087,7,0.682,11,0.015,13,1.166,16,1.275,17,0.503,23,0.212,24,0.346,31,0.012,32,0.012,120,1.07,353,3.084,354,1.859,370,1.127,480,1.808,485,4.166,534,3.999,603,3.1,605,3.318,609,4.554,714,2.605,900,4.166,901,5.625,902,5.965,903,5.363,904,4.346,905,5.013,906,4.346,907,2.913,908,2.75,909,3.318,910,2.913]],["title/interfaces/JwtSubPayload.html",[196,2.139,197,2.784]],["body/interfaces/JwtSubPayload.html",[3,0.126,4,0.126,5,0.065,7,0.509,11,0.015,16,1.266,17,0.558,18,0.955,21,2.054,23,0.201,24,0.206,26,1.658,28,1.692,31,0.01,32,0.01,72,2.315,77,2.315,102,1.262,109,1.468,120,1,127,4.593,151,1.603,152,2.799,156,1.533,174,2.673,175,4.499,178,4.253,179,5.164,181,3.246,182,4.045,185,1.759,186,3.246,187,3.268,189,4.045,190,4.643,191,2.478,192,2.315,193,2.673,194,3.246,195,3.246,196,2.054,197,4.253,198,3.977,199,3.528,200,2.811,201,2.673,202,4.643,203,2.918,204,2.551,205,2.478,206,3.246,207,3.246,208,3.246,209,2.918,210,3.246,211,3.016,212,1.951,213,2.315,214,4.045,215,3.246,216,2.478,217,2.673,218,3.246,219,2.176,220,3.246,221,3.246,350,2.918,354,1.532]],["title/injectables/LoggingInterceptor.html",[73,2.784,102,0.948]],["body/injectables/LoggingInterceptor.html",[3,0.135,4,0.135,5,0.107,7,0.546,8,1.488,11,0.015,13,0.923,15,1.055,16,0.71,17,0.493,18,0.739,23,0.135,24,0.221,26,1.974,28,1.547,31,0.01,32,0.01,73,3.889,102,1.324,103,1.72,118,1.141,119,0.868,120,0.625,121,0.939,152,2.904,182,5.164,184,3.482,187,3.39,200,2.424,205,2.658,209,3.131,212,2.048,300,1.983,341,3.131,354,1.608,570,3.131,640,5.357,641,5.357,730,5.164,752,2.658,753,2.658,794,3.482,911,3.482,912,5.446,913,5.446,914,6.179,915,6.624,916,4.016,917,6.179,918,5.446,919,4.016,920,5.446,921,3.482,922,5.446,923,4.016,924,4.016,925,5.446,926,4.016,927,5.446,928,4.016,929,6.179,930,4.016,931,4.016,932,4.016,933,4.016,934,4.016,935,4.016,936,2.868,937,4.016,938,4.016,939,4.016,940,4.016,941,4.016,942,4.016]],["title/classes/Notification.html",[24,0.214,943,2.581]],["body/classes/Notification.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,943,4.693,944,5.294]],["title/controllers/NotificationController.html",[0,1.297,945,2.784]],["body/controllers/NotificationController.html",[0,1.136,2,1.136,3,0.115,4,0.115,5,0.059,7,0.465,8,1.329,10,2.448,11,0.015,13,1.15,15,1.783,16,1.283,17,0.521,18,0.629,23,0.115,24,0.188,25,1.686,26,1.091,28,1.854,31,0.009,32,0.009,81,2.439,107,1.873,118,1.754,119,1.467,120,0.961,121,1.444,122,2.35,138,2.669,139,3.505,284,1.873,375,3.388,376,2.401,378,2.401,379,2.797,384,1.686,385,3.474,389,2.112,390,1.686,391,3.474,393,1.873,395,3.792,397,2.439,398,2.112,399,1.686,410,2.439,413,2.439,417,2.439,459,1.775,480,1.755,578,4.196,757,4.914,936,3.474,943,2.26,945,3.474,946,2.961,947,6.176,948,2.961,949,3.415,950,3.415,951,3.415,952,3.415,953,4.865,954,4.865,955,4.865,956,3.415,957,4.725,958,3.415,959,3.505,960,2.961,961,3.792,962,3.415,963,3.415,964,3.415,965,3.415,966,3.415,967,3.415,968,3.415]],["title/modules/NotificationModule.html",[33,1.297,49,2.581]],["body/modules/NotificationModule.html",[2,2.14,3,0.175,4,0.175,5,0.09,11,0.015,17,0.558,18,0.956,23,0.175,24,0.285,31,0.012,32,0.012,33,2.325,35,2.327,36,2.327,37,2.563,38,2.563,39,2.327,40,3.451,41,2.563,49,5.066,53,3.176,54,2.563,55,2.44,945,4.992,959,4.733,960,4.502,969,4.502,970,4.502,971,5.192,972,5.192]],["title/injectables/NotificationService.html",[102,0.948,959,2.411]],["body/injectables/NotificationService.html",[3,0.132,4,0.132,5,0.068,7,0.534,8,1.465,11,0.015,13,1.164,15,1.907,16,1.38,17,0.488,18,0.723,23,0.132,24,0.216,28,1.951,31,0.01,32,0.01,102,1.304,103,1.682,118,1.864,119,1.419,120,1.021,121,1.535,122,2.456,212,1.477,375,3.601,376,2.648,378,2.648,379,2.648,384,2.648,390,2.648,393,2.943,399,1.939,459,2.041,480,1.935,527,4.548,528,2.805,529,2.6,578,4.386,899,3.405,943,4.548,948,4.65,957,4.891,959,3.317,961,4.181,973,3.405,974,3.927,975,3.927,976,3.927,977,3.927,978,3.927]],["title/controllers/PostController.html",[0,1.297,979,2.784]],["body/controllers/PostController.html",[0,0.535,2,0.535,3,0.054,4,0.054,5,0.028,7,0.219,8,0.738,10,2.298,11,0.015,13,1.079,15,1.674,16,1.303,17,0.327,18,0.296,23,0.054,24,0.088,25,0.794,26,0.514,28,1.809,31,0.005,32,0.005,107,0.882,109,2.99,118,1.809,119,1.377,120,1.075,121,1.489,122,2.487,138,2.505,139,2.533,156,2.609,185,3.415,187,3.494,200,1.06,204,1.956,253,1.567,269,0.605,274,1.149,284,0.882,300,0.794,362,2.798,383,4.921,398,1.671,410,3.755,412,4.865,423,2.533,459,0.836,536,1.065,581,3.251,584,1.93,716,1.254,767,1.065,771,1.93,979,1.93,980,1.395,981,1.395,982,3.031,983,3.495,984,3.495,985,3.495,986,3.031,987,2.107,988,3.495,989,3.495,990,3.495,991,3.495,992,3.495,993,3.031,994,3.495,995,1.608,996,2.703,997,1.608,998,1.608,999,6.483,1000,4.096,1001,2.703,1002,1.608,1003,1.608,1004,2.703,1005,1.608,1006,1.608,1007,4.096,1008,2.703,1009,1.608,1010,1.608,1011,1.608,1012,1.395,1013,2.343,1014,1.608,1015,1.608,1016,2.703,1017,1.608,1018,1.608,1019,3.495,1020,2.343,1021,1.608,1022,3.96,1023,1.608,1024,2.343,1025,1.608,1026,1.608,1027,3.941,1028,3.653,1029,2.703,1030,1.608,1031,1.608,1032,2.703,1033,1.608,1034,2.107,1035,1.608,1036,2.703,1037,1.608,1038,1.608,1039,2.703,1040,1.608,1041,1.395,1042,2.725,1043,2.162,1044,1.395,1045,1.608,1046,1.254,1047,1.608,1048,2.703,1049,4.096,1050,4.096,1051,1.608,1052,1.608,1053,2.343,1054,3.551,1055,1.608,1056,1.608,1057,1.608,1058,4.096,1059,1.608,1060,3.551,1061,1.608,1062,2.703,1063,1.608,1064,2.343,1065,2.343,1066,1.789,1067,2.107,1068,2.343,1069,2.343,1070,1.254,1071,1.608,1072,1.395,1073,2.703,1074,1.608,1075,1.608,1076,1.608,1077,1.608,1078,2.703,1079,1.608,1080,1.608,1081,1.395,1082,1.608]],["title/modules/PostModule.html",[33,1.297,50,2.581]],["body/modules/PostModule.html",[2,1.984,3,0.155,4,0.155,5,0.08,11,0.015,17,0.593,18,0.848,23,0.155,24,0.253,31,0.011,32,0.011,33,2.2,35,2.065,36,2.065,37,2.275,38,2.275,39,2.065,40,3.265,41,2.275,50,5.232,53,2.944,54,2.275,55,2.165,148,2.791,149,2.528,225,2.791,476,2.528,673,4.072,979,4.723,1043,4.59,1044,3.995,1083,3.995,1084,3.995,1085,4.607,1086,4.607,1087,3.995]],["title/injectables/PostService.html",[102,0.948,1043,2.411]],["body/injectables/PostService.html",[3,0.035,4,0.035,5,0.018,7,0.25,8,0.502,11,0.015,13,0.988,15,1.501,16,1.323,17,0.277,18,0.19,23,0.035,24,0.057,26,0.587,28,1.686,31,0.003,32,0.003,102,0.447,103,0.441,109,2.859,118,1.656,119,1.361,120,0.967,121,1.363,122,2.229,139,4.094,151,0.787,152,0.863,156,2.664,185,3.204,189,0.803,199,0.565,200,2.674,204,3.121,211,2.421,212,1.566,213,0.637,219,0.599,225,1.135,243,1.444,253,3.235,261,1.784,269,0.387,285,4.26,300,2.522,308,2.292,313,1.312,321,0.803,329,1.363,360,1.775,362,0.823,406,0.893,423,1.866,459,0.535,476,0.565,480,0.372,482,0.736,496,2.944,509,1.775,520,4.118,536,0.682,581,1.866,584,2.743,585,1.432,595,0.803,602,3.33,669,0.736,673,2.285,745,0.893,755,0.736,767,2.292,799,1.592,805,2.743,806,0.893,807,0.893,871,1.592,936,2.155,981,2.155,982,1.592,986,2.155,987,1.432,993,1.592,1027,1.775,1028,1.645,1034,2.352,1043,1.136,1046,0.803,1054,2.617,1060,0.893,1066,1.645,1070,3.83,1087,0.893,1088,0.893,1089,2.485,1090,2.485,1091,1.837,1092,1.837,1093,1.837,1094,1.837,1095,1.837,1096,1.837,1097,2.485,1098,1.837,1099,1.837,1100,1.03,1101,1.837,1102,1.03,1103,6.673,1104,1.03,1105,1.03,1106,1.03,1107,1.03,1108,1.03,1109,1.03,1110,1.837,1111,3.463,1112,1.03,1113,1.837,1114,1.03,1115,1.837,1116,1.03,1117,1.837,1118,1.03,1119,1.837,1120,1.03,1121,1.837,1122,1.03,1123,1.837,1124,1.03,1125,1.03,1126,1.03,1127,1.837,1128,1.03,1129,1.837,1130,1.03,1131,1.837,1132,1.03,1133,1.837,1134,1.03,1135,1.03,1136,1.837,1137,2.485,1138,2.485,1139,1.03,1140,1.837,1141,1.03,1142,1.03,1143,1.03,1144,2.485,1145,1.03,1146,1.03,1147,1.03,1148,1.837,1149,1.03,1150,1.03,1151,1.03,1152,1.03,1153,1.837,1154,1.837,1155,1.03,1156,1.03,1157,1.03,1158,1.03,1159,1.03,1160,1.03,1161,1.03,1162,1.03,1163,1.03,1164,4.448,1165,4.913,1166,4.913,1167,1.837,1168,1.837,1169,1.03,1170,1.03,1171,1.03,1172,1.03,1173,1.03,1174,1.03,1175,1.03,1176,4.913,1177,1.03,1178,1.03,1179,1.03,1180,2.485,1181,1.03,1182,1.03,1183,2.485,1184,3.841,1185,3.018,1186,3.018,1187,3.018,1188,3.018,1189,2.485,1190,1.837,1191,2.155,1192,1.03,1193,1.03,1194,1.03,1195,1.837,1196,1.03,1197,1.03,1198,1.837,1199,1.837,1200,1.03,1201,1.03,1202,1.837,1203,1.837,1204,1.432,1205,1.03,1206,1.837,1207,1.837,1208,1.03,1209,1.837,1210,1.03,1211,1.03,1212,1.837,1213,1.03,1214,1.03,1215,1.03]],["title/injectables/PrismaService.html",[102,0.948,225,1.466]],["body/injectables/PrismaService.html",[3,0.162,4,0.162,5,0.083,7,0.655,8,1.676,11,0.015,13,1.04,15,1.265,17,0.49,18,0.887,23,0.162,24,0.264,31,0.011,32,0.011,102,1.492,103,2.062,109,2.65,156,1.973,204,2.628,205,3.188,212,2.308,225,2.308,243,3.925,261,2.628,269,1.811,353,2.751,354,1.812,355,3.567,752,3.188,753,3.188,1216,4.176,1217,7.345,1218,7.509,1219,4.816,1220,6.137,1221,4.816,1222,4.816]],["title/classes/Room.html",[24,0.214,502,2.411]],["body/classes/Room.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,502,4.385,1223,5.294]],["title/controllers/RoomController.html",[0,1.297,1224,2.784]],["body/controllers/RoomController.html",[0,1.133,2,1.133,3,0.115,4,0.115,5,0.059,7,0.464,8,1.327,10,2.446,11,0.015,13,1.149,15,1.782,16,1.38,17,0.452,18,0.627,23,0.115,24,0.187,25,1.682,26,1.089,28,1.926,31,0.009,32,0.009,107,1.869,118,1.926,119,1.466,120,1.055,121,1.585,122,2.47,138,2.665,187,1.869,284,1.869,375,2.665,376,2.398,378,2.398,379,2.398,380,2.955,383,3.215,384,1.682,385,3.469,390,1.682,391,3.469,393,1.869,397,2.433,398,2.107,399,1.682,409,2.955,413,2.433,415,2.656,417,2.433,472,2.942,480,1.752,909,2.255,910,4.146,1042,2.656,1224,3.469,1225,2.955,1226,3.408,1227,4.212,1228,4.908,1229,4.857,1230,3.408,1231,3.408,1232,4.857,1233,3.408,1234,3.408,1235,2.955,1236,5.35,1237,4.857,1238,3.408,1239,4.212,1240,3.408,1241,4.857,1242,3.408,1243,2.656,1244,3.408,1245,3.408,1246,2.955,1247,3.408,1248,3.408,1249,3.408,1250,3.408,1251,3.408,1252,3.408,1253,3.408]],["title/classes/RoomGateway.html",[24,0.214,1254,2.784]],["body/classes/RoomGateway.html",[3,0.101,4,0.101,5,0.052,7,0.408,8,1.209,10,2.34,11,0.015,13,1.137,15,1.629,16,1.185,17,0.518,23,0.101,24,0.165,25,1.48,26,0.958,28,1.65,31,0.008,32,0.008,109,2.064,118,1.842,119,1.402,120,1.044,121,1.517,122,2.012,123,1.742,151,1.284,156,1.228,200,1.176,354,1.307,362,2.359,370,0.674,376,2.185,378,2.185,379,2.185,384,1.48,389,1.854,390,1.48,399,1.48,443,5.625,447,4.563,454,3.838,455,2.599,456,3.838,457,2.337,458,2.337,460,2.599,461,2.599,462,2.599,463,2.599,464,2.599,465,4.563,466,5.625,467,5.818,472,3.371,496,2.93,502,4.349,534,3.058,851,3.161,852,2.599,900,3.846,909,2.93,910,3.9,1243,2.337,1246,2.599,1254,3.161,1255,2.599,1256,4.563,1257,5.262,1258,2.998,1259,2.998,1260,2.998,1261,4.426,1262,4.426,1263,2.998,1264,2.998,1265,4.426,1266,2.998,1267,5.262,1268,2.998,1269,4.426,1270,2.998,1271,4.426,1272,2.998,1273,2.998,1274,4.426,1275,2.998,1276,2.998,1277,2.998,1278,2.998,1279,4.426,1280,2.998,1281,2.998,1282,2.998,1283,4.426,1284,5.262,1285,4.426,1286,2.998,1287,2.998,1288,2.998,1289,2.998,1290,2.998,1291,2.998]],["title/modules/RoomModule.html",[33,1.297,51,2.581]],["body/modules/RoomModule.html",[2,2.01,3,0.158,4,0.158,5,0.081,11,0.015,17,0.596,18,0.866,23,0.158,24,0.258,31,0.011,32,0.011,33,2.221,35,2.108,36,2.108,37,2.321,38,2.321,39,2.108,40,3.297,41,2.321,51,5.183,53,2.983,54,2.321,55,2.21,148,2.806,149,2.58,225,2.806,229,3.358,472,3.878,1224,4.769,1243,3.666,1254,4.316,1292,4.703,1293,4.703,1294,4.703,1295,4.703,1296,4.703]],["title/injectables/RoomService.html",[102,0.948,472,2.026]],["body/injectables/RoomService.html",[3,0.07,4,0.07,5,0.036,7,0.282,8,0.909,11,0.015,13,1.095,15,1.604,16,1.33,17,0.418,18,0.381,23,0.07,24,0.114,26,1.672,28,1.836,31,0.006,32,0.006,102,0.809,103,0.887,109,2.752,118,1.789,119,1.362,120,0.98,121,1.473,122,2.181,123,1.204,148,2.208,151,1.425,152,2.459,156,2.501,185,2.869,200,2.303,204,2.24,211,1.934,212,1.796,213,1.281,219,1.204,225,1.796,243,1.934,253,1.492,261,2.697,266,1.796,269,0.779,300,1.643,313,2.979,354,0.983,362,1.87,374,3.617,376,1.643,378,1.643,379,1.643,384,1.643,390,1.643,399,1.023,472,1.73,476,1.137,480,1.201,482,1.48,485,1.371,498,1.796,500,3.617,502,3.997,509,2.377,513,1.796,514,1.796,518,1.796,520,3.723,525,1.796,527,1.371,529,1.371,534,3.548,606,4.576,609,3.698,716,1.615,730,3.723,752,1.371,753,1.371,755,1.48,767,2.761,771,2.979,805,2.377,903,1.615,909,1.371,910,3.548,1028,2.761,1066,2.761,1067,3.252,1204,2.594,1227,2.886,1228,3.617,1235,1.796,1236,4.141,1239,3.617,1256,3.617,1297,1.796,1298,3.328,1299,3.328,1300,3.328,1301,2.072,1302,3.328,1303,2.072,1304,3.328,1305,2.072,1306,2.072,1307,2.072,1308,2.072,1309,2.072,1310,2.072,1311,3.328,1312,2.072,1313,3.328,1314,2.072,1315,2.072,1316,2.072,1317,2.072,1318,2.072,1319,2.072,1320,2.072,1321,2.072,1322,2.072,1323,2.072,1324,2.072,1325,3.328,1326,2.072,1327,4.171,1328,2.072,1329,4.171,1330,2.072,1331,2.072]],["title/classes/SignInDto.html",[24,0.214,132,2.411]],["body/classes/SignInDto.html",[3,0.161,4,0.161,5,0.083,7,0.651,11,0.015,13,1.036,16,1.421,17,0.382,23,0.227,24,0.336,31,0.011,32,0.011,119,1.035,120,0.951,132,3.781,196,2.626,198,2.961,253,3.181,261,2.618,262,2.961,268,2.961,269,1.8,287,3.419,351,4.809,352,3.419,353,2.146,354,1.805,355,3.914,356,3.732,357,3.732,358,3.732,359,3.732,360,3.419,361,3.732,362,3.019,363,3.732,364,3.732,365,3.732,366,3.732,367,3.732,368,3.732,370,1.076,1332,4.787,1333,4.787]],["title/classes/UpdateChatDto.html",[24,0.214,394,2.581]],["body/classes/UpdateChatDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.063,370,1.289,394,4.523,400,4.094,450,3.545,480,2.068,532,4.469,714,2.979,907,3.332,908,3.145,1334,4.971,1335,6.833]],["title/classes/UpdateFileDto.html",[24,0.214,663,2.581]],["body/classes/UpdateFileDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.063,370,1.289,480,2.068,565,4.094,567,4.469,663,4.523,675,4.469,714,2.979,907,3.332,908,3.145,1336,4.971,1337,6.833]],["title/classes/UpdateHealthDto.html",[24,0.214,1338,3.039]],["body/classes/UpdateHealthDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.063,370,1.289,480,2.068,575,3.795,577,4.469,714,2.979,898,4.971,907,3.332,908,3.145,1338,5.326,1339,4.971,1340,6.833]],["title/classes/UpdateNotificationDto.html",[24,0.214,957,2.581]],["body/classes/UpdateNotificationDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.063,370,1.289,480,2.068,578,3.545,580,4.469,714,2.979,907,3.332,908,3.145,957,4.523,961,4.469,1341,4.971,1342,6.833]],["title/classes/UpdatePostDto.html",[24,0.214,1343,3.039]],["body/classes/UpdatePostDto.html",[3,0.149,4,0.149,5,0.076,7,0.601,10,2.647,11,0.015,13,1.243,16,1.216,17,0.353,23,0.149,24,0.243,31,0.011,32,0.011,120,1.194,121,1.811,204,2.485,329,3.183,353,2.601,354,1.714,370,0.993,423,2.731,480,1.593,536,3.84,548,4.143,559,3.154,581,4.746,583,3.443,584,4.143,585,4.523,586,5.031,587,3.829,588,3.829,590,5.031,595,3.443,1046,3.443,1343,4.523,1344,3.829,1345,7.337,1346,4.416,1347,4.416,1348,4.416,1349,4.416,1350,4.416,1351,4.416]],["title/classes/UpdateRoomDto.html",[24,0.214,910,2.266]],["body/classes/UpdateRoomDto.html",[3,0.185,4,0.185,5,0.095,11,0.015,16,1.174,17,0.531,23,0.224,24,0.365,31,0.012,32,0.012,353,3.209,370,1.232,480,1.976,485,3.625,534,3.183,603,3.387,605,3.625,609,3.625,714,2.846,900,3.625,901,4.269,902,6.206,903,4.269,907,3.183,908,3.005,909,3.625,910,3.864]],["title/classes/UpdateUserDto.html",[24,0.214,1352,2.784]],["body/classes/UpdateUserDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,279,4.094,353,3.063,370,1.289,480,2.068,545,4.094,563,3.332,714,2.979,907,3.332,908,3.145,1352,4.879,1353,4.971,1354,6.833]],["title/controllers/UserController.html",[0,1.297,1355,2.784]],["body/controllers/UserController.html",[0,0.999,2,0.999,3,0.101,4,0.101,5,0.052,7,0.409,8,1.211,10,2.238,11,0.015,13,1.051,15,1.63,16,1.297,17,0.495,18,0.553,21,2.432,23,0.101,24,0.165,25,1.483,26,0.96,28,1.762,31,0.008,32,0.008,107,1.648,109,2.959,118,1.762,119,1.403,120,0.965,121,1.45,122,2.386,138,2.89,139,1.858,148,1.981,171,2.604,185,3.363,199,1.648,261,2.256,269,1.129,279,2.145,284,1.648,300,2.871,316,2.604,362,2.91,398,1.858,410,2.145,459,1.561,563,3.38,771,2.145,849,2.604,987,3.455,1012,2.604,1013,3.843,1020,3.843,1022,3.843,1024,3.843,1027,4.153,1028,3.85,1041,2.604,1042,2.341,1053,3.843,1064,2.604,1065,2.604,1066,1.988,1067,2.341,1068,2.604,1069,2.604,1072,2.604,1081,2.604,1355,3.165,1356,2.604,1357,5.268,1358,4.432,1359,5.268,1360,4.568,1361,3.004,1362,3.004,1363,3.004,1364,6.203,1365,3.004,1366,3.004,1367,3.004,1368,3.004,1369,3.004,1370,4.432,1371,3.004,1372,5.268,1373,4.432,1374,3.004,1375,2.604,1376,3.004,1377,3.004,1378,3.004,1379,3.004,1380,3.004,1381,3.004,1382,3.004,1383,4.432,1384,3.004]],["title/modules/UserModule.html",[33,1.297,52,2.411]],["body/modules/UserModule.html",[2,2.085,3,0.168,4,0.168,5,0.086,11,0.015,17,0.575,18,0.917,23,0.168,24,0.274,31,0.012,32,0.012,33,2.282,35,2.233,36,2.233,37,2.459,38,2.459,39,2.233,40,3.387,41,2.459,52,4.81,53,3.095,54,2.459,55,2.341,148,2.848,225,2.848,476,2.733,1355,4.899,1375,4.319,1385,4.981,1386,4.981,1387,4.981,1388,4.981]],["title/classes/UserRoomKey.html",[24,0.214,608,2.784]],["body/classes/UserRoomKey.html",[3,0.169,4,0.169,5,0.087,7,0.682,11,0.015,13,1.223,16,1.376,17,0.4,23,0.212,24,0.346,31,0.012,32,0.012,120,1.123,122,2.382,261,2.695,269,1.885,354,1.859,370,1.127,534,3.999,603,3.1,604,5.795,605,3.318,606,3.907,608,4.495,609,4.554,610,5.965,904,4.346,906,4.346,1389,5.013,1390,5.013]],["title/injectables/UserService.html",[102,0.948,148,1.466]],["body/injectables/UserService.html",[3,0.094,4,0.094,5,0.048,7,0.381,8,1.149,11,0.015,13,1.112,15,1.662,16,0.892,17,0.505,18,0.515,23,0.094,24,0.154,25,1.381,26,0.894,28,1.796,31,0.008,32,0.008,99,2.426,102,1.022,103,1.198,109,2.982,118,1.863,119,1.418,120,1.111,121,1.534,122,0.969,148,1.581,151,1.198,156,1.723,185,3.401,199,1.535,200,2.481,211,1.626,212,1.052,225,2.112,243,2.936,253,1.254,261,2.405,263,3.646,267,3.278,269,1.052,277,3.473,279,3.003,296,2.426,300,3.238,302,2.426,308,1.852,355,1.626,362,1.885,399,1.381,423,3.473,459,1.454,476,1.535,482,1.998,563,3.264,755,1.998,805,1.998,1027,3.607,1028,3.343,1034,4.378,1066,3.343,1191,4.38,1204,2.181,1352,3.003,1360,3.646,1391,2.426,1392,4.205,1393,4.205,1394,4.205,1395,4.205,1396,4.205,1397,2.798,1398,4.205,1399,2.798,1400,4.205,1401,2.798,1402,4.205,1403,4.205,1404,6.021,1405,2.798,1406,4.205,1407,2.798,1408,6.021,1409,4.205,1410,2.798,1411,4.205,1412,2.798,1413,4.205,1414,2.798,1415,2.798,1416,2.798,1417,2.798,1418,2.798,1419,2.798,1420,4.205,1421,2.798,1422,2.798]],["title/coverage.html",[1423,4.627]],["body/coverage.html",[0,2.179,1,1.67,5,0.063,6,2.028,11,0.015,19,1.447,21,1.283,24,0.425,31,0.007,32,0.007,39,1.049,72,1.447,73,1.67,102,1.688,104,2.028,105,1.67,106,2.028,120,0.364,132,1.447,143,1.447,148,0.88,172,1.823,174,3.651,192,1.447,196,2.01,197,1.67,201,1.67,212,0.88,225,0.88,236,2.028,262,1.447,268,1.447,277,1.447,278,2.617,327,1.67,351,3.226,352,3.226,369,1.548,371,2.028,372,1.67,373,2.028,394,1.548,402,1.359,407,1.447,419,2.028,434,1.823,435,2.028,441,1.67,442,2.028,450,1.447,472,1.216,478,2.028,502,1.447,531,2.028,532,2.856,545,3.226,563,1.359,565,1.67,566,2.028,567,2.856,575,1.548,576,2.028,577,2.856,578,1.447,579,2.028,580,2.856,581,1.447,582,2.028,583,2.856,603,1.447,604,2.856,605,3.384,608,1.67,619,1.823,620,2.028,656,2.028,657,1.67,658,3.985,663,1.548,673,1.283,680,1.823,682,1.823,690,1.67,729,2.028,823,1.548,824,2.028,825,1.67,826,2.028,850,1.823,851,1.67,884,1.548,891,2.028,900,1.548,901,2.856,910,1.359,911,2.028,936,5.811,943,1.548,944,2.028,945,1.67,946,2.028,957,1.548,959,1.447,973,2.028,979,1.67,980,2.028,1043,1.447,1088,2.028,1216,2.028,1223,2.028,1224,1.67,1225,2.028,1254,1.67,1255,2.028,1297,2.028,1334,2.028,1336,2.028,1338,1.823,1339,2.028,1341,2.028,1343,1.823,1344,2.028,1352,1.67,1353,2.028,1355,1.67,1356,2.028,1391,2.028,1423,2.028,1424,2.339,1425,2.339,1426,2.339,1427,5.113,1428,5.552,1429,7.755,1430,6.155,1431,4.517,1432,6.551,1433,4.517,1434,2.028,1435,2.339,1436,4.517,1437,4.59,1438,5.889,1439,2.028,1440,2.028,1441,2.028,1442,2.028,1443,2.028,1444,2.339,1445,2.028,1446,5.552,1447,2.339,1448,2.339,1449,4.517,1450,2.339,1451,3.177,1452,2.339,1453,2.339]],["title/dependencies.html",[36,2.104,1454,2.817]],["body/dependencies.html",[11,0.015,18,0.863,24,0.331,31,0.011,32,0.011,36,2.102,59,4.065,61,4.065,67,4.065,68,5.23,71,4.065,76,4.702,77,2.9,81,3.348,84,3.348,85,3.348,191,3.104,267,3.655,269,1.763,457,3.655,458,3.655,562,3.348,678,4.065,714,2.437,848,3.655,890,4.065,908,2.572,921,4.065,1455,4.689,1456,4.689,1457,6.032,1458,4.689,1459,4.689,1460,4.689,1461,4.689,1462,6.032,1463,4.689,1464,4.689,1465,4.689,1466,4.689,1467,4.689,1468,4.689,1469,4.689,1470,4.689,1471,4.689,1472,4.689,1473,4.689,1474,4.689,1475,4.689,1476,4.689,1477,4.689,1478,4.689,1479,4.689,1480,4.689,1481,4.689,1482,4.689,1483,4.689,1484,4.689,1485,4.689,1486,4.689]],["title/miscellaneous/functions.html",[1487,2.32,1488,4.07]],["body/miscellaneous/functions.html",[5,0.126,7,0.697,11,0.015,15,1.347,31,0.012,32,0.012,39,3.115,118,2.125,119,1.618,120,0.797,121,1.75,185,2.409,666,4.975,669,3.66,680,4.975,719,4.444,1437,3.995,1439,5.534,1440,5.534,1441,5.534,1442,5.534,1445,4.444,1487,3.66,1488,4.444,1489,5.125,1490,6.488,1491,5.125,1492,5.125,1493,5.125,1494,5.125]],["title/index.html",[7,0.442,1495,3.248,1496,3.248]],["body/index.html",[11,0.013,29,5.314,31,0.013,32,0.013,480,2.211,862,5.314,867,5.314,870,5.314,1497,6.129,1498,6.129,1499,6.129,1500,6.129]],["title/modules.html",[35,2.392]],["body/modules.html",[11,0.012,31,0.012,32,0.012,34,3.832,35,2.406,45,3.552,46,3.552,47,3.552,48,3.552,49,3.552,50,3.552,51,3.552,52,3.319,1501,7.947,1502,7.947,1503,7.947,1504,7.947]],["title/overview.html",[1505,4.627]],["body/overview.html",[2,1.173,11,0.015,19,3.568,31,0.009,32,0.009,33,1.173,34,5.644,35,1.582,36,1.582,37,1.742,38,1.742,39,1.582,40,1.742,41,1.742,42,3.059,43,3.059,44,3.059,45,4.966,46,4.966,47,4.845,48,4.374,49,4.374,50,4.966,51,4.845,52,4.452,53,2.458,54,1.742,55,1.658,103,1.511,143,3.568,148,2.707,172,2.75,222,3.059,224,3.059,225,2.707,350,2.75,370,0.793,402,3.353,470,3.059,471,3.059,472,3.257,673,3.438,725,3.059,726,3.059,767,2.335,778,3.059,882,3.059,883,3.059,884,3.819,959,3.568,969,3.059,970,3.059,1043,3.568,1083,3.059,1084,3.059,1505,3.059,1506,4.979,1507,3.528,1508,3.528]],["title/properties.html",[354,1.386,1454,2.817]],["body/properties.html",[11,0.015,31,0.013,32,0.013,354,1.796,420,4.741,1070,4.741,1509,6.082,1510,6.082,1511,6.082,1512,6.082]],["title/miscellaneous/variables.html",[1487,2.32,1513,4.07]],["body/miscellaneous/variables.html",[5,0.073,7,0.572,11,0.015,16,0.743,21,3.082,31,0.01,32,0.01,119,1.215,120,0.874,174,3.004,192,3.474,200,2.482,201,4.012,202,3.279,203,3.279,204,1.802,212,1.582,216,3.719,274,3.004,327,4.517,328,3.279,329,2.308,383,2.785,568,3.004,649,3.648,658,3.279,677,3.648,682,4.379,683,3.648,684,3.648,685,3.648,686,3.648,687,3.648,688,3.648,689,3.648,690,4.012,691,3.648,692,3.648,693,3.648,694,3.648,695,3.648,696,3.648,697,3.648,698,3.648,699,3.648,700,3.648,701,3.648,702,3.648,752,5.032,753,5.032,850,4.379,851,4.012,1434,3.648,1437,3.279,1443,4.871,1451,3.648,1487,3.004,1490,3.648,1513,3.648,1514,6.326,1515,5.618,1516,5.618,1517,4.207,1518,4.207,1519,4.207,1520,4.207,1521,4.207,1522,4.207]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":936,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1510,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1483,"title":{},"body":{"dependencies.html":{}}}],["0.33.5",{"_index":1486,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":878,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1429,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1450,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1444,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1447,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1448,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1430,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1446,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1449,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":767,"title":{},"body":{"injectables/FileService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"overview.html":{}}}],["1.4.5",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["1.7.5",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["10.4.4",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["10.4.6",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":706,"title":{},"body":{"controllers/FileController.html":{},"controllers/HealthController.html":{}}}],["11pm",{"_index":763,"title":{},"body":{"injectables/FileService.html":{}}}],["12",{"_index":1507,"title":{},"body":{"overview.html":{}}}],["150",{"_index":881,"title":{},"body":{"controllers/HealthController.html":{}}}],["16).tostring(16",{"_index":700,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":778,"title":{},"body":{"injectables/FileService.html":{},"overview.html":{}}}],["2.0.4",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":707,"title":{},"body":{"controllers/FileController.html":{}}}],["200",{"_index":873,"title":{},"body":{"controllers/HealthController.html":{}}}],["20mb",{"_index":708,"title":{},"body":{"controllers/FileController.html":{}}}],["28",{"_index":1508,"title":{},"body":{"overview.html":{}}}],["3.0.3",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":709,"title":{},"body":{"controllers/FileController.html":{}}}],["4.1.1",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["5.22.0",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["5.7.6",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":636,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["6.2.1",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["6000",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["60s",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.1.0",{"_index":1478,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1484,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1506,"title":{},"body":{"overview.html":{}}}],["9\\s]/g",{"_index":1077,"title":{},"body":{"controllers/PostController.html":{}}}],["access_token",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["account",{"_index":1500,"title":{},"body":{"index.html":{}}}],["action",{"_index":527,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{},"injectables/RoomService.html":{}}}],["adds",{"_index":899,"title":{},"body":{"injectables/HealthService.html":{},"injectables/NotificationService.html":{}}}],["allow",{"_index":550,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["allow()@isstring",{"_index":548,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["allow()@isstring({each",{"_index":590,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["allow()@validatenested({each",{"_index":587,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["allowed",{"_index":713,"title":{},"body":{"controllers/FileController.html":{}}}],["allowedmimetypes",{"_index":682,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["allowedmimetypes.has(file.mimetype",{"_index":711,"title":{},"body":{"controllers/FileController.html":{}}}],["anyfilesinterceptor",{"_index":676,"title":{},"body":{"controllers/FileController.html":{}}}],["api",{"_index":862,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["api_base_url",{"_index":850,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["app.interceptor",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":19,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":626,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":666,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"miscellaneous/functions.html":{}}}],["array(32",{"_index":696,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["array.from",{"_index":715,"title":{},"body":{"controllers/FileController.html":{}}}],["arraybuffer",{"_index":485,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["arraybuffertobase64",{"_index":479,"title":{},"body":{"injectables/ChatService.html":{}}}],["arraybuffertobase64(message",{"_index":484,"title":{},"body":{"injectables/ChatService.html":{}}}],["arraynotempty",{"_index":600,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":358,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["audio/mp3",{"_index":689,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["audio/mpeg",{"_index":688,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.service",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":105,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":72,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1070,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"properties.html":{}}}],["authservice",{"_index":143,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":268,"title":{"interfaces/AuthUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["await",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["azp",{"_index":357,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["badrequestexception",{"_index":672,"title":{},"body":{"controllers/FileController.html":{}}}],["banner",{"_index":546,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["bcrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(d.password",{"_index":1419,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["bio",{"_index":547,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["bookmark/:id",{"_index":1001,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkcount",{"_index":1211,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkedby",{"_index":1165,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkedbyme",{"_index":1188,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkpost",{"_index":982,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["bookmarkpost(id",{"_index":995,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkpost(postid",{"_index":1101,"title":{},"body":{"injectables/PostService.html":{}}}],["boolean",{"_index":360,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bree",{"_index":867,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["browse",{"_index":1504,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1501,"title":{},"body":{"modules.html":{}}}],["buffer.from(message).tostring('base64",{"_index":524,"title":{},"body":{"injectables/ChatService.html":{}}}],["bytes",{"_index":938,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["c",{"_index":1144,"title":{},"body":{"injectables/PostService.html":{}}}],["c.media",{"_index":1160,"title":{},"body":{"injectables/PostService.html":{}}}],["c.mediatypes",{"_index":1161,"title":{},"body":{"injectables/PostService.html":{}}}],["c.text",{"_index":1159,"title":{},"body":{"injectables/PostService.html":{}}}],["cache",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["cachemodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["callhandler",{"_index":915,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["canactivate(context",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["catch",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["catch(exception",{"_index":623,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["cb",{"_index":691,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["cb(null",{"_index":701,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["chat",{"_index":369,"title":{"classes/Chat.html":{}},"body":{"classes/Chat.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"coverage.html":{}}}],["chat.controller",{"_index":475,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.created",{"_index":522,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.dto",{"_index":400,"title":{},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/UpdateChatDto.html":{}}}],["chat.dto.ts",{"_index":532,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["chat.dto.ts:2",{"_index":543,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:3",{"_index":538,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:4",{"_index":539,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:5",{"_index":544,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:6",{"_index":537,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:7",{"_index":541,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:8",{"_index":542,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:9",{"_index":540,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.gateway",{"_index":474,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":403,"title":{},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["chatcontroller",{"_index":372,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatcreatedevent",{"_index":407,"title":{"classes/ChatCreatedEvent.html":{}},"body":{"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"coverage.html":{}}}],["chatcreatedlistener",{"_index":434,"title":{"injectables/ChatCreatedListener.html":{}},"body":{"injectables/ChatCreatedListener.html":{},"coverage.html":{}}}],["chatdata",{"_index":453,"title":{},"body":{"classes/ChatGateway.html":{}}}],["chatgateway",{"_index":441,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":46,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chats",{"_index":374,"title":{},"body":{"controllers/ChatController.html":{},"injectables/RoomService.html":{}}}],["chatservice",{"_index":402,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":827,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkbookmarkedbyuser",{"_index":983,"title":{},"body":{"controllers/PostController.html":{}}}],["checkbookmarkedbyuser(id",{"_index":998,"title":{},"body":{"controllers/PostController.html":{}}}],["checkfrontend",{"_index":828,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkhealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["checkifuserbookmarkedpost",{"_index":1089,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserbookmarkedpost(postid",{"_index":1104,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserlikedpost",{"_index":1090,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserlikedpost(postid",{"_index":1106,"title":{},"body":{"injectables/PostService.html":{}}}],["checklikedbyuser",{"_index":984,"title":{},"body":{"controllers/PostController.html":{}}}],["checklikedbyuser(id",{"_index":1003,"title":{},"body":{"controllers/PostController.html":{}}}],["class",{"_index":24,"title":{"classes/Chat.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"classes/JoinRoomDto.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRoomKey.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":370,"title":{},"body":{"classes/Chat.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"classes/JoinRoomDto.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRoomKey.html":{},"overview.html":{}}}],["cleanedquery",{"_index":1073,"title":{},"body":{"controllers/PostController.html":{}}}],["cleanedquery.split",{"_index":1078,"title":{},"body":{"controllers/PostController.html":{}}}],["client",{"_index":466,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["client.id",{"_index":1284,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client.join(roomdata.roomid",{"_index":1281,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client.leave(roomid",{"_index":1287,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client_id",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["clone",{"_index":1134,"title":{},"body":{"injectables/PostService.html":{}}}],["clone.length",{"_index":1171,"title":{},"body":{"injectables/PostService.html":{}}}],["clone.map(async",{"_index":1172,"title":{},"body":{"injectables/PostService.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":470,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":471,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":725,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":726,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":882,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_providers",{"_index":883,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":969,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":970,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1083,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":1084,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":1292,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_providers",{"_index":1293,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_usermodule",{"_index":1385,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1386,"title":{},"body":{"modules/UserModule.html":{}}}],["commentcount",{"_index":1181,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":1190,"title":{},"body":{"injectables/PostService.html":{}}}],["compressaudio",{"_index":1439,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressaudio(file",{"_index":1491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compressedfiles",{"_index":718,"title":{},"body":{"controllers/FileController.html":{}}}],["compressfile",{"_index":1440,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressfile(file",{"_index":1492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compressfiles",{"_index":680,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressfiles(files",{"_index":719,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["compressimage",{"_index":1441,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressimage(file",{"_index":1493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compression",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["compressvideo",{"_index":1442,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressvideo(file",{"_index":1494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":509,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["connectedsocket",{"_index":465,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["console.error('error",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/PostService.html":{}}}],["console.error(`error",{"_index":784,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log('search",{"_index":1381,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`file",{"_index":775,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log(`user",{"_index":1285,"title":{},"body":{"classes/RoomGateway.html":{}}}],["console.log(event",{"_index":440,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["console.log(postdata",{"_index":1051,"title":{},"body":{"controllers/PostController.html":{}}}],["const",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["constructor",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(chatservice",{"_index":445,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(data",{"_index":422,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["constructor(jwtservice",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prisma",{"_index":482,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(roomservice",{"_index":1258,"title":{},"body":{"classes/RoomGateway.html":{}}}],["constructor(userservice",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["contains",{"_index":1383,"title":{},"body":{"controllers/UserController.html":{}}}],["content",{"_index":602,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["contents",{"_index":1142,"title":{},"body":{"injectables/PostService.html":{}}}],["contents[index].type",{"_index":1150,"title":{},"body":{"injectables/PostService.html":{}}}],["contents[index].url",{"_index":1149,"title":{},"body":{"injectables/PostService.html":{}}}],["context",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["context.getclass",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["context.gethandler",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["context.switchtohttp().getrequest",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('chats",{"_index":404,"title":{},"body":{"controllers/ChatController.html":{}}}],["controller('file",{"_index":703,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":853,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('notification",{"_index":962,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('posts",{"_index":1047,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('rooms",{"_index":1244,"title":{},"body":{"controllers/RoomController.html":{}}}],["controller('user",{"_index":1377,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cors",{"_index":460,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["coverage",{"_index":1423,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":480,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["create(@body",{"_index":963,"title":{},"body":{"controllers/NotificationController.html":{}}}],["create(createhealthdto",{"_index":892,"title":{},"body":{"injectables/HealthService.html":{}}}],["create(createnotificationdto",{"_index":948,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["create(files",{"_index":736,"title":{},"body":{"injectables/FileService.html":{}}}],["create(new_chat",{"_index":487,"title":{},"body":{"injectables/ChatService.html":{}}}],["create(sender",{"_index":1300,"title":{},"body":{"injectables/RoomService.html":{}}}],["createchat",{"_index":444,"title":{},"body":{"classes/ChatGateway.html":{}}}],["createchat(chatdata",{"_index":449,"title":{},"body":{"classes/ChatGateway.html":{}}}],["createchatdto",{"_index":450,"title":{"classes/CreateChatDto.html":{}},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["created_chat",{"_index":506,"title":{},"body":{"injectables/ChatService.html":{}}}],["createdat",{"_index":771,"title":{},"body":{"injectables/FileService.html":{},"controllers/PostController.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{}}}],["createdata",{"_index":1154,"title":{},"body":{"injectables/PostService.html":{}}}],["createdraft",{"_index":985,"title":{},"body":{"controllers/PostController.html":{}}}],["createdraft(req",{"_index":1006,"title":{},"body":{"controllers/PostController.html":{}}}],["createfeduser",{"_index":1392,"title":{},"body":{"injectables/UserService.html":{}}}],["createfeduser(data",{"_index":1398,"title":{},"body":{"injectables/UserService.html":{}}}],["createfeduserdto",{"_index":277,"title":{"classes/CreateFedUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createfiledto",{"_index":565,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["createhealthdto",{"_index":575,"title":{"classes/CreateHealthDto.html":{}},"body":{"classes/CreateHealthDto.html":{},"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["createimgpath",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["createmany",{"_index":1158,"title":{},"body":{"injectables/PostService.html":{}}}],["createnotificationdto",{"_index":578,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createpost",{"_index":986,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(data",{"_index":1108,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(req",{"_index":1010,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":581,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostdto:12",{"_index":1350,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:16",{"_index":1347,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:20",{"_index":1348,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:24",{"_index":1349,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:30",{"_index":1346,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:36",{"_index":1351,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createroomdto",{"_index":603,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["createuser",{"_index":1393,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(d",{"_index":1400,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":563,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["cron",{"_index":757,"title":{},"body":{"injectables/FileService.html":{},"controllers/NotificationController.html":{}}}],["cron(cronexpression.every_day_at_11pm",{"_index":746,"title":{},"body":{"injectables/FileService.html":{}}}],["cronexpression",{"_index":758,"title":{},"body":{"injectables/FileService.html":{}}}],["ctx",{"_index":631,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["ctx.getrequest",{"_index":634,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["ctx.getresponse",{"_index":633,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["currentuseremail",{"_index":1060,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["cursor",{"_index":1191,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["d",{"_index":1402,"title":{},"body":{"injectables/UserService.html":{}}}],["d.img",{"_index":1418,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.description",{"_index":431,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.fromuserid",{"_index":433,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.longpost",{"_index":1156,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content",{"_index":1147,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.length",{"_index":1157,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.map((c",{"_index":1148,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.map(async",{"_index":1143,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost?.content",{"_index":1135,"title":{},"body":{"injectables/PostService.html":{}}}],["data.media",{"_index":1133,"title":{},"body":{"injectables/PostService.html":{}}}],["data.mediatypes",{"_index":1141,"title":{},"body":{"injectables/PostService.html":{}}}],["data.name",{"_index":429,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.type",{"_index":1137,"title":{},"body":{"injectables/PostService.html":{}}}],["database",{"_index":779,"title":{},"body":{"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["databasecheck",{"_index":829,"title":{},"body":{"controllers/HealthController.html":{}}}],["date",{"_index":765,"title":{},"body":{"injectables/FileService.html":{}}}],["date().toisostring",{"_index":638,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["date.now",{"_index":925,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["day",{"_index":762,"title":{},"body":{"injectables/FileService.html":{}}}],["db",{"_index":855,"title":{},"body":{"controllers/HealthController.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{}}}],["default",{"_index":752,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["default_img",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":391,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["delete('post/:id",{"_index":1013,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":776,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefilesandrecords",{"_index":731,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefilesandrecords(files",{"_index":738,"title":{},"body":{"injectables/FileService.html":{}}}],["deletepost",{"_index":987,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{}}}],["deletepost(@param('id",{"_index":1081,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deletepost(id",{"_index":1012,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deletepost(where",{"_index":1110,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteuser",{"_index":1394,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":1403,"title":{},"body":{"injectables/UserService.html":{}}}],["deleting",{"_index":785,"title":{},"body":{"injectables/FileService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1067,"title":{},"body":{"controllers/PostController.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{}}}],["description",{"_index":420,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"properties.html":{}}}],["dest",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["destination",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["disconnect",{"_index":1207,"title":{},"body":{"injectables/PostService.html":{}}}],["disk",{"_index":856,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":846,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskstorage",{"_index":677,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["downloadimage",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["downloadimage(url",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["downloading",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["draft",{"_index":1008,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/create",{"_index":459,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/sign",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":399,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["each",{"_index":601,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"injectables/UserService.html":{}}}],["email)).status",{"_index":1206,"title":{},"body":{"injectables/PostService.html":{}}}],["email_verified",{"_index":359,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["emit",{"_index":530,"title":{},"body":{"injectables/ChatService.html":{}}}],["emitevent",{"_index":481,"title":{},"body":{"injectables/ChatService.html":{}}}],["emitter",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"dependencies.html":{}}}],["encryptedmessage",{"_index":515,"title":{},"body":{"injectables/ChatService.html":{}}}],["encryptionkey",{"_index":610,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["err",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{}}}],["error",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["error('failed",{"_index":1152,"title":{},"body":{"injectables/PostService.html":{}}}],["error.message",{"_index":1321,"title":{},"body":{"injectables/RoomService.html":{}}}],["error.stack",{"_index":1322,"title":{},"body":{"injectables/RoomService.html":{}}}],["europe/london",{"_index":955,"title":{},"body":{"controllers/NotificationController.html":{}}}],["event",{"_index":408,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{}}}],["eventemittermodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["events/chat.event",{"_index":439,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["exception",{"_index":628,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.getstatus",{"_index":635,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.message",{"_index":643,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.stack",{"_index":644,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptionfilter",{"_index":621,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptionsloggerfilter",{"_index":619,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["execpromise",{"_index":1443,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{}}}],["existingroom",{"_index":1329,"title":{},"body":{"injectables/RoomService.html":{}}}],["exp",{"_index":367,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["expiresin",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":935,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["extends",{"_index":353,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/JoinRoomDto.html":{},"injectables/PrismaService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":693,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["extname",{"_index":679,"title":{},"body":{"controllers/FileController.html":{}}}],["extname(file.originalname",{"_index":694,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["extracttokenfromheader",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["false",{"_index":716,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostController.html":{},"injectables/RoomService.html":{}}}],["family_name",{"_index":365,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["fieldname",{"_index":934,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["file",{"_index":5,"title":{"classes/File.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.close",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["file.controller",{"_index":728,"title":{},"body":{"modules/FileModule.html":{}}}],["file.dto",{"_index":675,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/UpdateFileDto.html":{}}}],["file.dto.ts",{"_index":567,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["file.dto.ts:2",{"_index":573,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:3",{"_index":571,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:4",{"_index":572,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:5",{"_index":574,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.filename",{"_index":789,"title":{},"body":{"injectables/FileService.html":{}}}],["file.id",{"_index":782,"title":{},"body":{"injectables/FileService.html":{}}}],["file.manager",{"_index":681,"title":{},"body":{"controllers/FileController.html":{}}}],["file.mimetype",{"_index":793,"title":{},"body":{"injectables/FileService.html":{}}}],["file.mimetype.split('/')[0",{"_index":795,"title":{},"body":{"injectables/FileService.html":{}}}],["file.on('finish",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["file.originalname",{"_index":791,"title":{},"body":{"injectables/FileService.html":{}}}],["file.originalname.split('.')[0",{"_index":692,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file.path",{"_index":777,"title":{},"body":{"injectables/FileService.html":{}}}],["file.service",{"_index":674,"title":{},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{}}}],["file.size",{"_index":794,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{}}}],["file.status",{"_index":808,"title":{},"body":{"injectables/FileService.html":{}}}],["file.type",{"_index":807,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["file.url",{"_index":806,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["file/file.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["file?.originalname",{"_index":937,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["filecontroller",{"_index":657,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"coverage.html":{}}}],["filefilter",{"_index":710,"title":{},"body":{"controllers/FileController.html":{}}}],["fileid",{"_index":801,"title":{},"body":{"injectables/FileService.html":{}}}],["fileids",{"_index":745,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["fileids.length",{"_index":1136,"title":{},"body":{"injectables/PostService.html":{}}}],["fileids.map(async",{"_index":800,"title":{},"body":{"injectables/FileService.html":{}}}],["filemodel",{"_index":756,"title":{},"body":{"injectables/FileService.html":{}}}],["filemodule",{"_index":47,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules.html":{},"overview.html":{}}}],["filename",{"_index":568,"title":{},"body":{"classes/CreateFileDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["files",{"_index":669,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["fileservice",{"_index":673,"title":{"injectables/FileService.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["filesize",{"_index":705,"title":{},"body":{"controllers/FileController.html":{}}}],["fill(null",{"_index":697,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":375,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{}}}],["findall(@request",{"_index":409,"title":{},"body":{"controllers/ChatController.html":{},"controllers/RoomController.html":{}}}],["findall(req",{"_index":380,"title":{},"body":{"controllers/ChatController.html":{},"controllers/RoomController.html":{}}}],["findall(to",{"_index":491,"title":{},"body":{"injectables/ChatService.html":{}}}],["findallwithparticipant",{"_index":1298,"title":{},"body":{"injectables/RoomService.html":{}}}],["findallwithparticipant(email",{"_index":1302,"title":{},"body":{"injectables/RoomService.html":{}}}],["findchatsinroom",{"_index":1227,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findchatsinroom(@param('id",{"_index":1250,"title":{},"body":{"controllers/RoomController.html":{}}}],["findchatsinroom(id",{"_index":1231,"title":{},"body":{"controllers/RoomController.html":{}}}],["findchatsinroom(roomid",{"_index":1304,"title":{},"body":{"injectables/RoomService.html":{}}}],["findone",{"_index":376,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["findone(@messagebody",{"_index":1277,"title":{},"body":{"classes/RoomGateway.html":{}}}],["findone(@param('id",{"_index":413,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["findone(id",{"_index":384,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["findparentpost",{"_index":1091,"title":{},"body":{"injectables/PostService.html":{}}}],["findparentpost(postid",{"_index":1113,"title":{},"body":{"injectables/PostService.html":{}}}],["findpost",{"_index":1092,"title":{},"body":{"injectables/PostService.html":{}}}],["findpost(postid",{"_index":1115,"title":{},"body":{"injectables/PostService.html":{}}}],["findroombyparticipantsorcreate",{"_index":1228,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findroombyparticipantsorcreate(user1id",{"_index":1235,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["finduser",{"_index":1395,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(usernameoremail",{"_index":1406,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":648,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["found",{"_index":805,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["fromuserid",{"_index":421,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["fs",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{}}}],["fs.appendfile('./error.log",{"_index":645,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["fs.createwritestream(filepath",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs.mkdirsync(destination",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{}}}],["fs.unlink(file.path",{"_index":774,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.unlink(filepath",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs/promises",{"_index":759,"title":{},"body":{"injectables/FileService.html":{}}}],["fun",{"_index":1497,"title":{},"body":{"index.html":{}}}],["function",{"_index":1438,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1488,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":1024,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["get('/all",{"_index":1229,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/chats/:id",{"_index":1232,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/comments/:id",{"_index":1016,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/find",{"_index":1237,"title":{},"body":{"controllers/RoomController.html":{}}}],["get(':id",{"_index":385,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["get('api",{"_index":859,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('db",{"_index":874,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('hello",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["get('memory",{"_index":879,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('profile",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('storage",{"_index":875,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('ui",{"_index":865,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('user/:id/posts",{"_index":1032,"title":{},"body":{"controllers/PostController.html":{}}}],["get('view/:id",{"_index":381,"title":{},"body":{"controllers/ChatController.html":{}}}],["get(url",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcommentsforpost",{"_index":988,"title":{},"body":{"controllers/PostController.html":{}}}],["getcommentsforpost(req",{"_index":1015,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilesurls",{"_index":732,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilesurls(fileids",{"_index":742,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilteredposts",{"_index":989,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilteredposts(req",{"_index":1018,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilteredusers",{"_index":1357,"title":{},"body":{"controllers/UserController.html":{}}}],["getfilteredusers(searchstring",{"_index":1362,"title":{},"body":{"controllers/UserController.html":{}}}],["getmultipleposts",{"_index":1093,"title":{},"body":{"injectables/PostService.html":{}}}],["getmultipleposts(params",{"_index":1117,"title":{},"body":{"injectables/PostService.html":{}}}],["getmultipleusers",{"_index":1396,"title":{},"body":{"injectables/UserService.html":{}}}],["getmultipleusers(params",{"_index":1409,"title":{},"body":{"injectables/UserService.html":{}}}],["getpostbookmarks",{"_index":1094,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbookmarks(postid",{"_index":1119,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyid",{"_index":990,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":1023,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments",{"_index":1095,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostcomments(postid",{"_index":1121,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostlikes",{"_index":1096,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostlikes(postid",{"_index":1123,"title":{},"body":{"injectables/PostService.html":{}}}],["getprofile",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@body('id",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["getpublishedposts",{"_index":991,"title":{},"body":{"controllers/PostController.html":{}}}],["getpublishedposts(req",{"_index":1026,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":1495,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":1358,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(@param('id",{"_index":1380,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":1365,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserposts",{"_index":992,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(params",{"_index":1031,"title":{},"body":{"controllers/PostController.html":{}}}],["given_name",{"_index":364,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["global",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["googleauthuser",{"_index":262,"title":{"classes/GoogleAuthUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["googlelogin",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin(@body('token",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin(token",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup(@body('token",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup(token",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard",{"_index":172,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":405,"title":{},"body":{"controllers/ChatController.html":{}}}],["handlechatcreatedevent",{"_index":436,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["handlechatcreatedevent(event",{"_index":437,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["handlecron",{"_index":733,"title":{},"body":{"injectables/FileService.html":{}}}],["handleordercreatedevent",{"_index":377,"title":{},"body":{"controllers/ChatController.html":{}}}],["health",{"_index":823,"title":{"classes/Health.html":{}},"body":{"classes/Health.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"coverage.html":{}}}],["health.controller",{"_index":887,"title":{},"body":{"modules/HealthModule.html":{}}}],["health.dto",{"_index":898,"title":{},"body":{"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{}}}],["health.dto.ts",{"_index":577,"title":{},"body":{"classes/CreateHealthDto.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["health.service",{"_index":886,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":844,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":842,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":825,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":48,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthservice",{"_index":884,"title":{"injectables/HealthService.html":{}},"body":{"modules/HealthModule.html":{},"injectables/HealthService.html":{},"coverage.html":{},"overview.html":{}}}],["hello",{"_index":864,"title":{},"body":{"controllers/HealthController.html":{}}}],["helmet",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":625,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["host.switchtohttp",{"_index":632,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["http",{"_index":854,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('login",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('login/google",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('logout",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('signup/google",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":624,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["httphealthindicator",{"_index":843,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":889,"title":{},"body":{"modules/HealthModule.html":{}}}],["https",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://localhost:4000",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["iat",{"_index":366,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["id",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreateRoomDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["image/jpeg",{"_index":684,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["image/png",{"_index":685,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["image/webp",{"_index":686,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["img",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["img_name",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["img_path",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ExceptionsLoggerFilter.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{}}}],["in.dto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["in.dto.ts",{"_index":352,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:10",{"_index":810,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:11",{"_index":809,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:12",{"_index":822,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:13",{"_index":811,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:14",{"_index":812,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:15",{"_index":820,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:16",{"_index":819,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:17",{"_index":821,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:18",{"_index":815,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:19",{"_index":814,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:20",{"_index":816,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:21",{"_index":813,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:22",{"_index":818,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:4",{"_index":1332,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:5",{"_index":1333,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:9",{"_index":817,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["include",{"_index":520,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["incoming",{"_index":930,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["incrementparentpostcommentcount",{"_index":1097,"title":{},"body":{"injectables/PostService.html":{}}}],["incrementparentpostcommentcount(postid",{"_index":1125,"title":{},"body":{"injectables/PostService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":1345,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["intercept",{"_index":912,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":913,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":196,"title":{"interfaces/AuthUser.html":{},"interfaces/JwtSubPayload.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"interfaces/JwtSubPayload.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":350,"title":{},"body":{"interfaces/AuthUser.html":{},"interfaces/JwtSubPayload.html":{},"overview.html":{}}}],["is_public_key",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":599,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":558,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":552,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":561,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["ispasswordvalid",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":356,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["isstring",{"_index":559,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":555,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["join(__dirname",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["join(destination",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["joined",{"_index":1283,"title":{},"body":{"classes/RoomGateway.html":{}}}],["joining",{"_index":1320,"title":{},"body":{"injectables/RoomService.html":{}}}],["joinroom",{"_index":1256,"title":{},"body":{"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["joinroom(roomdata",{"_index":1264,"title":{},"body":{"classes/RoomGateway.html":{}}}],["joinroom(roomid",{"_index":1308,"title":{},"body":{"injectables/RoomService.html":{}}}],["joinroomdto",{"_index":900,"title":{"classes/JoinRoomDto.html":{}},"body":{"classes/JoinRoomDto.html":{},"classes/RoomGateway.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["jpg",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(this.sanitizerequestbody(request.body",{"_index":642,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["jti",{"_index":368,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["jwtconstants",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["jwtmodule",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["jwtsubpayload",{"_index":197,"title":{"interfaces/JwtSubPayload.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{}}}],["leaveroom",{"_index":1257,"title":{},"body":{"classes/RoomGateway.html":{}}}],["leaveroom(roomid",{"_index":1268,"title":{},"body":{"classes/RoomGateway.html":{}}}],["left",{"_index":1288,"title":{},"body":{"classes/RoomGateway.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1079,"title":{},"body":{"controllers/PostController.html":{}}}],["license",{"_index":1511,"title":{},"body":{"properties.html":{}}}],["like/:id",{"_index":1004,"title":{},"body":{"controllers/PostController.html":{}}}],["likecount",{"_index":1208,"title":{},"body":{"injectables/PostService.html":{}}}],["likedby",{"_index":1164,"title":{},"body":{"injectables/PostService.html":{}}}],["likedbyme",{"_index":1186,"title":{},"body":{"injectables/PostService.html":{}}}],["likepost",{"_index":993,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["likepost(id",{"_index":1035,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(postid",{"_index":1127,"title":{},"body":{"injectables/PostService.html":{}}}],["limit",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["limits",{"_index":704,"title":{},"body":{"controllers/FileController.html":{}}}],["literal",{"_index":423,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":647,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logged",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger",{"_index":730,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RoomService.html":{}}}],["logger(logginginterceptor.name",{"_index":918,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger(roomservice.name",{"_index":1313,"title":{},"body":{"injectables/RoomService.html":{}}}],["logginginterceptor",{"_index":73,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":870,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["logmessage",{"_index":637,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["long",{"_index":1153,"title":{},"body":{"injectables/PostService.html":{}}}],["longpost",{"_index":584,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["longpostblock",{"_index":597,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["lt",{"_index":772,"title":{},"body":{"injectables/FileService.html":{}}}],["lts.1",{"_index":1480,"title":{},"body":{"dependencies.html":{}}}],["manager",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["map",{"_index":698,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["mark",{"_index":1167,"title":{},"body":{"injectables/PostService.html":{}}}],["markfileasuploaded",{"_index":734,"title":{},"body":{"injectables/FileService.html":{}}}],["markfileasuploaded(fileids",{"_index":748,"title":{},"body":{"injectables/FileService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":699,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["media",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"miscellaneous/variables.html":{}}}],["media_base_url",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["media_base_url}${file.filename",{"_index":792,"title":{},"body":{"injectables/FileService.html":{}}}],["media_base_url}${img_name",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["mediatype",{"_index":497,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["mediatypes",{"_index":585,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["memory",{"_index":857,"title":{},"body":{"controllers/HealthController.html":{}}}],["memorycheck",{"_index":830,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":847,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{}}}],["messagebody",{"_index":456,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["messagebody('roomid",{"_index":1286,"title":{},"body":{"classes/RoomGateway.html":{}}}],["metadata",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["mimetype",{"_index":569,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FileService.html":{}}}],["minlength",{"_index":560,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":564,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1487,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["multer",{"_index":678,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["multermodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["multipart",{"_index":931,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["name",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":461,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["nbf",{"_index":361,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["nestinterceptor",{"_index":920,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/axios",{"_index":890,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core/services/reflector.service",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["nestjs/event",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":908,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":848,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":457,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{},"dependencies.html":{}}}],["new",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_chat",{"_index":489,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.fromuserid",{"_index":511,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.receiverencryptedmessage",{"_index":519,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.roomid",{"_index":503,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.senderencryptedmessage",{"_index":517,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.touserid",{"_index":510,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_user",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.email",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.password",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.username",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["newchat.fromuserid",{"_index":523,"title":{},"body":{"injectables/ChatService.html":{}}}],["next",{"_index":914,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle",{"_index":928,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":940,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["notacceptableexception",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":755,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('file",{"_index":804,"title":{},"body":{"injectables/FileService.html":{}}}],["notfoundexception('parent",{"_index":1177,"title":{},"body":{"injectables/PostService.html":{}}}],["notfoundexception('post",{"_index":1183,"title":{},"body":{"injectables/PostService.html":{}}}],["notfoundexception('user",{"_index":1204,"title":{},"body":{"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["notification",{"_index":943,"title":{"classes/Notification.html":{}},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notification.controller",{"_index":972,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.dto",{"_index":961,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":580,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.service",{"_index":960,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["notificationcontroller",{"_index":945,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationmodule",{"_index":49,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["notifications",{"_index":953,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationservice",{"_index":959,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["now",{"_index":924,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":942,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":1324,"title":{},"body":{"injectables/RoomService.html":{}}}],["number",{"_index":362,"title":{},"body":{"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateFileDto.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(skip",{"_index":1068,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["number(take",{"_index":1069,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["object",{"_index":649,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":933,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["observable",{"_index":917,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["omit",{"_index":1220,"title":{},"body":{"injectables/PrismaService.html":{}}}],["on('error",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":1262,"title":{},"body":{"classes/RoomGateway.html":{}}}],["onevent",{"_index":401,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{}}}],["onevent('chat.created",{"_index":387,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{}}}],["onmoduleinit",{"_index":1218,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":1066,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["origin",{"_index":462,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["originalname",{"_index":790,"title":{},"body":{"injectables/FileService.html":{}}}],["orphaned",{"_index":761,"title":{},"body":{"injectables/FileService.html":{}}}],["out",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outgoing",{"_index":941,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["overview",{"_index":1505,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":796,"title":{},"body":{"injectables/FileService.html":{}}}],["package",{"_index":1454,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":398,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":410,"title":{},"body":{"controllers/ChatController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1034,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["params.currentuseremail",{"_index":1198,"title":{},"body":{"injectables/PostService.html":{}}}],["params.email",{"_index":1202,"title":{},"body":{"injectables/PostService.html":{}}}],["params.id",{"_index":1071,"title":{},"body":{"controllers/PostController.html":{}}}],["parent",{"_index":1059,"title":{},"body":{"controllers/PostController.html":{}}}],["parentid",{"_index":586,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["parentpost",{"_index":1178,"title":{},"body":{"injectables/PostService.html":{}}}],["parentpost.commentcount",{"_index":1182,"title":{},"body":{"injectables/PostService.html":{}}}],["partial",{"_index":1372,"title":{},"body":{"controllers/UserController.html":{}}}],["partialtype",{"_index":907,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createchatdto",{"_index":1335,"title":{},"body":{"classes/UpdateChatDto.html":{}}}],["partialtype(createfiledto",{"_index":1337,"title":{},"body":{"classes/UpdateFileDto.html":{}}}],["partialtype(createhealthdto",{"_index":1340,"title":{},"body":{"classes/UpdateHealthDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1342,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createroomdto",{"_index":902,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":1354,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participants",{"_index":606,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{},"classes/UserRoomKey.html":{}}}],["pass",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":355,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleAuthUser.html":{},"injectables/PrismaService.html":{},"classes/SignInDto.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":397,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["patch('/update/:id",{"_index":1241,"title":{},"body":{"controllers/RoomController.html":{}}}],["patch(':id",{"_index":395,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{}}}],["path",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["payload",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["payload.aud",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.name",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["pendingfiles",{"_index":768,"title":{},"body":{"injectables/FileService.html":{}}}],["picture",{"_index":363,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["post",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{}}}],["post('/check",{"_index":1000,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/search",{"_index":1020,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["post('create",{"_index":1007,"title":{},"body":{"controllers/PostController.html":{}}}],["post('feed",{"_index":1029,"title":{},"body":{"controllers/PostController.html":{}}}],["post('login",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/google",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":1378,"title":{},"body":{"controllers/UserController.html":{}}}],["post('signup/google",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('upload",{"_index":717,"title":{},"body":{"controllers/FileController.html":{}}}],["post.author",{"_index":1185,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkcount",{"_index":1212,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.length",{"_index":1214,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.some",{"_index":1199,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.some((user",{"_index":1189,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":1086,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":1046,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":583,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:12",{"_index":594,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":591,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:20",{"_index":592,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":593,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:30",{"_index":589,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":596,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.likecount",{"_index":1209,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.length",{"_index":1213,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.some",{"_index":1197,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.some((user",{"_index":1187,"title":{},"body":{"injectables/PostService.html":{}}}],["post.parentid",{"_index":1174,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":1044,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/post.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":979,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postdata",{"_index":999,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.email",{"_index":1062,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.longpost",{"_index":1050,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.type",{"_index":1049,"title":{},"body":{"controllers/PostController.html":{}}}],["postid",{"_index":1103,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodel",{"_index":1045,"title":{},"body":{"controllers/PostController.html":{}}}],["postmodule",{"_index":50,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":981,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.map((post",{"_index":1196,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":1043,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postswithuserflags",{"_index":1195,"title":{},"body":{"injectables/PostService.html":{}}}],["posttype",{"_index":595,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["posttype.long",{"_index":1138,"title":{},"body":{"injectables/PostService.html":{}}}],["postwithuserflags",{"_index":1184,"title":{},"body":{"injectables/PostService.html":{}}}],["prefix",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["prisma.filecreateinput",{"_index":797,"title":{},"body":{"injectables/FileService.html":{}}}],["prisma.postcreateinput",{"_index":1155,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postcreatemediainput",{"_index":743,"title":{},"body":{"injectables/FileService.html":{}}}],["prisma.postorderbywithrelationinput",{"_index":1193,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postupdateinput",{"_index":1200,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereinput",{"_index":1192,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":1111,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.service",{"_index":476,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":1416,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":1415,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":1404,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":1217,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismahealthindicator",{"_index":845,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismaservice",{"_index":225,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["process",{"_index":406,"title":{},"body":{"controllers/ChatController.html":{},"injectables/PostService.html":{}}}],["process.env.api_base_url",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.default_profile_img",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["process.env.file_base_url",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["process.env.google_auth_client_id",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.ui_base_url",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.all",{"_index":799,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["promisify(exec",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":354,"title":{"properties.html":{}},"body":{"interfaces/AuthUser.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserRoomKey.html":{},"properties.html":{}}}],["provide",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('api')@healthcheck",{"_index":832,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('db')@healthcheck",{"_index":836,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('hello",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@get('memory')@healthcheck",{"_index":838,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('storage')@healthcheck",{"_index":840,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('ui')@healthcheck",{"_index":834,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@post('register",{"_index":1368,"title":{},"body":{"controllers/UserController.html":{}}}],["publickey",{"_index":903,"title":{},"body":{"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["published",{"_index":1054,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["publishpost",{"_index":994,"title":{},"body":{"controllers/PostController.html":{}}}],["publishpost(id",{"_index":1038,"title":{},"body":{"controllers/PostController.html":{}}}],["put",{"_index":1041,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["put('bookmark/:id",{"_index":996,"title":{},"body":{"controllers/PostController.html":{}}}],["put('like/:id",{"_index":1036,"title":{},"body":{"controllers/PostController.html":{}}}],["put('publish/:id",{"_index":1039,"title":{},"body":{"controllers/PostController.html":{}}}],["put('update/:id",{"_index":1373,"title":{},"body":{"controllers/UserController.html":{}}}],["q",{"_index":1019,"title":{},"body":{"controllers/PostController.html":{}}}],["q.trim().replace(/[^a",{"_index":1074,"title":{},"body":{"controllers/PostController.html":{}}}],["query",{"_index":1042,"title":{},"body":{"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["query('q",{"_index":1072,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('skip",{"_index":1064,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('take",{"_index":1065,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('user1",{"_index":1247,"title":{},"body":{"controllers/RoomController.html":{}}}],["query('user2",{"_index":1248,"title":{},"body":{"controllers/RoomController.html":{}}}],["randomname",{"_index":695,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["randomname}${extension",{"_index":702,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["receiver",{"_index":500,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["receiver.id",{"_index":518,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["receiverencryptedmessage",{"_index":533,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["record",{"_index":780,"title":{},"body":{"injectables/FileService.html":{}}}],["recursive",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{}}}],["redacted",{"_index":655,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["reflect",{"_index":1481,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["reject",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":378,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["remove(@messagebody",{"_index":1290,"title":{},"body":{"classes/RoomGateway.html":{}}}],["remove(@param('id",{"_index":417,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["remove(id",{"_index":390,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["removes",{"_index":529,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{},"injectables/RoomService.html":{}}}],["req",{"_index":383,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"miscellaneous/variables.html":{}}}],["req.user.sub",{"_index":412,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{}}}],["request",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/ChatController.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{}}}],["request.file",{"_index":932,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.files",{"_index":927,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers.authorization?.split",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["request.is('multipart/form",{"_index":926,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":640,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.url",{"_index":641,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request['user",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["res",{"_index":871,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{}}}],["res.map((file",{"_index":1140,"title":{},"body":{"injectables/PostService.html":{}}}],["res.status",{"_index":872,"title":{},"body":{"controllers/HealthController.html":{}}}],["res[0",{"_index":1146,"title":{},"body":{"injectables/PostService.html":{}}}],["reset",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["response.pipe(file",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.status(status).json",{"_index":651,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["response.statuscode",{"_index":639,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["room",{"_index":502,"title":{"classes/Room.html":{}},"body":{"injectables/ChatService.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"coverage.html":{}}}],["room.controller",{"_index":1296,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":909,"title":{},"body":{"classes/JoinRoomDto.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["room.dto.ts",{"_index":605,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":1390,"title":{},"body":{"classes/UserRoomKey.html":{}}}],["room.dto.ts:11",{"_index":1389,"title":{},"body":{"classes/UserRoomKey.html":{}}}],["room.dto.ts:4",{"_index":607,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:7",{"_index":905,"title":{},"body":{"classes/JoinRoomDto.html":{}}}],["room.dto.ts:8",{"_index":906,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["room.dto.ts:9",{"_index":904,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["room.gateway",{"_index":1295,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.id",{"_index":512,"title":{},"body":{"injectables/ChatService.html":{}}}],["room.service",{"_index":1243,"title":{},"body":{"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{}}}],["room/dto/update",{"_index":1276,"title":{},"body":{"classes/RoomGateway.html":{}}}],["room/room.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["roomcontroller",{"_index":1224,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomdata",{"_index":1267,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomdata.roomid",{"_index":1279,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomdata.userid",{"_index":1280,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomgateway",{"_index":1254,"title":{"classes/RoomGateway.html":{}},"body":{"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomid",{"_index":534,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["roommodule",{"_index":51,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["rooms",{"_index":1226,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomservice",{"_index":472,"title":{"injectables/RoomService.html":{}},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"coverage.html":{},"overview.html":{}}}],["rxjs",{"_index":921,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":923,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sanitizedbody",{"_index":653,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizedbody.password",{"_index":654,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizerequestbody",{"_index":622,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizerequestbody(body",{"_index":629,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["savedfile",{"_index":787,"title":{},"body":{"injectables/FileService.html":{}}}],["savedfiles",{"_index":786,"title":{},"body":{"injectables/FileService.html":{}}}],["savedfiles.push(savedfile.id",{"_index":798,"title":{},"body":{"injectables/FileService.html":{}}}],["saving",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["schedulemodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["search",{"_index":1080,"title":{},"body":{"controllers/PostController.html":{}}}],["searchstring",{"_index":1364,"title":{},"body":{"controllers/UserController.html":{}}}],["searchterm",{"_index":1413,"title":{},"body":{"injectables/UserService.html":{}}}],["secret",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":1166,"title":{},"body":{"injectables/PostService.html":{}}}],["sender",{"_index":498,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["sender.id",{"_index":514,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["senderencryptedmessage",{"_index":535,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["server",{"_index":443,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["set",{"_index":683,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["setmetadata(is_public_key",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["sharp",{"_index":1485,"title":{},"body":{"dependencies.html":{}}}],["short",{"_index":1169,"title":{},"body":{"injectables/PostService.html":{}}}],["signin",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":132,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["signingoogle",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["signingoogle(token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["signout(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout(signindto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupgoogle",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupgoogle(token",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupuser",{"_index":1359,"title":{},"body":{"controllers/UserController.html":{}}}],["signupuser(userdata",{"_index":1367,"title":{},"body":{"controllers/UserController.html":{}}}],["size",{"_index":570,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{}}}],["skip",{"_index":1027,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["skipduplicates",{"_index":1162,"title":{},"body":{"injectables/PostService.html":{}}}],["social",{"_index":1498,"title":{},"body":{"index.html":{}}}],["socket",{"_index":467,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["socket.io",{"_index":458,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["src/.../auth.guard.ts",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.controller.ts",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.manager.ts",{"_index":1490,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.interceptor.ts",{"_index":911,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/app.interceptor.ts:13",{"_index":919,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/app.interceptor.ts:15",{"_index":916,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/app.module.ts",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard",{"_index":849,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["src/auth/auth.guard.ts",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.guard.ts:22",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:28",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:55",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:101",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:165",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:207",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:216",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:52",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1434,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/sign",{"_index":351,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts",{"_index":373,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:20",{"_index":388,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:25",{"_index":382,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:30",{"_index":386,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:35",{"_index":396,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:40",{"_index":392,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.gateway.ts",{"_index":442,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:18",{"_index":446,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:22",{"_index":448,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:25",{"_index":452,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":473,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":478,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:10",{"_index":483,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:102",{"_index":493,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:106",{"_index":495,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:110",{"_index":494,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:114",{"_index":490,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:17",{"_index":488,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:79",{"_index":486,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:83",{"_index":492,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/dto/create",{"_index":531,"title":{},"body":{"classes/CreateChatDto.html":{},"coverage.html":{}}}],["src/chat/dto/update",{"_index":1334,"title":{},"body":{"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["src/chat/entities/chat.entity.ts",{"_index":371,"title":{},"body":{"classes/Chat.html":{},"coverage.html":{}}}],["src/chat/events/chat.event.ts",{"_index":419,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"coverage.html":{}}}],["src/chat/events/chat.event.ts:1",{"_index":424,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:10",{"_index":426,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:8",{"_index":427,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:9",{"_index":425,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/listeners/chat.listener.ts",{"_index":435,"title":{},"body":{"injectables/ChatCreatedListener.html":{},"coverage.html":{}}}],["src/chat/listeners/chat.listener.ts:8",{"_index":438,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["src/file/dto/create",{"_index":566,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/file/dto/update",{"_index":1336,"title":{},"body":{"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["src/file/entities/file.entity.ts",{"_index":656,"title":{},"body":{"classes/File.html":{},"coverage.html":{}}}],["src/file/file.controller.ts",{"_index":658,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/file/file.controller.ts:75",{"_index":668,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:84",{"_index":660,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:89",{"_index":661,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:94",{"_index":664,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:99",{"_index":662,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.manager.ts",{"_index":1437,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/file/file.module.ts",{"_index":727,"title":{},"body":{"modules/FileModule.html":{}}}],["src/file/file.service",{"_index":1087,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["src/file/file.service.ts",{"_index":729,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/file/file.service.ts:10",{"_index":735,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:104",{"_index":749,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:121",{"_index":740,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:125",{"_index":741,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:129",{"_index":751,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:133",{"_index":750,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:16",{"_index":754,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:19",{"_index":747,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:36",{"_index":739,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:53",{"_index":737,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:83",{"_index":744,"title":{},"body":{"injectables/FileService.html":{}}}],["src/health/dto/create",{"_index":576,"title":{},"body":{"classes/CreateHealthDto.html":{},"coverage.html":{}}}],["src/health/dto/update",{"_index":1339,"title":{},"body":{"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["src/health/entities/health.entity.ts",{"_index":824,"title":{},"body":{"classes/Health.html":{},"coverage.html":{}}}],["src/health/exceptionslogger.filter.ts",{"_index":620,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/health/exceptionslogger.filter.ts:12",{"_index":627,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["src/health/exceptionslogger.filter.ts:44",{"_index":630,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["src/health/health.controller.ts",{"_index":826,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:29",{"_index":833,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:38",{"_index":835,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:52",{"_index":837,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:61",{"_index":841,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:71",{"_index":839,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":885,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/health/health.service.ts",{"_index":891,"title":{},"body":{"injectables/HealthService.html":{},"coverage.html":{}}}],["src/health/health.service.ts:10",{"_index":894,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:14",{"_index":895,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:18",{"_index":897,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:22",{"_index":896,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:6",{"_index":893,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/main.ts",{"_index":1445,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notification/dto/create",{"_index":579,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/dto/update",{"_index":1341,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/entities/notification.entity.ts",{"_index":944,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{}}}],["src/notification/notification.controller.ts",{"_index":946,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notification/notification.controller.ts:23",{"_index":956,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:26",{"_index":949,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:31",{"_index":950,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:36",{"_index":951,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:41",{"_index":958,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:49",{"_index":952,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.module.ts",{"_index":971,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/notification/notification.service.ts",{"_index":973,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notification/notification.service.ts:11",{"_index":975,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:15",{"_index":976,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:19",{"_index":978,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:23",{"_index":977,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:7",{"_index":974,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/post/dto/create",{"_index":582,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dto/update",{"_index":1344,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":980,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:105",{"_index":1005,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:117",{"_index":1002,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:129",{"_index":1030,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:146",{"_index":1033,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:164",{"_index":1021,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:187",{"_index":1014,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:21",{"_index":1009,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:39",{"_index":1011,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:58",{"_index":1040,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:70",{"_index":997,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:78",{"_index":1037,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:86",{"_index":1025,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:94",{"_index":1017,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":1085,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":1088,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:109",{"_index":1114,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:121",{"_index":1126,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:134",{"_index":1116,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:14",{"_index":1109,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:171",{"_index":1132,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:205",{"_index":1107,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:217",{"_index":1105,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:229",{"_index":1118,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:281",{"_index":1130,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:323",{"_index":1128,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:352",{"_index":1102,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:384",{"_index":1124,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:392",{"_index":1120,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:401",{"_index":1122,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:410",{"_index":1112,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:8",{"_index":1100,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma.service",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FileModule.html":{},"modules/RoomModule.html":{}}}],["src/prisma.service.ts",{"_index":1216,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":1221,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":1219,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/room/dto/create",{"_index":604,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["src/room/dto/update",{"_index":901,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/room/entities/room.entity.ts",{"_index":1223,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/room/room.controller.ts",{"_index":1225,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/room/room.controller.ts:19",{"_index":1230,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:24",{"_index":1234,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:29",{"_index":1238,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:37",{"_index":1233,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:42",{"_index":1242,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:47",{"_index":1240,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.gateway.ts",{"_index":1255,"title":{},"body":{"classes/RoomGateway.html":{},"coverage.html":{}}}],["src/room/room.gateway.ts:21",{"_index":1259,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:25",{"_index":1260,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:28",{"_index":1263,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:33",{"_index":1266,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:50",{"_index":1270,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:59",{"_index":1275,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:64",{"_index":1272,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.module.ts",{"_index":1294,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/room/room.service",{"_index":477,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["src/room/room.service.ts",{"_index":1297,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/room/room.service.ts:113",{"_index":1307,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:146",{"_index":1312,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:150",{"_index":1310,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:16",{"_index":1301,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:35",{"_index":1303,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:54",{"_index":1305,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:65",{"_index":1309,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:9",{"_index":1299,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:97",{"_index":1306,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/user/dto/create",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1353,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1356,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:22",{"_index":1369,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:30",{"_index":1366,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:35",{"_index":1363,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":1374,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":1361,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":1387,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{}}}],["src/user/user.service.ts",{"_index":1391,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:12",{"_index":1407,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:31",{"_index":1410,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1401,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1399,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:66",{"_index":1412,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":1405,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1397,"title":{},"body":{"injectables/UserService.html":{}}}],["started",{"_index":1496,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":496,"title":{},"body":{"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{}}}],["status.deleted",{"_index":783,"title":{},"body":{"injectables/FileService.html":{}}}],["status.pending",{"_index":770,"title":{},"body":{"injectables/FileService.html":{}}}],["status.sent",{"_index":508,"title":{},"body":{"injectables/ChatService.html":{}}}],["status.uploaded",{"_index":803,"title":{},"body":{"injectables/FileService.html":{}}}],["storage",{"_index":690,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagecheck",{"_index":831,"title":{},"body":{"controllers/HealthController.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":1053,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["sub",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"interfaces/JwtSubPayload.html":{},"classes/SignInDto.html":{}}}],["subscribemessage",{"_index":455,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["subscribemessage('find",{"_index":1261,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('join",{"_index":1265,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('leave",{"_index":1269,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('removeroom",{"_index":1271,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('send",{"_index":451,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('updateroom",{"_index":1274,"title":{},"body":{"classes/RoomGateway.html":{}}}],["successfully",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":1502,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1503,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1453,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1452,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1028,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":922,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["terminusmodule",{"_index":888,"title":{},"body":{"modules/HealthModule.html":{}}}],["text",{"_index":536,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["this.$connect",{"_index":1222,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.arraybuffertobase64",{"_index":516,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authservice.signin(signindto.email",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signingoogle(token",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signout(signindto.email",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupgoogle(token",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.chatservice.create(chatdata",{"_index":468,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.findall(id",{"_index":411,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.findone(+id",{"_index":414,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.remove(+id",{"_index":418,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.update(+id",{"_index":416,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.checkifuserbookmarkedpost(postid",{"_index":1210,"title":{},"body":{"injectables/PostService.html":{}}}],["this.checkifuserlikedpost(postid",{"_index":1205,"title":{},"body":{"injectables/PostService.html":{}}}],["this.create(user1",{"_index":1331,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.createimgpath",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.deletefilesandrecords(pendingfiles",{"_index":773,"title":{},"body":{"injectables/FileService.html":{}}}],["this.description",{"_index":430,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.disk.checkstorage('storage",{"_index":876,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.downloadimage(payload.picture",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventemitter.emit",{"_index":521,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.extracttokenfromheader(request",{"_index":210,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.fileservice.create(compressedfiles",{"_index":720,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.findall",{"_index":721,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.findone(id",{"_index":722,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.getfilesurls(c.media",{"_index":1145,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.getfilesurls(data.media",{"_index":1139,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.markfileasuploaded(c.media",{"_index":1173,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.markfileasuploaded(fileids",{"_index":1170,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.remove(id",{"_index":724,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.update(id",{"_index":723,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findone(roomid",{"_index":1317,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.findparentpost(postid",{"_index":1179,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fromuserid",{"_index":432,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.health.check",{"_index":860,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('bree",{"_index":861,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.responsecheck",{"_index":866,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.incrementparentpostcommentcount(post.parentid",{"_index":1175,"title":{},"body":{"injectables/PostService.html":{}}}],["this.jwtservice.decode(token",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(data",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.logger.error",{"_index":1319,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.logger.log",{"_index":929,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.log('remove",{"_index":760,"title":{},"body":{"injectables/FileService.html":{}}}],["this.logger.log(`incoming",{"_index":939,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":880,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.name",{"_index":428,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.notificationservice.create(createnotificationdto",{"_index":964,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findall",{"_index":965,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findone(id",{"_index":966,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.remove(id",{"_index":968,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.update(id",{"_index":967,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.postservice.bookmarkpost(id",{"_index":1055,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.checkifuserbookmarkedpost",{"_index":1063,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.checkifuserlikedpost",{"_index":1061,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createpost",{"_index":1048,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletepost",{"_index":1082,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getmultipleposts",{"_index":1058,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.likepost(id",{"_index":1056,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.updatepost",{"_index":1052,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.viewsinglepost(id",{"_index":1057,"title":{},"body":{"controllers/PostController.html":{}}}],["this.prisma.chat.create",{"_index":507,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.prisma.chat.findmany",{"_index":525,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["this.prisma.file.create",{"_index":788,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.findmany",{"_index":769,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.findunique",{"_index":802,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.update",{"_index":781,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.post.create",{"_index":1163,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":1215,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":1194,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":1176,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":1201,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.room.create",{"_index":1314,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findfirst",{"_index":1330,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findmany",{"_index":1315,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findunique",{"_index":1323,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.update",{"_index":1318,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.user.create",{"_index":1420,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1422,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":1417,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1203,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.update",{"_index":1421,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.roomservice.create(sender",{"_index":505,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.roomservice.findallwithparticipant(req.user.sub",{"_index":1245,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findchatsinroom(id",{"_index":1251,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findone(id",{"_index":1246,"title":{},"body":{"controllers/RoomController.html":{},"classes/RoomGateway.html":{}}}],["this.roomservice.findone(new_chat.roomid",{"_index":504,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.roomservice.findroombyparticipantsorcreate(user1id",{"_index":1249,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.joinroom",{"_index":1278,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.roomservice.remove(+id",{"_index":1253,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.remove(id",{"_index":1291,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.roomservice.update(id",{"_index":1252,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.server.to(chatdata.roomid).emit('receive",{"_index":469,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.server.to(roomdata.roomid).emit('user",{"_index":1282,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.ui_url",{"_index":869,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.updatepost",{"_index":1180,"title":{},"body":{"injectables/PostService.html":{}}}],["this.updateuserprofile(user",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url",{"_index":863,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.createfeduser(u",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(userdata",{"_index":1379,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser",{"_index":1384,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduser(email",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["this.userservice.finduser(id",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.userservice.finduser(new_chat.fromuserid",{"_index":499,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userservice.finduser(new_chat.touserid",{"_index":501,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userservice.finduser(payload.email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduser(user1id",{"_index":1326,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.finduser(user2id",{"_index":1328,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.finduser(userid",{"_index":1316,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.getmultipleusers",{"_index":1382,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["thresholdpercent",{"_index":877,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttlermodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":211,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":650,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["timezone",{"_index":954,"title":{},"body":{"controllers/NotificationController.html":{}}}],["token",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["touserid",{"_index":526,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["transformer",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["transports",{"_index":463,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["triggernotifications",{"_index":947,"title":{},"body":{"controllers/NotificationController.html":{}}}],["true",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/UpdatePostDto.html":{},"miscellaneous/variables.html":{}}}],["true})@isarray()@arraynotempty",{"_index":588,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["try",{"_index":213,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["ttl",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["twentyfourhoursago",{"_index":764,"title":{},"body":{"injectables/FileService.html":{}}}],["twentyfourhoursago.setdate(twentyfourhoursago.getdate",{"_index":766,"title":{},"body":{"injectables/FileService.html":{}}}],["type",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":652,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["types",{"_index":714,"title":{},"body":{"controllers/FileController.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["u",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["ui_base_url",{"_index":851,"title":{},"body":{"controllers/HealthController.html":{},"classes/RoomGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui_url",{"_index":858,"title":{},"body":{"controllers/HealthController.html":{}}}],["unauthorizedexception",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["undefined",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{}}}],["unknown",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["unlicensed",{"_index":1512,"title":{},"body":{"properties.html":{}}}],["unsupported",{"_index":712,"title":{},"body":{"controllers/FileController.html":{}}}],["update",{"_index":379,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["update(@messagebody",{"_index":1289,"title":{},"body":{"classes/RoomGateway.html":{}}}],["update(@param('id",{"_index":415,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/RoomController.html":{}}}],["update(id",{"_index":393,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{}}}],["update(roomid",{"_index":1311,"title":{},"body":{"injectables/RoomService.html":{}}}],["update(updateroomdto",{"_index":1273,"title":{},"body":{"classes/RoomGateway.html":{}}}],["updatechatdto",{"_index":394,"title":{"classes/UpdateChatDto.html":{}},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["updated_user",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.email",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.password",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.username",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatefiledto",{"_index":663,"title":{"classes/UpdateFileDto.html":{}},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["updatehealthdto",{"_index":1338,"title":{"classes/UpdateHealthDto.html":{}},"body":{"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":957,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1098,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(params",{"_index":1129,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepostdto",{"_index":1343,"title":{"classes/UpdatePostDto.html":{}},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateroomdto",{"_index":910,"title":{"classes/UpdateRoomDto.html":{}},"body":{"classes/JoinRoomDto.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updates",{"_index":528,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{}}}],["updateuser",{"_index":1360,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(id",{"_index":1371,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(params",{"_index":1411,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1352,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserprofile",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserprofile(user",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["uploaded",{"_index":1168,"title":{},"body":{"injectables/PostService.html":{}}}],["uploadedfiles",{"_index":671,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile",{"_index":659,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile(files",{"_index":665,"title":{},"body":{"controllers/FileController.html":{}}}],["uploading",{"_index":1151,"title":{},"body":{"injectables/PostService.html":{}}}],["uploads",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["useclass",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard)@get('profile",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":670,"title":{},"body":{"controllers/FileController.html":{}}}],["useinterceptors(undefined)@post('upload",{"_index":667,"title":{},"body":{"controllers/FileController.html":{}}}],["user",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateRoomDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":1388,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":545,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":553,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:46",{"_index":556,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:50",{"_index":557,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:53",{"_index":551,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:57",{"_index":554,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:61",{"_index":549,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.email",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["user.id",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["user.img",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1375,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{}}}],["user1",{"_index":1325,"title":{},"body":{"injectables/RoomService.html":{}}}],["user1id",{"_index":1239,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["user2",{"_index":1327,"title":{},"body":{"injectables/RoomService.html":{}}}],["user2id",{"_index":1236,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["usercontroller",{"_index":1355,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1370,"title":{},"body":{"controllers/UserController.html":{}}}],["userencryptedmessages",{"_index":513,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["userid",{"_index":609,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["usermodel",{"_index":1376,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":52,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usernameoremail",{"_index":1408,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameoremail.startswith",{"_index":1414,"title":{},"body":{"injectables/UserService.html":{}}}],["userroomkey",{"_index":608,"title":{"classes/UserRoomKey.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["userservice",{"_index":148,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":852,"title":{},"body":{"controllers/HealthController.html":{},"classes/RoomGateway.html":{}}}],["utils/.../index.ts",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/index.ts",{"_index":1451,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["uuidv4",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":598,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":562,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":753,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1513,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1509,"title":{},"body":{"properties.html":{}}}],["video/mp4",{"_index":687,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["viewsinglepost",{"_index":1099,"title":{},"body":{"injectables/PostService.html":{}}}],["viewsinglepost(postid",{"_index":1131,"title":{},"body":{"injectables/PostService.html":{}}}],["void",{"_index":389,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/NotificationController.html":{},"classes/RoomGateway.html":{}}}],["web",{"_index":868,"title":{},"body":{"controllers/HealthController.html":{}}}],["websocket",{"_index":464,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["websocketgateway",{"_index":454,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["websocketserver",{"_index":447,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["welcome",{"_index":1499,"title":{},"body":{"index.html":{}}}],["working",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["writing",{"_index":646,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["yes",{"_index":1022,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["z0",{"_index":1076,"title":{},"body":{"controllers/PostController.html":{}}}],["za",{"_index":1075,"title":{},"body":{"controllers/PostController.html":{}}}],["zoom",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        checkHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('hello')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './auth/auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get('hello')\n  checkHealth(): string {\n    return 'app is working';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostModule } from './post/post.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuard } from './auth/auth.guard';\nimport { LoggingInterceptor } from './app.interceptor';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { FileModule } from './file/file.module';\nimport { HealthModule } from './health/health.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { NotificationModule } from './notification/notification.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ChatModule } from './chat/chat.module';\nimport { RoomModule } from './room/room.module';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    EventEmitterModule.forRoot(),\n    ConfigModule.forRoot(),\n    CacheModule.register(),\n    MulterModule.register({\n      dest: '../uploads',\n    }),\n    ThrottlerModule.forRoot([\n      {\n        ttl: 6000,\n        limit: 10,\n      },\n    ]),\n    UserModule,\n    PostModule,\n    AuthModule,\n    FileModule,\n    HealthModule,\n    NotificationModule,\n    ChatModule,\n    RoomModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleSignup\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('login/google')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleSignup(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('signup/google')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dto/sign-in.dto';\nimport { AuthGuard, Public } from './auth.guard';\nimport { UserService } from 'src/user/user.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly authService: AuthService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('login/google')\n  async googleLogin(@Body('token') token: string) {\n    return await this.authService.signInGoogle(token);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('signup/google')\n  async googleSignup(@Body('token') token: string) {\n    return await this.authService.signUpGoogle(token);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('login')\n  async signIn(@Body() signInDto: SignInDto) {\n    return await this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('logout')\n  async signOut(@Body() signInDto: SignInDto) {\n    return await this.authService.signOut(signInDto.email, signInDto.password);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('profile')\n  async getProfile(@Body('id') id: string) {\n    return await this.userService.findUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\nimport { SetMetadata } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core/services/reflector.service';\n\ninterface JwtSubPayload {\n  sub: string;\n  username: string;\n}\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload: JwtSubPayload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { UserService } from 'src/user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from 'src/prisma.service';\nimport { jwtConstants } from './constants';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, UserService, JwtService, PrismaService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImgPath\n                            \n                            \n                                    Private\n                                    Async\n                                downloadImage\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInGoogle\n                            \n                            \n                                    Async\n                                signOut\n                            \n                            \n                                    Async\n                                signUpGoogle\n                            \n                            \n                                    Private\n                                    Async\n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImgPath\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImgPath()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { url: string; file: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        downloadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadImage(url: string, filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:216\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInGoogle(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpGoogle(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(user: User, payload: GoogleAuthUser, default_img: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            GoogleAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                default_img\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { GoogleAuthUser, AuthUser } from './dto/sign-in.dto';\nimport { User } from '@prisma/client';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as https from 'https';\nimport { join } from 'path';\nimport * as fs from 'fs';\nimport { CreateFedUserDto } from 'src/user/dto/create-user.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  async signIn(email: string, pass: string): Promise> {\n    const user = await this.userService.findUser(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const isPasswordValid = await bcrypt.compare(pass, user.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException();\n    }\n\n    delete user.password;\n\n    const payload = { sub: user.email, username: user.username };\n\n    return {\n      ...user,\n      access_token: await this.jwtService.signAsync(payload, {\n        secret: jwtConstants.secret,\n      }),\n    };\n  }\n\n  async signOut(email: string, pass: string): Promise {\n    const user = await this.userService.findUser(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const isPasswordValid = await bcrypt.compare(pass, user.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException();\n    }\n\n    return {\n      message: 'Logged out successfully',\n    };\n  }\n\n  async signInGoogle(token: string): Promise> {\n    const payload: GoogleAuthUser = await this.jwtService.decode(token);\n\n    const user = await this.userService.findUser(payload.email);\n\n    const client_id = process.env.GOOGLE_AUTH_CLIENT_ID;\n    const default_img = process.env.DEFAULT_PROFILE_IMG;\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    if (client_id !== payload.aud) {\n      throw new UnauthorizedException();\n    }\n\n    if (user.img === default_img) {\n      return await this.updateUserProfile(user, payload, default_img);\n    } else {\n      const data = { sub: user.email, username: user.username };\n      delete user.password;\n\n      return {\n        ...user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    }\n  }\n\n  async signUpGoogle(token: string): Promise> {\n    const payload: GoogleAuthUser = await this.jwtService.decode(token);\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        email: payload.email,\n      },\n    });\n\n    const client_id = process.env.GOOGLE_AUTH_CLIENT_ID;\n\n    if (user) {\n      throw new NotAcceptableException();\n    }\n\n    if (client_id !== payload.aud) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const { url, file } = this.createImgPath();\n      await this.downloadImage(payload.picture, file);\n\n      const u: CreateFedUserDto = {\n        name: payload.name,\n        username: payload.email,\n        email: payload.email,\n        img: url,\n      };\n\n      const new_user = await this.userService.createFedUser(u);\n\n      const data = { sub: new_user.email, username: new_user.username };\n      delete user.password;\n\n      return {\n        ...user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    } catch (error) {\n      if (!error) return;\n      const default_img = process.env.DEFAULT_PROFILE_IMG;\n      const u: CreateFedUserDto = {\n        name: payload.name,\n        username: payload.email,\n        email: payload.email,\n        img: default_img,\n      };\n\n      const new_user = await this.userService.createFedUser(u);\n\n      delete new_user.password;\n      const data = { sub: new_user.email, username: new_user.username };\n\n      return {\n        ...new_user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    }\n  }\n\n  private async updateUserProfile(\n    user: User,\n    payload: GoogleAuthUser,\n    default_img: string,\n  ): Promise> {\n    if (user.img === default_img) {\n      try {\n        const { url, file } = this.createImgPath();\n        await this.downloadImage(payload.picture, file);\n        const updated_user = await this.userService.updateUser({\n          where: { id: user.id },\n          data: { img: url },\n        });\n\n        delete updated_user.password;\n\n        const data = {\n          sub: updated_user.email,\n          username: updated_user.username,\n        };\n\n        return {\n          ...updated_user,\n          access_token: await this.jwtService.signAsync(data, {\n            secret: jwtConstants.secret,\n          }),\n        };\n      } catch (error) {\n        console.error('Error downloading or saving image:', error);\n\n        delete user.password;\n        const data = { sub: user.email, username: user.username };\n        return {\n          ...user,\n          access_token: await this.jwtService.signAsync(data, {\n            secret: jwtConstants.secret,\n          }),\n        };\n      }\n    }\n  }\n\n  private createImgPath() {\n    const img_name = uuidv4() + '.jpg';\n    const destination = join(__dirname, '../../../../', 'media');\n    const media_base_url = process.env.FILE_BASE_URL;\n    fs.mkdirSync(destination, { recursive: true });\n    const img_path = `${media_base_url}${img_name}`;\n    return { url: img_path, file: join(destination, img_name) };\n  }\n\n  private async downloadImage(url: string, filepath: string): Promise {\n    return new Promise((resolve, reject) => {\n      const file = fs.createWriteStream(filepath);\n      https\n        .get(url, (response) => {\n          response.pipe(file);\n          file.on('finish', () => {\n            file.close();\n            resolve();\n          });\n        })\n        .on('error', (err) => {\n          fs.unlink(filepath, () => reject(err));\n        });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthUser.html":{"url":"interfaces/AuthUser.html","title":"interface - AuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            access_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chat.html":{"url":"classes/Chat.html","title":"class - Chat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/entities/chat.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Chat {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                handleOrderCreatedEvent\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: any, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('view/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleOrderCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleOrderCreatedEvent()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('chat.created')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateChatDto: UpdateChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatDto\n                                            \n                                                            UpdateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n} from '@nestjs/common';\n\nimport { UpdateChatDto } from './dto/update-chat.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ChatService } from './chat.service';\n\n@Controller('chats')\nexport class ChatController {\n  constructor(private readonly chatService: ChatService) {}\n\n  @OnEvent('chat.created')\n  handleOrderCreatedEvent() {\n    // handle and process \"ChatCreatedEvent\" event\n  }\n\n  @Get('view/:id')\n  findAll(@Request() req: any, @Param('id') id: 'uuid') {\n    return this.chatService.findAll(id, req.user.sub);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.chatService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateChatDto: UpdateChatDto) {\n    return this.chatService.update(+id, updateChatDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.chatService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatCreatedEvent.html":{"url":"classes/ChatCreatedEvent.html","title":"class - ChatCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/events/chat.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                fromUserId\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/chat/events/chat.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ChatCreatedEvent {\n  constructor(data: { name: string; description: string; fromUserId: string }) {\n    this.name = data.name;\n    this.description = data.description;\n    this.fromUserId = data.fromUserId;\n  }\n\n  name: string;\n  description: string;\n  fromUserId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatCreatedListener.html":{"url":"injectables/ChatCreatedListener.html","title":"injectable - ChatCreatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatCreatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/listeners/chat.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleChatCreatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleChatCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleChatCreatedEvent(event: ChatCreatedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('chat.created')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/listeners/chat.listener.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            ChatCreatedEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ChatCreatedEvent } from '../events/chat.event';\n\n@Injectable()\nexport class ChatCreatedListener {\n  @OnEvent('chat.created')\n  handleChatCreatedEvent(event: ChatCreatedEvent) {\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createChat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChat(chatData: CreateChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send-message')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.gateway.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatData\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { CreateChatDto } from './dto/create-chat.dto';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway({\n  cors: {\n    namespace: 'chat',\n    origin: '*',\n    transports: ['websocket'],\n  },\n})\nexport class ChatGateway {\n  constructor(private readonly chatService: ChatService) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  @SubscribeMessage('send-message')\n  async createChat(\n    @MessageBody() chatData: CreateChatDto,\n    // @ConnectedSocket() client: Socket,\n  ) {\n    const chat = await this.chatService.create(chatData);\n    if (chat) {\n      this.server.to(chatData.roomId).emit('receive-message', chat);\n\n      return chat;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nChatService\n\nChatService\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nChatModule -->\n\nPrismaService->ChatModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nChatModule -->\n\nRoomService->ChatModule\n\n\n\n\n\nUserService\n\nUserService\n\nChatModule -->\n\nUserService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatService } from './chat.service';\nimport { ChatGateway } from './chat.gateway';\nimport { ChatController } from './chat.controller';\nimport { PrismaService } from '../prisma.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [ChatController],\n  providers: [\n    ChatGateway,\n    ChatService,\n    RoomService,\n    UserService,\n    PrismaService,\n  ],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                arrayBufferToBase64\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                emitEvent\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService, roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        arrayBufferToBase64\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrayBufferToBase64(message: ArrayBuffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        ArrayBuffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(new_chat: CreateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                new_chat\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitEvent\n                        \n                    \n                \n            \n            \n                \nemitEvent()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(to, from)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                from\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateChatDto: UpdateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatDto\n                                            \n                                                            UpdateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateChatDto } from './dto/create-chat.dto';\nimport { PrismaService } from '../prisma.service';\nimport { Chat, Status } from '@prisma/client';\nimport { UserService } from 'src/user/user.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UpdateChatDto } from './dto/update-chat.dto';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly userService: UserService,\n    private readonly roomService: RoomService,\n  ) {}\n\n  async create(new_chat: CreateChatDto): Promise {\n    const { media, mediaType } = new_chat;\n    const sender = await this.userService.findUser(new_chat.fromUserId);\n    const receiver = await this.userService.findUser(new_chat.toUserId);\n\n    const room = new_chat.roomId\n      ? await this.roomService.findOne(new_chat.roomId)\n      : await this.roomService.create(sender, receiver);\n\n    const created_chat = await this.prisma.chat.create({\n      data: {\n        ...(media && { media }),\n        ...(mediaType && { mediaType: [mediaType] }),\n        status: Status.SENT,\n        to: {\n          connect: {\n            id: new_chat.toUserId,\n          },\n        },\n        from: {\n          connect: {\n            id: new_chat.fromUserId,\n          },\n        },\n        room: {\n          connect: {\n            id: room.id,\n          },\n        },\n        userEncryptedMessages: {\n          create: [\n            {\n              user: { connect: { id: sender.id } },\n              encryptedMessage: await this.arrayBufferToBase64(\n                new_chat.senderEncryptedMessage,\n              ),\n            },\n            {\n              user: { connect: { id: receiver.id } },\n              encryptedMessage: await this.arrayBufferToBase64(\n                new_chat.receiverEncryptedMessage,\n              ),\n            },\n          ],\n        },\n      },\n      include: {\n        userEncryptedMessages: true,\n      },\n    });\n\n    // this.eventEmitter.emit(\n    //   'chat.created',\n    //   new ChatCreatedEvent({\n    //     name: '',\n    //     description: '',\n    //     fromUserId: newChat.fromUserId,\n    //   }),\n    // );\n    return created_chat;\n  }\n\n  async arrayBufferToBase64(message: ArrayBuffer): Promise {\n    return Buffer.from(message).toString('base64');\n  }\n\n  async findAll(to: 'uuid', from: 'email') {\n    return await this.prisma.chat.findMany({\n      where: {\n        OR: [\n          {\n            from: { email: from },\n            toUserId: to,\n          },\n          {\n            fromUserId: to,\n            to: {\n              email: from,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} chat`;\n  }\n\n  update(id: number, updateChatDto: UpdateChatDto) {\n    return `This action updates a #${id} chat ${updateChatDto}`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} chat`;\n  }\n\n  emitEvent() {\n    // emit event\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatDto.html":{"url":"classes/CreateChatDto.html","title":"class - CreateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/dto/create-chat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fromUserId\n                            \n                            \n                                    Optional\n                                media\n                            \n                            \n                                    Optional\n                                mediaType\n                            \n                            \n                                    Optional\n                                receiverEncryptedMessage\n                            \n                            \n                                    Optional\n                                roomId\n                            \n                            \n                                    Optional\n                                senderEncryptedMessage\n                            \n                            \n                                text\n                            \n                            \n                                toUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fromUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mediaType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        receiverEncryptedMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        senderEncryptedMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateChatDto {\n  text: ArrayBuffer;\n  media?: string;\n  mediaType?: string;\n  toUserId: string;\n  fromUserId: string;\n  roomId?: string;\n  senderEncryptedMessage?: ArrayBuffer;\n  receiverEncryptedMessage?: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFedUserDto.html":{"url":"classes/CreateFedUserDto.html","title":"class - CreateFedUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFedUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                banner\n                            \n                            \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                img\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        banner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Allow,\n  IsEmail,\n  IsString,\n  MinLength,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img?: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\nexport class CreateFedUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/dto/create-file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                mimetype\n                            \n                            \n                                name\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFileDto {\n  name: string;\n  filename: string;\n  mimetype: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHealthDto.html":{"url":"classes/CreateHealthDto.html","title":"class - CreateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/create-health.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateHealthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateNotificationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                longPost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                media\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                mediaTypes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        longPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@ValidateNested({each: true})@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        mediaTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostType, LongPostBlock } from '@prisma/client';\nimport {\n  IsString,\n  ValidateNested,\n  IsArray,\n  ArrayNotEmpty,\n  Allow,\n} from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  text: string;\n\n  @Allow()\n  @IsString({ each: true })\n  media?: string[];\n\n  @Allow()\n  @IsString({ each: true })\n  mediaTypes?: string[];\n\n  @Allow()\n  @IsString()\n  parentId?: string;\n\n  @Allow()\n  @ValidateNested({ each: true })\n  @IsArray()\n  @ArrayNotEmpty()\n  longPost?: {\n    content: LongPostBlock[];\n  };\n\n  @Allow()\n  @IsString()\n  type?: PostType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                participants\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class CreateRoomDto {\n  participants: User[];\n}\n\nexport class UserRoomKey {\n  id: string;\n  userId: string;\n  roomId: string;\n  encryptionKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                banner\n                            \n                            \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                img\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        banner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Allow,\n  IsEmail,\n  IsString,\n  MinLength,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img?: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\nexport class CreateFedUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/exceptionsLogger.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                sanitizeRequestBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/exceptionsLogger.filter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeRequestBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeRequestBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/exceptionsLogger.filter.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as fs from 'fs';\n\n@Catch()\nexport class ExceptionsLoggerFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus ? exception.getStatus() : 500;\n\n    const logMessage = `\n      --------------------------------------------------\n      ${new Date().toISOString()}\n      ${response.statusCode}\n      \n      ${request.method} ${request.url}\n      ${JSON.stringify(this.sanitizeRequestBody(request.body))}\n      ${exception.message}\n      ${exception.stack}\n\n      --------------------------------------------------\n    `;\n\n    fs.appendFile('./error.log', logMessage, (err) => {\n      if (err) {\n        console.error('Error writing to log file:', err);\n      }\n    });\n\n    //format response object when exception is thrown\n    response.status(status).json({\n      status: status,\n      message: exception.message,\n    });\n  }\n\n  private sanitizeRequestBody(body: any): any {\n    if (body && typeof body === 'object') {\n      const sanitizedBody = { ...body };\n      if (sanitizedBody.password) {\n        sanitizedBody.password = '***REDACTED***';\n      }\n      return sanitizedBody;\n    }\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/File.html":{"url":"classes/File.html","title":"class - File","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  File\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/entities/file.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class File {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateFileDto: UpdateFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(files: Array, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post('upload')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFiles,\n  Request,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileService } from './file.service';\nimport { UpdateFileDto } from './dto/update-file.dto';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { extname, join } from 'path';\nimport * as fs from 'fs';\nimport { compressFiles } from './file.manager';\n\nconst destination = join(__dirname, '../../../../', 'media');\n\nfs.mkdirSync(destination, { recursive: true });\n\nconst allowedMimeTypes = new Set([\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n  'video/mp4',\n  'audio/mpeg',\n  'audio/mp3',\n]);\n\nconst storage = diskStorage({\n  destination,\n  filename: (req, file, cb) => {\n    const name = file.originalname.split('.')[0];\n    const extension = extname(file.originalname);\n    const randomName = Array(32)\n      .fill(null)\n      .map(() => Math.round(Math.random() * 16).toString(16))\n      .join('');\n    cb(null, `${name}-${randomName}${extension}`);\n  },\n});\n\n@Controller('file')\nexport class FileController {\n  constructor(private readonly fileService: FileService) {}\n\n  @UseInterceptors(\n    AnyFilesInterceptor({\n      storage: storage,\n      limits: {\n        fileSize: 1024 * 1024 * 20, // 20MB\n        files: 4,\n      },\n      fileFilter: (req, file, cb) => {\n        if (!allowedMimeTypes.has(file.mimetype)) {\n          return cb(\n            new BadRequestException(\n              `Unsupported file type. Allowed types are: ${Array.from(\n                allowedMimeTypes,\n              ).join(', ')}`,\n            ),\n            false,\n          );\n        }\n        cb(null, true);\n      },\n    }),\n  )\n  @Post('upload')\n  async uploadFile(\n    @UploadedFiles() files: Array,\n    @Request() req: any,\n  ) {\n    const compressedFiles = await compressFiles(files);\n    return await this.fileService.create(compressedFiles, req.user.sub);\n  }\n\n  @Get()\n  findAll() {\n    return this.fileService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.fileService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFileDto: UpdateFileDto) {\n    return this.fileService.update(id, updateFileDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.fileService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\n\nFileService\n\nFileService\n\n\n\nFileModule\n\nFileModule\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nFileModule -->\n\nPrismaService->FileModule\n\n\n\n\n\nUserService\n\nUserService\n\nFileModule -->\n\nUserService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileService } from './file.service';\nimport { FileController } from './file.controller';\nimport { UserService } from 'src/user/user.service';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  controllers: [FileController],\n  providers: [FileService, UserService, PrismaService],\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                deleteFilesAndRecords\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getFilesUrls\n                            \n                            \n                                    \n                                    Async\n                                handleCron\n                            \n                            \n                                    Async\n                                markFileAsUploaded\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/file/file.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(files: Array, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        deleteFilesAndRecords\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFilesAndRecords(files: Array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFilesUrls\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilesUrls(fileIds: string[] | Prisma.PostCreatemediaInput[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileIds\n                                            \n                                                        string[] | Prisma.PostCreatemediaInput[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_11PM)\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markFileAsUploaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    markFileAsUploaded(fileIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFileDto: UpdateFileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger()\n                    \n                \n                    \n                        \n                                Defined in src/file/file.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { PrismaService } from '../prisma.service';\nimport { Prisma, Status, File as FileModel } from '@prisma/client';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport * as fs from 'fs/promises';\nimport { UpdateFileDto } from './dto/update-file.dto';\n\n@Injectable()\nexport class FileService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  private readonly logger = new Logger();\n\n  @Cron(CronExpression.EVERY_DAY_AT_11PM)\n  async handleCron() {\n    this.logger.log('remove orphaned files every day at 11pm');\n\n    const twentyFourHoursAgo = new Date();\n    twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n\n    const pendingFiles = await this.prisma.file.findMany({\n      where: {\n        status: Status.PENDING,\n        createdAt: {\n          lt: twentyFourHoursAgo,\n        },\n      },\n    });\n    await this.deleteFilesAndRecords(pendingFiles);\n  }\n\n  private async deleteFilesAndRecords(files: Array) {\n    for (const file of files) {\n      try {\n        await fs.unlink(file.path);\n        console.log(`File deleted from storage: ${file.path}`);\n\n        // 2. Delete (or update) the database record\n        await this.prisma.file.update({\n          where: { id: file.id, status: Status.PENDING },\n          data: { status: Status.DELETED },\n        });\n      } catch (error) {\n        console.error(`Error deleting file ${file.path}:`, error);\n      }\n    }\n  }\n\n  async create(\n    files: Array,\n    email: string,\n  ): Promise {\n    const user = await this.userService.findUser(email);\n    const savedFiles: string[] = [];\n    const media_base_url = process.env.FILE_BASE_URL;\n\n    for (const file of files) {\n      const savedFile = await this.prisma.file.create({\n        data: {\n          filename: file.filename,\n          originalname: file.originalname,\n          path: file.path,\n          url: `${media_base_url}${file.filename}`,\n          mimetype: file.mimetype,\n          size: file.size,\n          status: Status.PENDING,\n          type: file.mimetype.split('/')[0],\n          owner: {\n            connect: { id: user.id },\n          },\n        } as Prisma.FileCreateInput,\n      });\n      savedFiles.push(savedFile.id);\n    }\n\n    return savedFiles;\n  }\n\n  async getFilesUrls(\n    fileIds: string[] | Prisma.PostCreatemediaInput[],\n  ): Promise {\n    return await Promise.all(\n      fileIds.map(async (fileId) => {\n        const file = await this.prisma.file.findUnique({\n          where: {\n            id: fileId,\n            status: { in: [Status.PENDING, Status.UPLOADED] },\n          },\n        });\n\n        if (!file) {\n          throw new NotFoundException('File not found');\n        }\n\n        return { url: file.url, type: file.type };\n      }),\n    );\n  }\n\n  async markFileAsUploaded(fileIds: string[]) {\n    return Promise.all(\n      fileIds.map(async (fileId) => {\n        const file = await this.prisma.file.update({\n          where: { id: fileId },\n          data: { status: Status.UPLOADED },\n        });\n\n        if (!file) {\n          throw new NotFoundException('File not found');\n        }\n\n        return file.status;\n      }),\n    );\n  }\n\n  findAll() {\n    return `This action returns all file`;\n  }\n\n  findOne(id: string) {\n    return `This action returns a #${id} file`;\n  }\n\n  update(id: string, updateFileDto: UpdateFileDto) {\n    return `This action updates a #${id} file ${updateFileDto}`;\n  }\n\n  remove(id: string) {\n    return `This action removes a #${id} file`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleAuthUser.html":{"url":"classes/GoogleAuthUser.html","title":"class - GoogleAuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleAuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aud\n                            \n                            \n                                azp\n                            \n                            \n                                email\n                            \n                            \n                                email_verified\n                            \n                            \n                                exp\n                            \n                            \n                                family_name\n                            \n                            \n                                given_name\n                            \n                            \n                                iat\n                            \n                            \n                                iss\n                            \n                            \n                                jti\n                            \n                            \n                                name\n                            \n                            \n                                nbf\n                            \n                            \n                                picture\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aud\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        azp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        family_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        given_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iss\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jti\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nbf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Health.html":{"url":"classes/Health.html","title":"class - Health","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Health\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/entities/health.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Health {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                check\n                            \n                            \n                                    \n                                    \n                                    \n                                checkFrontend\n                            \n                            \n                                    \n                                    \n                                    \n                                databaseCheck\n                            \n                            \n                                    \n                                    \n                                    \n                                memoryCheck\n                            \n                            \n                                    \n                                    \n                                    \n                                storageCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('api')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        checkFrontend\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkFrontend()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('ui')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        databaseCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    databaseCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('db')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        memoryCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    memoryCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('memory')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        storageCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    storageCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('storage')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  PrismaHealthIndicator,\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from 'src/auth/auth.guard';\nimport { api_base_url, ui_base_url } from 'utils';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly http: HttpHealthIndicator,\n    private readonly db: PrismaHealthIndicator,\n    private readonly disk: DiskHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n  ) {}\n\n  url = api_base_url;\n  ui_url = ui_base_url;\n\n  @Public()\n  @Get('api')\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('bree-api', this.url + '/hello'),\n    ]);\n  }\n\n  @Public()\n  @Get('ui')\n  @HealthCheck()\n  checkFrontend() {\n    return this.health.check([\n      () =>\n        this.http.responseCheck(\n          'bree-web',\n          this.ui_url + '/login',\n          (res) => res.status === 200,\n        ),\n    ]);\n  }\n\n  @Public()\n  @Get('db')\n  @HealthCheck()\n  databaseCheck() {\n    return this.health.check([\n      () => this.http.pingCheck('bree-db', 'database'),\n    ]);\n  }\n\n  @Public()\n  @Get('storage')\n  @HealthCheck()\n  storageCheck() {\n    return this.health.check([\n      () =>\n        this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ]);\n  }\n\n  @Public()\n  @Get('memory')\n  @HealthCheck()\n  memoryCheck() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\n\nHealthService\n\nHealthService\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HealthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthService } from './health.service';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n  providers: [HealthService],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HealthService.html":{"url":"injectables/HealthService.html","title":"injectable - HealthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HealthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createHealthDto: CreateHealthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createHealthDto\n                                            \n                                                            CreateHealthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateHealthDto } from './dto/create-health.dto';\n\n@Injectable()\nexport class HealthService {\n  create(createHealthDto: CreateHealthDto) {\n    return `This action adds a new health ${createHealthDto}}`;\n  }\n\n  findAll() {\n    return `This action returns all health`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} health`;\n  }\n\n  update(id: number) {\n    return `This action updates a #${id} health`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} health`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinRoomDto.html":{"url":"classes/JoinRoomDto.html","title":"class - JoinRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/update-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoomDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                publicKey\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRoomDto } from './create-room.dto';\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\nexport class JoinRoomDto extends PartialType(CreateRoomDto) {\n  roomId: string;\n  userId: string;\n  publicKey: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtSubPayload.html":{"url":"interfaces/JwtSubPayload.html","title":"interface - JwtSubPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtSubPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\nimport { SetMetadata } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core/services/reflector.service';\n\ninterface JwtSubPayload {\n  sub: string;\n  username: string;\n}\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload: JwtSubPayload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggingInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/app.interceptor.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LoggingInterceptor.name);\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const now = Date.now();\n\n    if (request.is('multipart/form-data')) {\n      if (!request.files) return next.handle();\n      this.logger.log(\n        `Incoming Multipart Request - ${request.method} ${request.url} ${request.file}`,\n      );\n      for (const file of Object.values(\n        request.files as { [fieldname: string]: Express.Multer.File[] },\n      )[0]) {\n        this.logger.log(\n          `File: ${file?.originalname}, Size: ${file.size} bytes`,\n        );\n      }\n    } else\n      this.logger.log(`Incoming Request - ${request.method} ${request.url} `);\n\n    return next.handle().pipe(\n      tap(() => {\n        this.logger.log(\n          `Outgoing Response - ${request.method} ${request.url} - ${Date.now() - now}ms`,\n        );\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/entities/notification.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Notification {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                triggerNotifications\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        triggerNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    triggerNotifications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('* * 0 * * *', {name: 'notifications', timeZone: 'Europe/London'})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateNotificationDto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { NotificationService } from './notification.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\n\n@Controller('notification')\nexport class NotificationController {\n  constructor(private readonly notificationService: NotificationService) {}\n\n  @Cron('* * 0 * * *', {\n    name: 'notifications',\n    timeZone: 'Europe/London',\n  })\n  triggerNotifications() {}\n\n  @Post()\n  create(@Body() createNotificationDto: CreateNotificationDto) {\n    return this.notificationService.create(createNotificationDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.notificationService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.notificationService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateNotificationDto: UpdateNotificationDto,\n  ) {\n    return this.notificationService.update(id, updateNotificationDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.notificationService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService\n\nNotificationService\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationService } from './notification.service';\nimport { NotificationController } from './notification.controller';\n\n@Module({\n  controllers: [NotificationController],\n  providers: [NotificationService],\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateNotificationDto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\n\n@Injectable()\nexport class NotificationService {\n  create(createNotificationDto: CreateNotificationDto) {\n    return `This action adds a new notification ${createNotificationDto}`;\n  }\n\n  findAll() {\n    return `This action returns all notification`;\n  }\n\n  findOne(id: string) {\n    return `This action returns a #${id} notification`;\n  }\n\n  update(id: string, updateNotificationDto: UpdateNotificationDto) {\n    return `This action updates a #${id} notification, ${updateNotificationDto}`;\n  }\n\n  remove(id: string) {\n    return `This action removes a #${id} notification`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                bookmarkPost\n                            \n                            \n                                    \n                                    Async\n                                checkBookmarkedByUser\n                            \n                            \n                                    \n                                    Async\n                                checkLikedByUser\n                            \n                            \n                                    \n                                    Async\n                                createDraft\n                            \n                            \n                                    \n                                    Async\n                                createPost\n                            \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getCommentsForPost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                    Async\n                                getUserPosts\n                            \n                            \n                                    \n                                    Async\n                                likePost\n                            \n                            \n                                    \n                                    Async\n                                publishPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        bookmarkPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    bookmarkPost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('bookmark/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkBookmarkedByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkBookmarkedByUser(id: string, req: any, postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/check-bookmark/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkLikedByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkLikedByUser(id: string, req: any, postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/check-like/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDraft(req: any, postData: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-draft')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(req: any, postData: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-post')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCommentsForPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentsForPost(req: any, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/comments/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredPosts(req: any, q?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/search')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts(req: any, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPosts(params: any, req: any, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id/posts')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    likePost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('like/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { Post as PostModel } from '@prisma/client';\nimport { CreatePostDto } from './dto/create-post.dto';\n\n@Controller('posts')\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post('create-draft')\n  async createDraft(\n    @Request() req: any,\n    @Body() postData: CreatePostDto,\n  ): Promise {\n    return await this.postService.createPost(\n      {\n        ...postData,\n        ...(postData.type && { type: postData.type }),\n        ...(postData.longPost && {\n          longPost: postData.longPost,\n        }),\n      },\n      false,\n      req.user.sub,\n    );\n  }\n\n  @Post('create-post')\n  async createPost(\n    @Request() req: any,\n    @Body() postData: CreatePostDto,\n  ): Promise {\n    console.log(postData);\n    return await this.postService.createPost(\n      {\n        ...postData,\n        ...(postData.type && { type: postData.type }),\n        ...(postData.longPost && {\n          longPost: postData.longPost,\n        }),\n      },\n      true,\n      req.user.sub,\n    );\n  }\n\n  @Put('publish/:id')\n  async publishPost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.updatePost({\n      where: { id: String(id) },\n      data: { published: true },\n      email: req.user.sub,\n    });\n  }\n\n  @Put('bookmark/:id')\n  async bookmarkPost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.bookmarkPost(id, req.user.sub);\n  }\n\n  @Put('like/:id')\n  async likePost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.likePost(id, req.user.sub);\n  }\n\n  @Get('/:id')\n  async getPostById(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.viewSinglePost(id, req.user.sub);\n  }\n\n  @Get('/comments/:id')\n  async getCommentsForPost(\n    @Request() req: any,\n    @Param('id') id: string,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { parent: { id: id } },\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Post('/check-like/:id')\n  async checkLikedByUser(\n    @Param('id') id: string,\n    @Request() req: any,\n    @Body() postData: { email?: string },\n  ): Promise {\n    return await this.postService.checkIfUserLikedPost(\n      id,\n      postData.email ?? req.user.sub,\n    );\n  }\n\n  @Post('/check-bookmark/:id')\n  async checkBookmarkedByUser(\n    @Param('id') id: string,\n    @Request() req: any,\n    @Body() postData: { email?: string },\n  ): Promise {\n    return await this.postService.checkIfUserBookmarkedPost(\n      id,\n      postData.email ?? req.user.sub,\n    );\n  }\n\n  @Post('feed')\n  async getPublishedPosts(\n    @Request() req: any,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { published: true },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      skip: Number(skip),\n      take: Number(take),\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Get('user/:id/posts')\n  async getUserPosts(\n    @Param() params: any,\n    @Request() req: any,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { published: true, author: { id: params.id } },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      skip: Number(skip),\n      take: Number(take),\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Post('/search')\n  async getFilteredPosts(\n    @Request() req: any,\n    @Query('q') q?: string,\n  ): Promise {\n    const cleanedQuery = q.trim().replace(/[^a-zA-Z0-9\\s]/g, ' ');\n\n    const query =\n      cleanedQuery.split(/[ \\+]/).length > 1\n        ? cleanedQuery.split(' ').join(' | ')\n        : cleanedQuery;\n\n    return await this.postService.getMultiplePosts({\n      where: {\n        published: true,\n        text: {\n          search: query,\n        },\n      },\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return await this.postService.deletePost({ id: String(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nFileService\n\nFileService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nFileService->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostModule -->\n\nPrismaService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nPostModule -->\n\nUserService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                        \n                            PostService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './post.service';\nimport { PrismaService } from '../prisma.service';\nimport { FileService } from 'src/file/file.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService, FileService, UserService, PrismaService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookmarkPost\n                            \n                            \n                                    Async\n                                checkIfUserBookmarkedPost\n                            \n                            \n                                    Async\n                                checkIfUserLikedPost\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                findParentPost\n                            \n                            \n                                    Async\n                                findPost\n                            \n                            \n                                    Async\n                                getMultiplePosts\n                            \n                            \n                                    Async\n                                getPostBookmarks\n                            \n                            \n                                    Async\n                                getPostComments\n                            \n                            \n                                    Async\n                                getPostLikes\n                            \n                            \n                                    Async\n                                incrementParentPostCommentCount\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                            \n                                    Async\n                                viewSinglePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        bookmarkPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    bookmarkPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:352\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserBookmarkedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserBookmarkedPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:217\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserLikedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserLikedPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(data: CreatePostDto, published: boolean, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                published\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:410\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findParentPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    findParentPost(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMultiplePosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMultiplePosts(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBookmarks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBookmarks(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:392\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:401\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostLikes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostLikes(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:384\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        incrementParentPostCommentCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    incrementParentPostCommentCount(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    likePost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:323\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:281\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        viewSinglePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    viewSinglePost(postId: string, email)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { Post, PostType, Prisma } from '@prisma/client';\nimport { FileService } from 'src/file/file.service';\nimport { CreatePostDto } from './dto/create-post.dto';\n\n@Injectable()\nexport class PostService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly fileService: FileService,\n  ) {}\n\n  async createPost(\n    data: CreatePostDto,\n    published: boolean,\n    email: string,\n  ): Promise {\n    const fileIds = data.media;\n    const clone = data.longPost?.content;\n\n    if (fileIds.length > 0 && data.type !== PostType.LONG) {\n      const res = await this.fileService.getFilesUrls(data.media as any);\n      data.media = res.map((file) => file.url);\n      data.mediaTypes = res.map((file) => file.type);\n    }\n    if (data.type === PostType.LONG) {\n      try {\n        const contents = await Promise.all(\n          data.longPost.content.map(async (c) => {\n            const res = await this.fileService.getFilesUrls(c.media);\n            return res[0];\n          }),\n        );\n\n        data.longPost.content = data.longPost.content.map((c, index) => ({\n          ...c,\n          media: [contents[index].url],\n          mediaTypes: [contents[index].type],\n        }));\n      } catch (error) {\n        console.error('Error uploading files:', error);\n        throw new Error('Failed to process long post media.');\n      }\n    }\n    const createData: Prisma.PostCreateInput = {\n      ...data,\n      author: { connect: { email } },\n      longPost:\n        data.longPost && data.longPost.content.length > 0\n          ? {\n              create: {\n                content: {\n                  createMany: {\n                    data: data.longPost.content.map((c) => ({\n                      text: c.text,\n                      media: c.media,\n                      mediaTypes: c.mediaTypes,\n                    })),\n                    skipDuplicates: true,\n                  },\n                },\n              },\n            }\n          : undefined,\n\n      published,\n    };\n\n    const post = await this.prisma.post.create({\n      data: createData,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    //Mark uploaded for short posts\n    if (fileIds.length > 0) await this.fileService.markFileAsUploaded(fileIds);\n\n    //Mark uploaded for long posts\n    if (data.type === PostType.LONG && clone.length > 0) {\n      await Promise.all(\n        clone.map(async (c) => {\n          await this.fileService.markFileAsUploaded(c.media);\n        }),\n      );\n    }\n\n    if (post.parentId)\n      this.incrementParentPostCommentCount(post.parentId, email);\n\n    return post;\n  }\n\n  async findParentPost(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Parent post not found');\n    }\n\n    return post;\n  }\n\n  async incrementParentPostCommentCount(\n    postId: string,\n    email: string,\n  ): Promise {\n    const parentPost = await this.findParentPost(postId);\n\n    return this.updatePost({\n      where: { id: postId },\n      data: { commentCount: parentPost.commentCount + 1 },\n      email,\n    });\n  }\n\n  async findPost(postId: string, email: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === email),\n      bookmarkedByMe: post.bookmarkedBy.some((user) => user.email === email),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async viewSinglePost(postId: string, email): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: {\n        comments: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        likedBy: true,\n        bookmarkedBy: true,\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === email),\n      bookmarkedByMe: post.bookmarkedBy.some((user) => user.email === email),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async checkIfUserLikedPost(\n    postId: string,\n    email: string,\n  ): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { likedBy: true },\n    });\n\n    return { status: post.likedBy.some((user) => user.email === email) };\n  }\n\n  async checkIfUserBookmarkedPost(\n    postId: string,\n    email: string,\n  ): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    return { status: post.bookmarkedBy.some((user) => user.email === email) };\n  }\n\n  async getMultiplePosts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n    currentUserEmail: string;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    const posts = await this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n            username: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postsWithUserFlags = posts.map((post) => {\n      return {\n        ...post,\n        author: post.author,\n\n        likedByMe: post.likedBy.some(\n          (user) => user.email === params.currentUserEmail,\n        ),\n        bookmarkedByMe: post.bookmarkedBy.some(\n          (user) => user.email === params.currentUserEmail,\n        ),\n      };\n    });\n\n    return postsWithUserFlags;\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n    email: string;\n  }): Promise {\n    const { data, where } = params;\n\n    const post = await this.prisma.post.update({\n      data,\n      where,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === params.email),\n      bookmarkedByMe: post.bookmarkedBy.some(\n        (user) => user.email === params.email,\n      ),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async likePost(postId: string, email: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const status = (await this.checkIfUserLikedPost(postId, email)).status;\n    return this.updatePost({\n      where: { id: postId },\n      data: {\n        likedBy: status ? { disconnect: { email } } : { connect: { email } },\n        likeCount: status ? post.likeCount - 1 : post.likeCount + 1,\n      },\n      email,\n    });\n  }\n\n  async bookmarkPost(postId: string, email: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const status = (await this.checkIfUserBookmarkedPost(postId, email)).status;\n\n    return this.updatePost({\n      where: { id: postId },\n      data: {\n        bookmarkedBy: status\n          ? { disconnect: { email } }\n          : { connect: { email } },\n        bookmarkCount: status ? post.bookmarkCount - 1 : post.bookmarkCount + 1,\n      },\n      email,\n    });\n  }\n\n  async getPostLikes(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { likedBy: true },\n    });\n    return post.likedBy.length;\n  }\n\n  async getPostBookmarks(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    return post.bookmarkedBy.length;\n  }\n\n  async getPostComments(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { comments: true },\n    });\n\n    return post;\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient({\n    omit: {\n      user: {\n        password: true,\n      },\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  prisma = new PrismaClient({\n    omit: {\n      user: {\n        password: true,\n      },\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/entities/room.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Room {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findChatsInRoom\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findRoomByParticipantsOrCreate\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findChatsInRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    findChatsInRoom(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/chats/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findRoomByParticipantsOrCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomByParticipantsOrCreate(user1Id: string, user2Id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-create/')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user1Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user2Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { RoomService } from './room.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\n\n@Controller('rooms')\nexport class RoomController {\n  constructor(private readonly roomService: RoomService) {}\n\n  @Get('/all')\n  findAll(@Request() req: any) {\n    return this.roomService.findAllWithParticipant(req.user.sub);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.roomService.findOne(id);\n  }\n\n  @Get('/find-create/')\n  findRoomByParticipantsOrCreate(\n    @Query('user1') user1Id: string,\n    @Query('user2') user2Id: string,\n  ) {\n    return this.roomService.findRoomByParticipantsOrCreate(user1Id, user2Id);\n  }\n\n  @Get('/chats/:id')\n  findChatsInRoom(@Param('id') id: string) {\n    return this.roomService.findChatsInRoom(id);\n  }\n\n  @Patch('/update/:id')\n  update(@Param('id') id: string, @Body() updateRoomDto: UpdateRoomDto) {\n    return this.roomService.update(id, updateRoomDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.roomService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomGateway.html":{"url":"classes/RoomGateway.html","title":"class - RoomGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                joinRoom\n                            \n                            \n                                    \n                                leaveRoom\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room/room.gateway.ts:25\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('find-one-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(roomData: JoinRoomDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            JoinRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveRoom(roomId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('leave-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeRoom')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateRoom')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { RoomService } from './room.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\nimport { ui_base_url } from 'utils';\nimport { JoinRoomDto } from '../room/dto/update-room.dto';\nimport { Socket, Server } from 'socket.io';\n\n@WebSocketGateway({\n  cors: {\n    namespace: 'room',\n    origin: ui_base_url,\n    transports: ['websocket'],\n  },\n})\nexport class RoomGateway {\n  constructor(private readonly roomService: RoomService) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  @SubscribeMessage('find-one-room')\n  findOne(@MessageBody() id: string) {\n    return this.roomService.findOne(id);\n  }\n\n  @SubscribeMessage('join-room')\n  async joinRoom(\n    @MessageBody() roomData: JoinRoomDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const status = await this.roomService.joinRoom(\n      roomData.roomId,\n      roomData.userId,\n    );\n    if (status) {\n      client.join(roomData.roomId);\n      this.server.to(roomData.roomId).emit('user-joined', client.id);\n      console.log(`User ${client.id} joined room ${roomData.roomId}`);\n      return roomData;\n    }\n  }\n\n  @SubscribeMessage('leave-room')\n  leaveRoom(\n    @MessageBody('roomId') roomId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    // client.leave(roomId);\n    console.log(`User ${client.id} left room ${roomId}`);\n  }\n\n  @SubscribeMessage('updateRoom')\n  update(@MessageBody() updateRoomDto: UpdateRoomDto) {\n    return `${updateRoomDto});`;\n  }\n\n  @SubscribeMessage('removeRoom')\n  remove(@MessageBody() id: number) {\n    return this.roomService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoomService } from './room.service';\nimport { RoomGateway } from './room.gateway';\nimport { RoomController } from './room.controller';\nimport { PrismaService } from 'src/prisma.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [RoomController],\n  providers: [RoomGateway, RoomService, UserService, PrismaService],\n})\nexport class RoomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAllWithParticipant\n                            \n                            \n                                findChatsInRoom\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRoomByParticipantsOrCreate\n                            \n                            \n                                    Async\n                                joinRoom\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(sender: User, receiver: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sender\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                receiver\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithParticipant\n                        \n                    \n                \n            \n            \n                \nfindAllWithParticipant(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findChatsInRoom\n                        \n                    \n                \n            \n            \n                \nfindChatsInRoom(roomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRoomByParticipantsOrCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomByParticipantsOrCreate(user1Id: string, user2Id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user1Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user2Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(roomId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(roomId: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(RoomService.name)\n                    \n                \n                    \n                        \n                                Defined in src/room/room.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, Logger } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\nimport { Room, User } from '@prisma/client';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class RoomService {\n  private readonly logger = new Logger(RoomService.name);\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly userService: UserService,\n  ) {}\n\n  async create(sender: User, receiver: User): Promise {\n    const room = await this.prisma.room.create({\n      data: {\n        participants: {\n          connect: [\n            {\n              id: sender.id,\n            },\n            {\n              id: receiver.id,\n            },\n          ],\n        },\n      },\n    });\n\n    return room;\n  }\n\n  findAllWithParticipant(email: string) {\n    return this.prisma.room.findMany({\n      where: {\n        participants: {\n          some: {\n            email,\n          },\n        },\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n  }\n\n  findChatsInRoom(roomId: string) {\n    return this.prisma.chat.findMany({\n      where: {\n        roomId,\n      },\n      include: {\n        userEncryptedMessages: true,\n      },\n    });\n  }\n\n  async joinRoom(\n    roomId: string,\n    userId: string,\n    // publicKey: ArrayBuffer,\n  ): Promise {\n    try {\n      const user = await this.userService.findUser(userId);\n      const room = await this.findOne(roomId);\n\n      if (!user || !room) {\n        throw new NotFoundException('User or room not found');\n      }\n\n      await this.prisma.room.update({\n        where: { id: roomId },\n        data: {\n          participants: {\n            connect: { id: userId },\n          },\n        },\n      });\n\n      return true;\n    } catch (error: Error | any) {\n      this.logger.error(\n        `Error joining room roomId: ${roomId} userId: ${userId}: ${error.message}`,\n        error.stack,\n      );\n      return false;\n    }\n  }\n\n  async findOne(id: string): Promise {\n    const room = await (this.prisma.room.findUnique({\n      where: {\n        id,\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    }) ?? null);\n    return room;\n  }\n\n  async findRoomByParticipantsOrCreate(\n    user1Id: string,\n    user2Id: string,\n  ): Promise {\n    const user1 = await this.userService.findUser(user1Id);\n    const user2 = await this.userService.findUser(user2Id);\n\n    if (!user1 || !user2) {\n      throw new NotFoundException('User not found');\n    }\n\n    const existingRoom = await this.prisma.room.findFirst({\n      where: {\n        participants: {\n          every: { id: { in: [user1Id, user2Id] } },\n        },\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (existingRoom) {\n      return existingRoom;\n    }\n\n    return this.create(user1, user2);\n  }\n\n  async update(roomId: string, updateRoomDto: UpdateRoomDto) {\n    return updateRoomDto;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} room`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatDto.html":{"url":"classes/UpdateChatDto.html","title":"class - UpdateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/dto/update-chat.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateChatDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatDto } from './create-chat.dto';\n\nexport class UpdateChatDto extends PartialType(CreateChatDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFileDto.html":{"url":"classes/UpdateFileDto.html","title":"class - UpdateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/dto/update-file.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateFileDto } from './create-file.dto';\n\nexport class UpdateFileDto extends PartialType(CreateFileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateHealthDto.html":{"url":"classes/UpdateHealthDto.html","title":"class - UpdateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/update-health.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateHealthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateHealthDto } from './create-health.dto';\n\nexport class UpdateHealthDto extends PartialType(CreateHealthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/update-notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateNotificationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CreatePostDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                longPost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                media\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                mediaTypes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        longPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@ValidateNested({each: true})@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        mediaTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:36\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends CreatePostDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/update-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRoomDto } from './create-room.dto';\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\nexport class JoinRoomDto extends PartialType(CreateRoomDto) {\n  roomId: string;\n  userId: string;\n  publicKey: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredUsers\n                            \n                            \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signupUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredUsers(searchString: string, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/search')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(userData: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, data: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, User as UserModel } from '@prisma/client';\nimport { Public } from 'src/auth/auth.guard';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Public()\n  @Post('register')\n  async signupUser(\n    @Body()\n    userData: CreateUserDto,\n  ): Promise {\n    return this.userService.createUser(userData);\n  }\n\n  @Get('/:id')\n  async getUserById(@Param('id') id: string): Promise {\n    return this.userService.findUser(id);\n  }\n\n  @Post('/search')\n  async getFilteredUsers(\n    @Query('q') searchString: string,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    console.log('SEARCH:::', searchString);\n    return this.userService.getMultipleUsers({\n      skip: Number(skip),\n      take: Number(take),\n      orderBy: {\n        createdAt: 'desc',\n      },\n      where: {\n        OR: [\n          {\n            name: { contains: searchString },\n          },\n          {\n            username: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Put('update/:id')\n  async updateUser(\n    @Param('id') id: string,\n    @Body() data: Partial,\n  ): Promise {\n    return this.userService.updateUser({\n      where: { id: String(id) },\n      data,\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return this.userService.deleteUser({ id: String(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PrismaService } from '../prisma.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, PrismaService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRoomKey.html":{"url":"classes/UserRoomKey.html","title":"class - UserRoomKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRoomKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                encryptionKey\n                            \n                            \n                                id\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        encryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class CreateRoomDto {\n  participants: User[];\n}\n\nexport class UserRoomKey {\n  id: string;\n  userId: string;\n  roomId: string;\n  encryptionKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFedUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                getMultipleUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createFedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFedUser(data: CreateFedUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateFedUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(d: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                d\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(usernameOrEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                usernameOrEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMultipleUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMultipleUsers(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { CreateFedUserDto, CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findUser(usernameOrEmail: string): Promise {\n    const searchTerm = usernameOrEmail.startsWith('@')\n      ? usernameOrEmail\n      : `@${usernameOrEmail}`;\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        OR: [\n          { username: searchTerm },\n          { email: usernameOrEmail },\n          { id: usernameOrEmail },\n        ],\n      },\n    });\n\n    if (!user) throw new NotFoundException('User not found');\n    return user;\n  }\n\n  async getMultipleUsers(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(d: CreateUserDto): Promise {\n    const default_img = process.env.DEFAULT_PROFILE_IMG;\n\n    const data = {\n      ...d,\n      img: d.img ?? default_img,\n      password: await bcrypt.hash(d.password, 10),\n    };\n\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async createFedUser(data: CreateFedUserDto): Promise {\n    return this.prisma.user.create({ data });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: UpdateUserDto;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            interface\n            JwtSubPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/auth.guard.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            class\n            GoogleAuthUser\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            interface\n            AuthUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/chat/dto/create-chat.dto.ts\n            \n            class\n            CreateChatDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/chat/dto/update-chat.dto.ts\n            \n            class\n            UpdateChatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/entities/chat.entity.ts\n            \n            class\n            Chat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/events/chat.event.ts\n            \n            class\n            ChatCreatedEvent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/listeners/chat.listener.ts\n            \n            injectable\n            ChatCreatedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file/dto/update-file.dto.ts\n            \n            class\n            UpdateFileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/entities/file.entity.ts\n            \n            class\n            File\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/file.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            allowedMimeTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            destination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            storage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressAudio\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressFiles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressImage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressVideo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            variable\n            execPromise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/file.service.ts\n            \n            injectable\n            FileService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/health/dto/create-health.dto.ts\n            \n            class\n            CreateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/dto/update-health.dto.ts\n            \n            class\n            UpdateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/entities/health.entity.ts\n            \n            class\n            Health\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/exceptionsLogger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/health/health.service.ts\n            \n            injectable\n            HealthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/entities/notification.entity.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/room/dto/create-room.dto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room/dto/create-room.dto.ts\n            \n            class\n            UserRoomKey\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/room/dto/update-room.dto.ts\n            \n            class\n            JoinRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/room/dto/update-room.dto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/room/entities/room.entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/room/room.gateway.ts\n            \n            class\n            RoomGateway\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateFedUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        utils/index.ts\n            \n            variable\n            api_base_url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        utils/index.ts\n            \n            variable\n            ui_base_url\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/cache-manager : ^2.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/event-emitter : ^2.0.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.4.4\n        \n            @nestjs/platform-socket.io : ^10.4.6\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @nestjs/throttler : ^6.2.1\n        \n            @nestjs/websockets : ^10.4.6\n        \n            @prisma/client : ^5.22.0\n        \n            axios : ^1.7.7\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^5.7.6\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.5\n        \n            helmet : ^7.1.0\n        \n            multer : ^1.4.5-lts.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.33.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            compressAudio   (src/.../file.manager.ts)\n                        \n                        \n                            compressFile   (src/.../file.manager.ts)\n                        \n                        \n                            compressFiles   (src/.../file.manager.ts)\n                        \n                        \n                            compressImage   (src/.../file.manager.ts)\n                        \n                        \n                            compressVideo   (src/.../file.manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/file/file.manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compressAudio\n                        \n                    \n                \n            \n            \n                \ncompressAudio(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressFile\n                        \n                    \n                \n            \n            \n                \ncompressFile(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressFiles\n                        \n                    \n                \n            \n            \n                \ncompressFiles(files: Array)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressImage\n                        \n                    \n                \n            \n            \n                \ncompressImage(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressVideo\n                        \n                    \n                \n            \n            \n                \ncompressVideo(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBree API\nThe fun social app \nWelcome\nCreate an account or login\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nChatModule -->\n\nPrismaService->ChatModule\n\n\n\nFileModule -->\n\nPrismaService->FileModule\n\n\n\nPostModule -->\n\nPrismaService->PostModule\n\n\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nChatModule -->\n\nUserService->ChatModule\n\n\n\nFileModule -->\n\nUserService->FileModule\n\n\n\nPostModule -->\n\nUserService->PostModule\n\n\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nChatModule -->\n\nRoomService->ChatModule\n\n\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\nPostModule -->\n\nFileService->PostModule\n\n\n\n\n\nHealthService\n\nHealthService\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedMimeTypes   (src/.../file.controller.ts)\n                        \n                        \n                            api_base_url   (utils/.../index.ts)\n                        \n                        \n                            destination   (src/.../file.controller.ts)\n                        \n                        \n                            execPromise   (src/.../file.manager.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../auth.guard.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Public   (src/.../auth.guard.ts)\n                        \n                        \n                            storage   (src/.../file.controller.ts)\n                        \n                        \n                            ui_base_url   (utils/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/file/file.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        allowedMimeTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n  'video/mp4',\n  'audio/mpeg',\n  'audio/mp3',\n])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, '../../../../', 'media')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : diskStorage({\n  destination,\n  filename: (req, file, cb) => {\n    const name = file.originalname.split('.')[0];\n    const extension = extname(file.originalname);\n    const randomName = Array(32)\n      .fill(null)\n      .map(() => Math.round(Math.random() * 16).toString(16))\n      .join('');\n    cb(null, `${name}-${randomName}${extension}`);\n  },\n})\n                    \n                \n\n\n        \n    \n\n    utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        api_base_url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.API_BASE_URL || 'http://localhost:3000'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ui_base_url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.UI_BASE_URL || 'https://localhost:4000'\n                    \n                \n\n\n        \n    \n\n    src/file/file.manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        execPromise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(exec)\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secret',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
