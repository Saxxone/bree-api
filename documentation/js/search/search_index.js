var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.297,1,2.784]],["body/controllers/AppController.html",[0,2.145,1,4.607,2,1.734,3,0.176,4,0.176,5,0.09,6,4.522,7,0.709,8,1.762,9,7.318,10,1.881,11,0.015,12,5.215,13,0.884,14,5.215,15,1.37,16,1.14,17,0.559,18,0.96,19,4.332,20,4.522,21,3.539,22,4.522,23,0.176,24,0.286,25,2.574,26,1.666,27,5.215,28,1.481,29,4.522,30,5.215,31,0.012,32,0.012]],["title/modules/AppModule.html",[33,1.297,34,2.784]],["body/modules/AppModule.html",[1,3.924,2,1.555,3,0.109,4,0.109,5,0.056,11,0.015,17,0.625,18,0.595,19,4.119,20,2.802,22,2.802,23,0.109,24,0.177,31,0.009,32,0.009,33,1.827,34,5.624,35,1.448,36,1.448,37,1.595,38,1.595,39,1.448,40,2.712,41,1.595,42,2.802,43,2.802,44,2.802,45,4.408,46,4.408,47,4.408,48,4.408,49,4.408,50,4.408,51,4.408,52,4.119,53,2.308,54,1.595,55,1.519,56,3.231,57,3.645,58,3.231,59,2.802,60,3.231,61,2.802,62,3.231,63,3.231,64,3.231,65,3.231,66,3.231,67,2.802,68,2.802,69,4.676,70,4.676,71,2.802,72,2.892,73,3.339,74,3.231,75,3.231,76,2.519,77,1.998,78,3.231,79,3.231,80,3.231,81,2.307,82,3.231,83,3.231,84,2.307,85,2.307,86,3.231,87,3.231,88,3.231,89,3.231,90,3.231,91,3.231,92,3.231,93,3.231,94,3.231,95,3.231,96,3.231,97,3.231,98,3.231,99,2.802,100,4.676,101,4.676]],["title/injectables/AppService.html",[19,2.411,102,0.948]],["body/injectables/AppService.html",[3,0.201,4,0.201,5,0.103,11,0.015,17,0.477,18,1.099,19,4.329,23,0.201,24,0.328,31,0.013,32,0.013,102,1.702,103,2.557,104,5.178]],["title/controllers/AuthController.html",[0,1.297,105,2.784]],["body/controllers/AuthController.html",[0,1.115,2,1.115,3,0.113,4,0.113,5,0.058,7,0.456,8,1.312,10,2.338,11,0.015,13,1.098,15,1.703,16,1.278,17,0.518,18,0.617,21,3.556,23,0.113,24,0.184,26,1.534,28,1.841,31,0.009,32,0.009,72,2.073,105,3.429,106,2.907,107,1.839,108,3.353,109,3.011,110,4.801,111,4.801,112,4.801,113,4.163,114,4.163,115,3.353,116,3.353,117,3.353,118,1.841,119,1.401,120,1.008,121,1.516,122,1.663,123,3.767,124,3.353,125,3.353,126,3.353,127,4.374,128,3.353,129,3.353,130,3.353,131,3.353,132,4.593,133,3.353,134,3.353,135,3.353,136,3.353,137,3.353,138,1.839,139,2.073,140,3.353,141,3.353,142,3.353,143,3.469,144,2.907,145,2.907,146,2.907,147,3.353,148,2.109,149,1.839,150,3.353,151,1.436,152,2.257,153,6.125,154,3.353,155,3.353,156,2.655,157,3.353,158,3.353,159,3.353,160,3.353,161,3.353,162,3.353,163,3.353,164,4.801,165,3.353,166,3.353,167,3.353,168,3.353,169,3.353,170,3.353,171,2.907]],["title/guards/AuthGuard.html",[72,2.411,172,3.039]],["body/guards/AuthGuard.html",[3,0.116,4,0.116,5,0.059,7,0.467,8,1.334,11,0.015,13,0.963,15,1.283,16,1.094,17,0.543,18,0.899,21,1.883,23,0.191,24,0.188,26,1.56,28,1.614,31,0.009,32,0.009,72,3.019,77,2.122,102,1.187,109,2.229,118,1.614,119,1.228,120,1.017,121,1.329,127,4.42,151,2.091,152,3.074,156,1.406,173,3.431,174,2.451,175,5.367,176,4.882,177,3.431,178,4.854,179,6.063,180,3.431,181,4.233,182,4.825,183,3.431,184,2.975,185,2.294,186,4.233,187,3.729,188,3.431,189,4.429,190,4.429,191,2.271,192,2.122,193,2.451,194,2.975,195,2.975,196,1.883,197,3.486,198,2.122,199,1.883,200,2.743,201,2.451,202,4.429,203,2.675,204,2.433,205,2.271,206,2.975,207,2.975,208,2.975,209,2.675,210,2.975,211,2.837,212,1.836,213,2.122,214,3.805,215,2.975,216,2.271,217,2.451,218,2.975,219,1.994,220,2.975,221,2.975]],["title/modules/AuthModule.html",[33,1.297,45,2.581]],["body/modules/AuthModule.html",[2,1.874,3,0.142,4,0.142,5,0.073,11,0.015,17,0.608,18,0.778,23,0.142,24,0.232,31,0.011,32,0.011,33,2.109,35,1.895,36,1.895,37,2.086,38,2.086,39,1.895,40,3.13,41,2.086,45,5.166,52,4.481,53,2.782,54,2.086,55,1.986,57,4.393,105,4.528,143,4.481,144,3.665,148,2.725,149,2.319,178,4.025,191,3.73,192,2.614,193,3.018,204,1.81,216,2.798,217,3.018,222,3.665,223,4.226,224,3.665,225,2.725,226,4.226,227,4.226,228,4.226,229,3.018,230,4.226,231,4.226,232,4.226,233,4.226,234,4.226,235,4.226]],["title/injectables/AuthService.html",[102,0.948,143,2.411]],["body/injectables/AuthService.html",[3,0.054,4,0.054,5,0.095,7,0.217,8,0.734,11,0.015,13,0.932,15,1.377,16,1.295,17,0.508,18,0.294,23,0.054,24,0.088,26,1.112,28,1.727,31,0.005,32,0.005,55,0.751,102,0.653,103,0.684,109,2.678,113,2.33,114,2.33,118,1.489,119,1.238,120,0.815,121,1.226,122,0.553,127,1.919,143,1.662,145,1.385,146,1.385,148,1.853,151,1.151,152,2.927,156,2.852,178,3.743,185,2.927,190,4.289,191,1.058,192,0.988,193,1.141,198,3.048,199,3.019,200,2.902,204,0.684,211,3.198,212,2.153,213,1.662,214,4.086,216,3.263,217,3.52,219,1.562,225,1.534,229,1.141,236,1.385,237,4.079,238,2.688,239,2.688,240,2.688,241,3.478,242,1.385,243,2.022,244,1.598,245,1.598,246,4.086,247,2.688,248,3.478,249,1.598,250,2.688,251,4.929,252,1.598,253,2.039,254,2.688,255,1.598,256,2.688,257,1.598,258,2.688,259,1.598,260,1.598,261,2.797,262,3.048,263,4.964,264,1.598,265,2.688,266,1.385,267,2.095,268,0.988,269,0.601,270,1.598,271,2.688,272,1.245,273,3.478,274,1.141,275,1.141,276,1.919,277,2.151,278,1.141,279,1.141,280,2.33,281,4.079,282,2.688,283,4.929,284,2.704,285,3.016,286,3.478,287,3.52,288,1.598,289,1.141,290,1.598,291,1.598,292,2.688,293,1.598,294,4.079,295,2.688,296,2.33,297,2.688,298,2.688,299,1.598,300,2.433,301,4.55,302,1.385,303,4.55,304,2.688,305,2.688,306,2.688,307,2.688,308,2.302,309,3.478,310,2.688,311,2.688,312,2.688,313,2.913,314,1.598,315,2.688,316,1.385,317,1.385,318,1.598,319,1.598,320,1.598,321,1.245,322,1.598,323,1.598,324,1.598,325,2.688,326,1.598,327,1.141,328,1.245,329,0.877,330,1.385,331,1.385,332,1.385,333,1.385,334,2.688,335,1.598,336,1.598,337,1.598,338,1.598,339,1.598,340,1.598,341,1.245,342,1.598,343,1.598,344,1.598,345,1.598,346,1.598,347,1.385,348,1.598,349,1.598]],["title/interfaces/AuthUser.html",[196,2.139,268,2.411]],["body/interfaces/AuthUser.html",[3,0.165,4,0.165,5,0.085,7,0.666,11,0.015,16,1.425,17,0.391,23,0.229,24,0.341,31,0.012,32,0.012,119,1.059,120,0.762,132,3.028,196,2.687,198,3.028,253,2.78,261,2.788,262,3.028,268,3.835,269,1.841,287,5.11,350,3.817,351,3.497,352,3.497,353,2.78,354,1.832,355,2.846,356,3.817,357,3.817,358,3.817,359,3.817,360,3.497,361,3.817,362,3.051,363,3.817,364,3.817,365,3.817,366,3.817,367,3.817,368,3.817]],["title/classes/Chat.html",[24,0.214,369,2.581]],["body/classes/Chat.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,369,4.694,370,1.373,371,5.296]],["title/controllers/ChatController.html",[0,1.297,372,2.784]],["body/controllers/ChatController.html",[0,1.222,2,1.222,3,0.124,4,0.124,5,0.064,7,0.5,8,1.4,10,2.42,11,0.015,13,1.137,15,1.763,16,1.305,17,0.51,18,0.677,23,0.124,24,0.202,25,1.814,26,1.174,28,1.812,31,0.01,32,0.01,84,2.624,85,2.624,107,2.016,118,1.812,119,1.379,120,0.993,121,1.492,122,2.558,138,2.811,187,2.016,272,2.865,284,2.016,372,3.659,373,3.187,374,3.187,375,2.811,376,2.529,377,6.38,378,2.529,379,2.529,380,3.187,381,5.123,382,3.675,383,3.391,384,1.814,385,3.659,386,3.675,387,4.442,388,3.675,389,2.273,390,1.814,391,3.659,392,3.675,393,2.016,394,4.814,395,3.994,396,3.675,397,2.624,398,2.273,399,1.814,400,2.624,401,3.187,402,3.428,403,2.865,404,3.675,405,3.675,406,3.187,407,2.273,408,2.865,409,3.187,410,2.624,411,3.675,412,2.865,413,2.624,414,3.675,415,2.865,416,3.675,417,2.624,418,3.675]],["title/classes/ChatCreatedEvent.html",[24,0.214,407,2.411]],["body/classes/ChatCreatedEvent.html",[3,0.165,4,0.165,5,0.085,7,0.666,11,0.015,13,1.212,16,1.382,23,0.165,24,0.269,31,0.012,32,0.012,118,1.391,119,1.596,120,1.173,121,1.145,151,2.097,300,2.417,354,1.832,370,1.101,407,3.835,419,4.246,420,5.11,421,5.578,422,6.202,423,3.835,424,4.897,425,4.897,426,4.897,427,4.897,428,4.897,429,4.897,430,4.897,431,4.897,432,4.897,433,4.897]],["title/injectables/ChatCreatedListener.html",[102,0.948,434,3.039]],["body/injectables/ChatCreatedListener.html",[3,0.175,4,0.175,5,0.09,7,0.707,8,1.759,10,1.875,11,0.015,13,0.881,15,1.366,17,0.559,18,0.957,23,0.175,24,0.285,31,0.012,32,0.012,84,3.712,85,3.712,102,1.565,103,2.226,118,1.476,119,1.124,120,0.809,121,1.215,387,5.582,389,3.215,401,4.507,407,4.521,408,4.052,434,5.019,435,4.507,436,6.438,437,6.438,438,5.198,439,5.198,440,5.198]],["title/classes/ChatGateway.html",[24,0.214,441,2.784]],["body/classes/ChatGateway.html",[3,0.141,4,0.141,5,0.073,7,0.57,8,1.531,10,2.022,11,0.015,13,1.07,15,1.102,17,0.538,23,0.141,24,0.23,25,2.07,26,1.34,28,1.191,31,0.01,32,0.01,109,2.478,118,1.592,119,1.212,120,0.982,121,1.311,123,2.437,151,1.796,156,1.718,200,1.645,289,4.51,354,1.656,369,4.651,370,0.943,400,2.995,402,4.202,403,3.269,441,4.004,442,3.636,443,6.269,444,6.315,445,4.193,446,4.193,447,5.476,448,4.193,449,4.193,450,4.169,451,5.606,452,4.193,453,5.606,454,4.861,455,3.636,456,4.861,457,3.269,458,3.269,459,2.179,460,3.636,461,3.636,462,3.636,463,3.636,464,3.636,465,3.636,466,3.636,467,3.636,468,4.193,469,4.193]],["title/modules/ChatModule.html",[33,1.297,46,2.581]],["body/modules/ChatModule.html",[2,1.957,3,0.152,4,0.152,5,0.078,11,0.015,17,0.6,18,0.831,23,0.152,24,0.248,31,0.011,32,0.011,33,2.177,35,2.022,36,2.022,37,2.227,38,2.227,39,2.022,40,3.232,41,2.227,46,5.216,53,2.904,54,2.227,55,2.12,148,2.775,149,2.475,225,2.775,372,4.676,402,4.289,403,3.517,441,4.202,470,3.912,471,3.912,472,3.835,473,4.512,474,4.512,475,4.512,476,2.475,477,3.912]],["title/injectables/ChatService.html",[102,0.948,402,2.266]],["body/injectables/ChatService.html",[3,0.082,4,0.082,5,0.042,7,0.33,8,1.03,11,0.015,13,1.093,15,1.695,16,0.817,17,0.498,18,0.447,23,0.082,24,0.133,26,1.478,28,1.698,31,0.007,32,0.007,102,0.916,103,1.039,109,2.599,118,1.772,119,1.394,120,0.93,121,1.459,122,2.388,123,1.41,148,2.346,149,1.331,151,1.614,152,2.173,156,2.643,185,2.451,200,2.216,204,1.039,212,0.912,225,1.961,243,2.191,253,2.073,261,1.544,269,0.912,272,1.891,289,1.732,300,1.197,329,2.537,362,2.97,369,3.452,375,2.068,376,1.861,378,1.861,379,1.861,384,1.861,389,1.5,390,1.861,393,2.068,394,4.27,399,1.197,400,2.692,402,2.191,407,1.5,408,1.891,420,1.732,421,2.939,450,3.225,459,1.261,472,3.243,476,1.331,477,2.103,478,2.103,479,3.77,480,1.668,481,5.214,482,1.732,483,2.426,484,3.77,485,3.061,486,2.426,487,3.77,488,2.426,489,3.77,490,2.426,491,3.77,492,2.426,493,2.426,494,2.426,495,2.426,496,2.495,497,4.521,498,2.103,499,2.426,500,3.269,501,2.426,502,2.331,503,2.426,504,2.426,505,2.426,506,3.77,507,2.426,508,2.426,509,4.033,510,2.426,511,2.426,512,2.426,513,3.269,514,2.103,515,3.77,516,3.77,517,2.426,518,2.103,519,2.426,520,1.891,521,2.426,522,2.426,523,2.426,524,2.426,525,2.103,526,2.103,527,3.061,528,1.732,529,1.606,530,2.426]],["title/classes/CreateChatDto.html",[24,0.214,450,2.411]],["body/classes/CreateChatDto.html",[3,0.151,4,0.151,5,0.078,7,0.61,11,0.015,13,1.29,16,1.372,23,0.151,24,0.246,31,0.011,32,0.011,120,1.184,121,1.816,329,3.582,354,1.731,370,1.009,421,5.09,450,3.625,485,4.877,497,5.662,526,5.662,531,6.675,532,3.497,533,6.529,534,3.795,535,6.529,536,4.322,537,4.486,538,4.486,539,4.486,540,4.486,541,4.486,542,4.486,543,4.486,544,4.486]],["title/classes/CreateFedUserDto.html",[24,0.214,277,2.411]],["body/classes/CreateFedUserDto.html",[3,0.134,4,0.134,5,0.069,7,0.541,10,2.568,11,0.015,13,1.206,16,1.41,17,0.317,23,0.182,24,0.338,31,0.01,32,0.01,119,1.426,120,1.107,121,1.542,199,3.619,253,2.957,277,3.344,278,5.201,308,4.366,354,1.597,355,2.31,370,0.894,545,2.839,546,5.72,547,5.72,548,3.862,549,3.975,550,5.777,551,3.975,552,3.447,553,3.975,554,3.975,555,4.689,556,3.975,557,3.975,558,5.329,559,5.426,560,3.447,561,6.426,562,2.839,563,2.31,564,3.447]],["title/classes/CreateFileDto.html",[24,0.214,565,2.784]],["body/classes/CreateFileDto.html",[3,0.176,4,0.176,5,0.09,7,0.709,11,0.015,13,1.24,16,1.354,23,0.176,24,0.286,31,0.012,32,0.012,119,1.514,120,1.138,354,1.905,362,2.892,370,1.173,565,4.607,566,6.521,567,4.065,568,5.002,569,6.073,570,5.46,571,5.215,572,5.215,573,5.215,574,5.215]],["title/classes/CreateHealthDto.html",[24,0.214,575,2.581]],["body/classes/CreateHealthDto.html",[3,0.205,4,0.205,5,0.105,11,0.014,23,0.205,24,0.334,31,0.013,32,0.013,370,1.368,575,4.684,576,5.276,577,4.743]],["title/classes/CreateNotificationDto.html",[24,0.214,578,2.411]],["body/classes/CreateNotificationDto.html",[3,0.205,4,0.205,5,0.105,11,0.014,23,0.205,24,0.334,31,0.013,32,0.013,370,1.368,578,4.376,579,5.276,580,4.743]],["title/classes/CreatePostDto.html",[24,0.214,581,2.411]],["body/classes/CreatePostDto.html",[3,0.135,4,0.135,5,0.069,7,0.545,10,2.573,11,0.015,13,1.209,16,1.312,17,0.434,23,0.135,24,0.298,31,0.01,32,0.01,120,1.184,121,1.779,204,2.963,269,1.506,329,3.385,354,1.605,370,0.901,423,2.477,536,4.084,548,3.882,550,5.561,559,5.211,562,2.86,581,3.361,582,6.327,583,3.122,584,4.406,585,4.809,586,5.35,587,3.473,588,3.473,589,4.005,590,4.713,591,4.005,592,4.005,593,4.005,594,4.005,595,4.809,596,4.005,597,5.435,598,5.435,599,5.435,600,5.435,601,6.17,602,3.473]],["title/classes/CreateRoomDto.html",[24,0.214,603,2.411]],["body/classes/CreateRoomDto.html",[3,0.183,4,0.183,5,0.094,7,0.738,11,0.015,13,0.919,16,1.311,17,0.433,23,0.223,24,0.363,31,0.012,32,0.012,120,0.844,122,1.879,261,2.92,269,2.041,354,1.952,370,1.22,534,3.154,603,4.088,604,5.153,605,3.592,606,5.557,607,5.426,608,3.875,609,3.592,610,4.705]],["title/classes/CreateUserDto.html",[24,0.214,563,2.266]],["body/classes/CreateUserDto.html",[3,0.13,4,0.13,5,0.067,7,0.524,10,2.605,11,0.015,13,1.224,16,1.409,17,0.308,23,0.178,24,0.332,31,0.01,32,0.01,119,1.407,120,1.123,121,1.649,199,3.571,253,2.918,277,2.382,278,5.253,308,4.309,354,1.563,355,3.514,370,0.866,545,2.75,546,5.644,547,5.644,548,3.779,550,5.734,552,3.339,555,4.589,558,5.242,559,5.393,560,3.339,561,6.378,562,2.75,563,3.076,564,3.339,611,3.851,612,3.851,613,3.851,614,3.851,615,3.851,616,3.851,617,3.851,618,3.851]],["title/classes/ExceptionsLoggerFilter.html",[24,0.214,619,3.039]],["body/classes/ExceptionsLoggerFilter.html",[3,0.13,4,0.13,5,0.091,7,0.524,8,1.446,11,0.015,13,0.897,15,1.391,17,0.483,18,0.709,23,0.13,24,0.212,28,1.503,31,0.01,32,0.01,77,2.382,118,1.503,119,1.144,120,0.823,121,1.237,138,3.744,152,2.841,187,2.903,200,2.766,205,3.503,212,1.448,219,3.783,276,3.779,289,2.75,321,3.002,341,4.713,347,5.242,370,0.866,389,2.382,496,4.002,619,4.125,620,3.339,621,6.046,622,5.292,623,5.292,624,6.51,625,6.046,626,6.51,627,3.851,628,5.292,629,5.292,630,3.851,631,3.851,632,3.851,633,3.851,634,3.851,635,5.292,636,3.851,637,5.292,638,3.851,639,3.851,640,3.339,641,3.339,642,3.851,643,5.292,644,3.851,645,3.851,646,3.851,647,3.851,648,3.851,649,4.589,650,3.851,651,3.851,652,3.851,653,5.292,654,5.292,655,3.851]],["title/classes/File.html",[5,0.067,24,0.214]],["body/classes/File.html",[3,0.206,4,0.206,5,0.13,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,656,5.296]],["title/controllers/FileController.html",[0,1.297,657,2.784]],["body/controllers/FileController.html",[0,0.93,2,0.93,3,0.094,4,0.094,5,0.104,7,0.381,8,1.148,10,2.172,11,0.015,13,1.02,15,1.582,16,1.22,17,0.539,18,0.515,23,0.094,24,0.154,25,1.381,26,0.894,28,1.796,31,0.008,32,0.008,76,2.181,77,1.73,107,1.535,109,1.981,118,1.595,119,1.367,120,0.937,121,1.313,122,2.19,123,1.626,138,2.307,139,1.73,156,1.722,187,2.307,200,2.573,204,1.8,212,1.581,274,3.607,275,1.998,276,3.002,284,1.535,327,3.002,328,2.181,329,1.535,332,2.426,333,2.426,375,3.081,376,2.075,378,2.075,379,2.075,383,3.985,384,1.381,385,3.002,390,1.381,391,3.002,393,1.535,395,3.277,397,1.998,398,1.73,399,1.381,412,2.181,413,1.998,415,2.181,417,1.998,568,1.998,657,3.002,658,2.181,659,5.051,660,2.798,661,2.798,662,2.798,663,4.467,664,2.798,665,2.798,666,3.937,667,2.798,668,2.798,669,3.607,670,4.204,671,4.204,672,4.204,673,2.771,674,2.426,675,2.181,676,4.204,677,3.645,678,2.426,679,2.798,680,2.181,681,2.798,682,3.277,683,2.426,684,2.426,685,2.426,686,2.426,687,2.426,688,2.426,689,2.426,690,3.607,691,4.379,692,2.426,693,2.426,694,2.426,695,2.426,696,2.426,697,2.426,698,2.426,699,2.426,700,2.426,701,3.645,702,2.426,703,2.798,704,2.798,705,2.798,706,3.645,707,2.798,708,2.798,709,2.798,710,2.798,711,2.798,712,2.798,713,2.798,714,1.454,715,2.798,716,2.181,717,2.798,718,2.798,719,2.426,720,2.798,721,2.798,722,2.798,723,2.798,724,2.798]],["title/modules/FileModule.html",[33,1.297,47,2.581]],["body/modules/FileModule.html",[2,2.035,3,0.162,4,0.162,5,0.083,11,0.015,17,0.586,18,0.883,23,0.162,24,0.263,31,0.011,32,0.011,33,2.241,35,2.149,36,2.149,37,2.367,38,2.367,39,2.149,40,3.327,41,2.367,47,5.199,53,3.021,54,2.367,55,2.253,148,2.82,149,2.63,225,2.82,229,3.424,657,4.813,673,4.115,674,4.157,725,4.157,726,4.157,727,4.794,728,4.794]],["title/injectables/FileService.html",[102,0.948,673,2.139]],["body/injectables/FileService.html",[3,0.069,4,0.069,5,0.118,7,0.28,8,0.904,10,0.742,11,0.015,13,1.117,15,1.732,16,1.316,17,0.467,18,0.379,23,0.069,24,0.113,26,1.665,28,1.784,31,0.006,32,0.006,81,1.468,102,0.804,103,0.88,109,2.747,118,1.729,119,1.316,120,1.003,121,1.423,122,2.233,123,1.195,148,2.093,149,1.128,151,1.417,152,2.861,156,2.574,185,2.235,200,2.53,211,1.922,212,1.96,213,1.272,219,1.195,225,1.788,242,1.783,243,2.764,246,2.578,253,1.86,261,0.842,269,0.773,275,1.468,276,1.468,280,1.783,284,1.128,300,2.049,313,2.362,317,1.783,330,1.783,331,1.783,354,0.977,375,2.609,376,1.633,378,1.633,379,2.049,384,1.633,390,1.633,393,1.815,399,1.015,476,1.128,480,1.497,496,3.874,509,1.468,527,3.147,528,1.468,529,1.361,568,1.468,569,1.783,570,1.603,663,4.029,666,4.34,669,3.976,673,1.815,675,1.603,690,1.468,729,1.783,730,4.34,731,3.308,732,4.15,733,4.755,734,3.308,735,2.056,736,2.056,737,2.056,738,3.308,739,2.056,740,2.056,741,2.056,742,2.056,743,4.15,744,2.056,745,3.598,746,3.308,747,2.056,748,3.308,749,2.056,750,2.056,751,2.056,752,1.361,753,1.361,754,2.056,755,1.468,756,2.056,757,1.783,758,2.056,759,2.056,760,2.056,761,2.056,762,2.056,763,2.056,764,3.308,765,2.056,766,2.056,767,1.361,768,2.056,769,2.056,770,4.755,771,1.468,772,2.056,773,2.056,774,2.056,775,2.056,776,2.056,777,4.15,778,1.783,779,1.783,780,2.056,781,3.308,782,2.056,783,2.056,784,2.056,785,2.056,786,3.308,787,2.056,788,2.056,789,2.056,790,2.056,791,2.056,792,2.056,793,2.056,794,1.783,795,2.056,796,2.056,797,2.056,798,2.056,799,2.868,800,3.308,801,4.755,802,2.056,803,3.308,804,3.308,805,2.362,806,1.783,807,1.783,808,2.056]],["title/classes/GoogleAuthUser.html",[24,0.214,262,2.411]],["body/classes/GoogleAuthUser.html",[3,0.126,4,0.126,5,0.064,7,0.507,11,0.015,13,1.314,16,1.416,17,0.298,23,0.2,24,0.284,31,0.01,32,0.01,119,1.284,120,1.206,132,2.304,196,2.044,198,3.674,253,2.877,261,2.119,262,3.199,268,2.304,269,1.401,287,2.661,351,5.567,352,2.661,353,1.67,354,1.528,355,2.166,356,4.631,357,4.631,358,4.631,359,4.631,360,3.694,361,4.631,362,3.128,363,4.631,364,4.631,365,4.631,366,4.631,367,4.631,368,4.631,370,0.838,809,3.726,810,3.726,811,3.726,812,3.726,813,3.726,814,3.726,815,3.726,816,3.726,817,3.726,818,3.726,819,3.726,820,3.726,821,3.726,822,3.726]],["title/classes/Health.html",[24,0.214,823,2.581]],["body/classes/Health.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,823,4.694,824,5.296]],["title/controllers/HealthController.html",[0,1.297,825,2.784]],["body/controllers/HealthController.html",[0,1.154,2,1.154,3,0.117,4,0.117,5,0.06,7,0.472,8,1.344,10,2.369,11,0.015,13,1.113,15,1.726,17,0.497,18,0.639,21,3.742,23,0.117,24,0.19,26,2.098,28,1.865,31,0.009,32,0.009,107,1.903,151,1.485,152,3.086,246,2.704,275,2.477,706,4.265,779,3.008,823,3.256,825,3.513,826,3.008,827,6.22,828,6.22,829,6.22,830,6.22,831,6.22,832,3.469,833,3.469,834,3.469,835,3.469,836,3.469,837,3.469,838,3.469,839,3.469,840,3.469,841,3.469,842,4.919,843,4.919,844,6.821,845,4.919,846,4.919,847,4.919,848,2.704,849,3.008,850,3.835,851,3.513,852,3.008,853,3.469,854,3.469,855,4.919,856,3.469,857,3.469,858,3.469,859,3.469,860,6.567,861,4.919,862,3.008,863,3.469,864,3.469,865,3.469,866,3.469,867,3.008,868,3.469,869,3.469,870,3.008,871,3.008,872,3.469,873,3.469,874,3.469,875,3.469,876,3.469,877,3.469,878,3.469,879,3.469,880,3.469,881,3.469]],["title/modules/HealthModule.html",[33,1.297,48,2.581]],["body/modules/HealthModule.html",[2,2.087,3,0.168,4,0.168,5,0.086,11,0.015,17,0.593,18,0.918,23,0.168,24,0.274,31,0.012,32,0.012,33,2.283,35,2.236,36,2.236,37,2.462,38,2.462,39,2.236,40,3.389,41,2.462,48,5.015,53,3.097,54,2.462,55,2.344,57,3.888,825,4.902,848,3.888,882,4.325,883,4.325,884,5.015,885,4.988,886,4.988,887,4.988,888,6.274,889,6.274,890,4.325]],["title/injectables/HealthService.html",[102,0.948,884,2.581]],["body/injectables/HealthService.html",[3,0.137,4,0.137,5,0.07,7,0.553,8,1.5,11,0.015,13,1.178,15,1.925,16,1.229,17,0.439,18,0.749,23,0.137,24,0.223,28,1.975,31,0.01,32,0.01,102,1.335,103,1.741,118,1.891,119,1.439,120,1.036,121,1.557,122,2.481,212,1.529,362,3.384,375,3.653,376,2.711,378,2.711,379,2.711,384,2.711,390,2.711,393,3.013,459,2.113,480,1.981,527,4.603,528,2.904,529,2.691,575,4.743,823,4.603,884,3.635,891,3.525,892,5.491,893,4.066,894,4.066,895,4.066,896,4.066,897,4.066,898,3.525,899,3.525]],["title/classes/JoinRoomDto.html",[24,0.214,900,2.581]],["body/classes/JoinRoomDto.html",[3,0.169,4,0.169,5,0.087,7,0.683,11,0.015,13,1.166,16,1.275,17,0.503,23,0.212,24,0.346,31,0.012,32,0.012,120,1.071,353,3.086,354,1.86,370,1.129,480,1.811,485,4.169,534,4.001,603,3.104,605,3.322,609,4.557,714,2.608,900,4.169,901,5.628,902,5.969,903,5.366,904,4.352,905,5.019,906,4.352,907,2.917,908,2.754,909,3.322,910,2.917]],["title/interfaces/JwtSubPayload.html",[196,2.139,197,2.784]],["body/interfaces/JwtSubPayload.html",[3,0.126,4,0.126,5,0.065,7,0.51,11,0.015,16,1.267,17,0.559,18,0.957,21,2.059,23,0.201,24,0.206,26,1.661,28,1.694,31,0.01,32,0.01,72,2.321,77,2.321,102,1.264,109,1.472,120,1.001,127,4.597,151,1.607,152,2.803,156,1.537,174,2.68,175,4.507,178,4.259,179,5.171,181,3.254,182,4.052,185,1.764,186,3.254,187,3.272,189,4.052,190,4.649,191,2.484,192,2.321,193,2.68,194,3.254,195,3.254,196,2.059,197,4.259,198,3.981,199,3.532,200,2.813,201,2.68,202,4.649,203,2.925,204,2.554,205,2.484,206,3.254,207,3.254,208,3.254,209,2.925,210,3.254,211,3.021,212,1.955,213,2.321,214,4.052,215,3.254,216,2.484,217,2.68,218,3.254,219,2.181,220,3.254,221,3.254,350,2.925,354,1.535]],["title/injectables/LoggingInterceptor.html",[73,2.784,102,0.948]],["body/injectables/LoggingInterceptor.html",[3,0.136,4,0.136,5,0.107,7,0.548,8,1.49,11,0.015,13,0.924,15,1.058,16,0.711,17,0.494,18,0.741,23,0.136,24,0.221,26,1.977,28,1.549,31,0.01,32,0.01,73,3.895,102,1.326,103,1.724,118,1.143,119,0.87,120,0.626,121,0.941,152,2.907,182,5.169,184,3.49,187,3.394,200,2.427,205,2.664,209,3.138,212,2.051,300,1.987,341,3.138,354,1.611,570,3.138,640,5.363,641,5.363,730,5.169,752,2.664,753,2.664,794,3.49,911,3.49,912,5.454,913,5.454,914,6.186,915,6.63,916,4.025,917,6.186,918,5.454,919,4.025,920,5.454,921,3.49,922,5.454,923,4.025,924,4.025,925,5.454,926,4.025,927,5.454,928,4.025,929,6.186,930,4.025,931,4.025,932,4.025,933,4.025,934,4.025,935,4.025,936,2.874,937,4.025,938,4.025,939,4.025,940,4.025,941,4.025,942,4.025]],["title/classes/Notification.html",[24,0.214,943,2.581]],["body/classes/Notification.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,943,4.694,944,5.296]],["title/controllers/NotificationController.html",[0,1.297,945,2.784]],["body/controllers/NotificationController.html",[0,1.139,2,1.139,3,0.115,4,0.115,5,0.059,7,0.466,8,1.332,10,2.45,11,0.015,13,1.151,15,1.785,16,1.284,17,0.522,18,0.63,23,0.115,24,0.188,25,1.69,26,1.094,28,1.856,31,0.009,32,0.009,81,2.445,107,1.879,118,1.756,119,1.468,120,0.962,121,1.446,122,2.352,138,2.674,139,3.51,284,1.879,375,3.393,376,2.406,378,2.406,379,2.802,384,1.69,385,3.481,389,2.118,390,1.69,391,3.481,393,1.879,395,3.8,397,2.445,398,2.118,399,1.69,410,2.445,413,2.445,417,2.445,459,1.78,480,1.758,578,4.2,757,4.921,936,3.481,943,2.266,945,3.481,946,2.969,947,6.184,948,2.969,949,3.424,950,3.424,951,3.424,952,3.424,953,4.874,954,4.874,955,4.874,956,3.424,957,4.728,958,3.424,959,3.51,960,2.969,961,3.8,962,3.424,963,3.424,964,3.424,965,3.424,966,3.424,967,3.424,968,3.424]],["title/modules/NotificationModule.html",[33,1.297,49,2.581]],["body/modules/NotificationModule.html",[2,2.141,3,0.175,4,0.175,5,0.09,11,0.015,17,0.559,18,0.957,23,0.175,24,0.285,31,0.012,32,0.012,33,2.326,35,2.33,36,2.33,37,2.566,38,2.566,39,2.33,40,3.453,41,2.566,49,5.067,53,3.178,54,2.566,55,2.443,945,4.995,959,4.734,960,4.507,969,4.507,970,4.507,971,5.198,972,5.198]],["title/injectables/NotificationService.html",[102,0.948,959,2.411]],["body/injectables/NotificationService.html",[3,0.133,4,0.133,5,0.068,7,0.535,8,1.467,11,0.015,13,1.165,15,1.909,16,1.381,17,0.488,18,0.725,23,0.133,24,0.216,28,1.953,31,0.01,32,0.01,102,1.306,103,1.686,118,1.866,119,1.42,120,1.022,121,1.536,122,2.457,212,1.48,375,3.604,376,2.652,378,2.652,379,2.652,384,2.652,390,2.652,393,2.947,399,1.943,459,2.046,480,1.938,527,4.551,528,2.811,529,2.605,578,4.389,899,3.413,943,4.551,948,4.658,957,4.894,959,3.322,961,4.187,973,3.413,974,3.936,975,3.936,976,3.936,977,3.936,978,3.936]],["title/controllers/PostController.html",[0,1.297,979,2.784]],["body/controllers/PostController.html",[0,0.503,2,0.503,3,0.051,4,0.051,5,0.026,7,0.206,8,0.701,10,2.254,11,0.015,13,1.059,15,1.701,16,1.301,17,0.314,18,0.278,23,0.051,24,0.083,25,0.746,26,0.483,28,1.774,31,0.005,32,0.005,107,0.829,109,2.967,118,1.774,119,1.351,120,1.079,121,1.461,122,2.539,138,2.418,139,3.322,156,2.559,185,3.377,187,3.428,200,1.006,204,1.887,253,1.498,261,1.612,269,0.569,274,1.08,284,0.829,300,0.746,362,2.741,383,4.874,398,2.066,410,3.646,412,4.767,420,1.08,423,2.962,459,0.786,536,1.001,581,3.157,584,1.832,716,1.179,767,1.001,771,1.832,979,1.832,980,1.311,981,2.897,982,2.897,983,3.341,984,3.341,985,3.341,986,2.897,987,2,988,3.341,989,3.341,990,3.341,991,3.341,992,3.341,993,2.897,994,3.341,995,1.512,996,2.565,997,1.512,998,1.512,999,6.366,1000,3.936,1001,2.565,1002,1.512,1003,1.512,1004,2.565,1005,1.512,1006,1.512,1007,3.936,1008,2.565,1009,1.512,1010,1.512,1011,1.512,1012,1.311,1013,2.224,1014,1.512,1015,1.512,1016,2.565,1017,1.512,1018,1.512,1019,3.341,1020,2.224,1021,1.512,1022,3.821,1023,1.512,1024,2.224,1025,1.512,1026,1.512,1027,4.367,1028,4.047,1029,2.565,1030,1.512,1031,3.936,1032,3.936,1033,3.936,1034,3.936,1035,3.936,1036,1.512,1037,2.565,1038,1.512,1039,2.604,1040,2.565,1041,2.565,1042,1.512,1043,2.565,1044,1.512,1045,1.512,1046,2.565,1047,1.512,1048,1.311,1049,2.604,1050,2.066,1051,1.311,1052,1.512,1053,1.179,1054,1.512,1055,2.565,1056,3.936,1057,3.936,1058,1.512,1059,1.512,1060,2.224,1061,3.413,1062,1.512,1063,1.512,1064,1.512,1065,3.936,1066,1.512,1067,3.413,1068,1.512,1069,2.565,1070,1.512,1071,2.224,1072,2.224,1073,1.698,1074,2,1075,2.224,1076,2.224,1077,1.179,1078,1.512,1079,1.311,1080,2.565,1081,1.512,1082,1.512,1083,1.512,1084,1.512,1085,2.565,1086,1.512,1087,1.512,1088,1.311,1089,1.512]],["title/modules/PostModule.html",[33,1.297,50,2.581]],["body/modules/PostModule.html",[2,1.986,3,0.155,4,0.155,5,0.08,11,0.015,17,0.593,18,0.85,23,0.155,24,0.253,31,0.011,32,0.011,33,2.201,35,2.069,36,2.069,37,2.278,38,2.278,39,2.069,40,3.268,41,2.278,50,5.233,53,2.948,54,2.278,55,2.169,148,2.792,149,2.532,225,2.792,476,2.532,673,4.074,979,4.727,1050,4.592,1051,4.002,1090,4.002,1091,4.002,1092,4.615,1093,4.615,1094,4.002]],["title/injectables/PostService.html",[102,0.948,1050,2.411]],["body/injectables/PostService.html",[3,0.035,4,0.035,5,0.018,7,0.251,8,0.504,11,0.015,13,0.989,15,1.503,16,1.324,17,0.277,18,0.191,23,0.035,24,0.057,26,0.589,28,1.689,31,0.003,32,0.003,102,0.448,103,0.443,109,2.861,118,1.658,119,1.363,120,0.968,121,1.365,122,2.232,139,4.099,151,0.79,152,0.867,156,2.667,185,3.207,189,0.807,199,0.568,200,2.677,204,3.123,211,2.428,212,1.571,213,0.64,219,0.602,225,1.139,243,1.45,253,3.238,261,1.711,269,0.389,285,4.27,300,2.527,308,2.3,313,1.317,321,0.807,329,1.369,360,1.782,362,0.827,406,0.898,423,1.873,459,0.538,476,0.568,480,0.373,482,0.739,496,2.952,509,1.782,520,4.126,536,0.685,581,1.873,584,2.751,585,1.438,595,0.807,602,3.34,669,0.739,673,2.292,745,0.898,755,0.739,767,2.3,799,1.599,805,2.751,806,0.898,807,0.898,871,1.599,936,2.163,981,2.163,982,1.599,986,2.163,987,1.438,993,1.599,1027,1.782,1028,1.651,1039,2.361,1050,1.141,1053,0.807,1061,2.626,1067,0.898,1073,1.651,1077,3.839,1094,0.898,1095,0.898,1096,2.495,1097,2.495,1098,1.845,1099,1.845,1100,1.845,1101,1.845,1102,1.845,1103,1.845,1104,2.495,1105,1.845,1106,1.845,1107,1.035,1108,1.845,1109,1.035,1110,6.681,1111,1.035,1112,1.035,1113,1.035,1114,1.035,1115,1.035,1116,1.035,1117,1.845,1118,3.474,1119,1.035,1120,1.845,1121,1.035,1122,1.845,1123,1.035,1124,1.845,1125,1.035,1126,1.845,1127,1.035,1128,1.845,1129,1.035,1130,1.845,1131,1.035,1132,1.035,1133,1.035,1134,1.845,1135,1.035,1136,1.845,1137,1.035,1138,1.845,1139,1.035,1140,1.845,1141,1.035,1142,1.035,1143,1.845,1144,2.495,1145,2.495,1146,1.035,1147,1.845,1148,1.035,1149,1.035,1150,1.035,1151,2.495,1152,1.035,1153,1.035,1154,1.035,1155,1.845,1156,1.035,1157,1.035,1158,1.035,1159,1.035,1160,1.845,1161,1.845,1162,1.035,1163,1.035,1164,1.035,1165,1.035,1166,1.035,1167,1.035,1168,1.035,1169,1.035,1170,1.035,1171,4.459,1172,4.925,1173,4.925,1174,1.845,1175,1.845,1176,1.035,1177,1.035,1178,1.035,1179,1.035,1180,1.035,1181,1.035,1182,1.035,1183,4.925,1184,1.035,1185,1.035,1186,1.035,1187,2.495,1188,1.035,1189,1.035,1190,2.495,1191,3.853,1192,3.028,1193,3.028,1194,3.028,1195,3.028,1196,2.495,1197,1.845,1198,2.163,1199,1.035,1200,1.035,1201,1.035,1202,1.845,1203,1.035,1204,1.035,1205,1.845,1206,1.845,1207,1.035,1208,1.035,1209,1.845,1210,1.845,1211,1.438,1212,1.035,1213,1.845,1214,1.845,1215,1.035,1216,1.845,1217,1.035,1218,1.035,1219,1.845,1220,1.035,1221,1.035,1222,1.035]],["title/injectables/PrismaService.html",[102,0.948,225,1.466]],["body/injectables/PrismaService.html",[3,0.162,4,0.162,5,0.083,7,0.656,8,1.678,11,0.015,13,1.041,15,1.267,17,0.491,18,0.888,23,0.162,24,0.265,31,0.011,32,0.011,102,1.493,103,2.066,109,2.651,156,1.976,204,2.631,205,3.193,212,2.31,225,2.31,243,3.928,261,2.516,269,1.814,353,2.754,354,1.814,355,3.57,752,3.193,753,3.193,1223,4.182,1224,7.348,1225,7.512,1226,4.823,1227,6.142,1228,4.823,1229,4.823]],["title/classes/Room.html",[24,0.214,502,2.411]],["body/classes/Room.html",[3,0.206,4,0.206,5,0.106,11,0.014,23,0.206,24,0.335,31,0.013,32,0.013,370,1.373,502,4.386,1230,5.296]],["title/controllers/RoomController.html",[0,1.297,1231,2.784]],["body/controllers/RoomController.html",[0,1.136,2,1.136,3,0.115,4,0.115,5,0.059,7,0.465,8,1.33,10,2.448,11,0.015,13,1.15,15,1.783,16,1.381,17,0.453,18,0.629,23,0.115,24,0.188,25,1.687,26,1.092,28,1.928,31,0.009,32,0.009,107,1.875,118,1.928,119,1.467,120,1.056,121,1.587,122,2.472,138,2.67,187,1.875,284,1.875,375,2.67,376,2.403,378,2.403,379,2.403,380,2.963,383,3.221,384,1.687,385,3.476,390,1.687,391,3.476,393,1.875,397,2.44,398,2.113,399,1.687,409,2.963,413,2.44,415,2.664,417,2.44,472,2.946,480,1.756,909,2.262,910,4.149,1049,2.664,1231,3.476,1232,2.963,1233,3.417,1234,4.22,1235,4.915,1236,4.867,1237,3.417,1238,3.417,1239,4.867,1240,3.417,1241,3.417,1242,2.963,1243,5.356,1244,4.867,1245,3.417,1246,4.22,1247,3.417,1248,4.867,1249,3.417,1250,2.664,1251,3.417,1252,3.417,1253,2.963,1254,3.417,1255,3.417,1256,3.417,1257,3.417,1258,3.417,1259,3.417,1260,3.417]],["title/classes/RoomGateway.html",[24,0.214,1261,2.784]],["body/classes/RoomGateway.html",[3,0.101,4,0.101,5,0.052,7,0.409,8,1.212,10,2.343,11,0.015,13,1.138,15,1.631,16,1.187,17,0.519,23,0.101,24,0.165,25,1.485,26,0.961,28,1.653,31,0.008,32,0.008,109,2.068,118,1.844,119,1.404,120,1.045,121,1.518,122,2.015,123,1.748,151,1.288,156,1.232,200,1.18,354,1.31,362,2.363,370,0.676,376,2.19,378,2.19,379,2.19,384,1.485,389,1.86,390,1.485,399,1.485,443,5.631,447,4.571,454,3.847,455,2.608,456,3.847,457,2.344,458,2.344,460,2.608,461,2.608,462,2.608,463,2.608,464,2.608,465,4.571,466,5.631,467,5.824,472,3.375,496,2.937,502,4.353,534,3.064,851,3.168,852,2.608,900,3.852,909,2.937,910,3.904,1250,2.344,1253,2.608,1261,3.168,1262,2.608,1263,4.571,1264,5.272,1265,3.007,1266,3.007,1267,3.007,1268,4.436,1269,4.436,1270,3.007,1271,3.007,1272,4.436,1273,3.007,1274,5.272,1275,3.007,1276,4.436,1277,3.007,1278,4.436,1279,3.007,1280,3.007,1281,4.436,1282,3.007,1283,3.007,1284,3.007,1285,3.007,1286,4.436,1287,3.007,1288,3.007,1289,3.007,1290,4.436,1291,5.272,1292,4.436,1293,3.007,1294,3.007,1295,3.007,1296,3.007,1297,3.007,1298,3.007]],["title/modules/RoomModule.html",[33,1.297,51,2.581]],["body/modules/RoomModule.html",[2,2.012,3,0.159,4,0.159,5,0.081,11,0.015,17,0.596,18,0.867,23,0.159,24,0.259,31,0.011,32,0.011,33,2.223,35,2.111,36,2.111,37,2.325,38,2.325,39,2.111,40,3.299,41,2.325,51,5.184,53,2.986,54,2.325,55,2.214,148,2.807,149,2.584,225,2.807,229,3.364,472,3.88,1231,4.773,1250,3.672,1261,4.32,1299,4.71,1300,4.71,1301,4.71,1302,4.71,1303,4.71]],["title/injectables/RoomService.html",[102,0.948,472,2.026]],["body/injectables/RoomService.html",[3,0.07,4,0.07,5,0.036,7,0.283,8,0.912,11,0.015,13,1.097,15,1.606,16,1.331,17,0.419,18,0.383,23,0.07,24,0.114,26,1.675,28,1.838,31,0.006,32,0.006,102,0.812,103,0.891,109,2.754,118,1.791,119,1.363,120,0.981,121,1.475,122,2.184,123,1.209,148,2.211,151,1.43,152,2.463,156,2.504,185,2.873,200,2.307,204,2.245,211,1.94,212,1.8,213,1.286,219,1.209,225,1.8,243,1.94,253,1.497,261,2.584,266,1.803,269,0.782,300,1.648,313,2.987,354,0.986,362,1.875,374,3.626,376,1.648,378,1.648,379,1.648,384,1.648,390,1.648,399,1.027,472,1.735,476,1.141,480,1.204,482,1.485,485,1.377,498,1.803,500,3.626,502,4.002,509,2.384,513,1.803,514,1.803,518,1.803,520,3.732,525,1.803,527,1.377,529,1.377,534,3.553,606,4.584,609,3.704,716,1.621,730,3.732,752,1.377,753,1.377,755,1.485,767,2.768,771,2.987,805,2.384,903,1.621,909,1.377,910,3.553,1028,2.768,1073,2.768,1074,3.26,1211,2.603,1234,2.895,1235,3.626,1242,1.803,1243,4.151,1246,3.626,1263,3.626,1304,1.803,1305,3.339,1306,3.339,1307,3.339,1308,2.08,1309,3.339,1310,2.08,1311,3.339,1312,2.08,1313,2.08,1314,2.08,1315,2.08,1316,2.08,1317,2.08,1318,3.339,1319,2.08,1320,3.339,1321,2.08,1322,2.08,1323,2.08,1324,2.08,1325,2.08,1326,2.08,1327,2.08,1328,2.08,1329,2.08,1330,2.08,1331,2.08,1332,3.339,1333,2.08,1334,4.182,1335,2.08,1336,4.182,1337,2.08,1338,2.08]],["title/classes/SignInDto.html",[24,0.214,132,2.411]],["body/classes/SignInDto.html",[3,0.162,4,0.162,5,0.083,7,0.652,11,0.015,13,1.037,16,1.421,17,0.383,23,0.227,24,0.336,31,0.011,32,0.011,119,1.036,120,0.952,132,3.784,196,2.63,198,2.965,253,3.183,261,2.507,262,2.965,268,2.965,269,1.803,287,3.424,351,4.813,352,3.424,353,2.149,354,1.807,355,3.917,356,3.737,357,3.737,358,3.737,359,3.737,360,3.424,361,3.737,362,3.021,363,3.737,364,3.737,365,3.737,366,3.737,367,3.737,368,3.737,370,1.078,1339,4.794,1340,4.794]],["title/classes/UpdateChatDto.html",[24,0.214,394,2.581]],["body/classes/UpdateChatDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.064,370,1.29,394,4.524,400,4.097,450,3.548,480,2.069,532,4.472,714,2.981,907,3.334,908,3.147,1341,4.974,1342,6.835]],["title/classes/UpdateFileDto.html",[24,0.214,663,2.581]],["body/classes/UpdateFileDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.064,370,1.29,480,2.069,565,4.097,567,4.472,663,4.524,675,4.472,714,2.981,907,3.334,908,3.147,1343,4.974,1344,6.835]],["title/classes/UpdateHealthDto.html",[24,0.214,1345,3.039]],["body/classes/UpdateHealthDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.064,370,1.29,480,2.069,575,3.797,577,4.472,714,2.981,898,4.974,907,3.334,908,3.147,1345,5.328,1346,4.974,1347,6.835]],["title/classes/UpdateNotificationDto.html",[24,0.214,957,2.581]],["body/classes/UpdateNotificationDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,353,3.064,370,1.29,480,2.069,578,3.548,580,4.472,714,2.981,907,3.334,908,3.147,957,4.524,961,4.472,1348,4.974,1349,6.835]],["title/classes/UpdatePostDto.html",[24,0.214,1350,3.039]],["body/classes/UpdatePostDto.html",[3,0.149,4,0.149,5,0.076,7,0.602,10,2.648,11,0.015,13,1.244,16,1.217,17,0.353,23,0.149,24,0.243,31,0.011,32,0.011,120,1.194,121,1.812,204,2.488,329,3.187,353,2.604,354,1.716,370,0.995,423,2.736,480,1.596,536,3.845,548,4.148,559,3.16,581,4.748,583,3.449,584,4.148,585,4.528,586,5.037,587,3.836,588,3.836,590,5.037,595,3.449,1053,3.449,1350,4.528,1351,3.836,1352,7.34,1353,4.424,1354,4.424,1355,4.424,1356,4.424,1357,4.424,1358,4.424]],["title/classes/UpdateRoomDto.html",[24,0.214,910,2.266]],["body/classes/UpdateRoomDto.html",[3,0.185,4,0.185,5,0.095,11,0.015,16,1.175,17,0.531,23,0.224,24,0.365,31,0.012,32,0.012,353,3.21,370,1.233,480,1.978,485,3.629,534,3.186,603,3.39,605,3.629,609,3.629,714,2.849,900,3.629,901,4.273,902,6.209,903,4.273,907,3.186,908,3.008,909,3.629,910,3.866]],["title/classes/UpdateUserDto.html",[24,0.214,1359,2.784]],["body/classes/UpdateUserDto.html",[3,0.193,4,0.193,5,0.099,11,0.015,17,0.546,23,0.193,24,0.315,31,0.013,32,0.013,279,4.097,353,3.064,370,1.29,480,2.069,545,4.097,563,3.334,714,2.981,907,3.334,908,3.147,1359,4.881,1360,4.974,1361,6.835]],["title/controllers/UserController.html",[0,1.297,1362,2.784]],["body/controllers/UserController.html",[0,1.002,2,1.002,3,0.101,4,0.101,5,0.052,7,0.41,8,1.214,10,2.241,11,0.015,13,1.052,15,1.632,16,1.298,17,0.496,18,0.555,21,2.437,23,0.101,24,0.165,25,1.487,26,0.963,28,1.764,31,0.008,32,0.008,107,1.653,109,2.96,118,1.764,119,1.405,120,0.966,121,1.452,122,2.388,138,2.895,139,1.863,148,1.985,171,2.612,185,3.366,199,1.653,261,2.162,269,1.133,279,2.152,284,1.653,300,2.875,316,2.612,362,2.913,398,1.863,410,2.152,459,1.566,563,3.385,771,2.152,849,2.612,987,3.463,1012,2.612,1013,3.852,1020,3.852,1022,3.852,1024,3.852,1027,4.16,1028,3.855,1048,2.612,1049,2.349,1060,3.852,1071,2.612,1072,2.612,1073,1.994,1074,2.349,1075,2.612,1076,2.612,1079,2.612,1088,2.612,1362,3.173,1363,2.612,1364,5.277,1365,4.443,1366,5.277,1367,4.576,1368,3.013,1369,3.013,1370,3.013,1371,6.211,1372,3.013,1373,3.013,1374,3.013,1375,3.013,1376,3.013,1377,4.443,1378,3.013,1379,5.277,1380,4.443,1381,3.013,1382,2.612,1383,3.013,1384,3.013,1385,3.013,1386,3.013,1387,3.013,1388,3.013,1389,3.013,1390,4.443,1391,3.013]],["title/modules/UserModule.html",[33,1.297,52,2.411]],["body/modules/UserModule.html",[2,2.087,3,0.168,4,0.168,5,0.086,11,0.015,17,0.575,18,0.918,23,0.168,24,0.274,31,0.012,32,0.012,33,2.283,35,2.236,36,2.236,37,2.462,38,2.462,39,2.236,40,3.389,41,2.462,52,4.811,53,3.097,54,2.462,55,2.344,148,2.849,225,2.849,476,2.737,1362,4.902,1382,4.325,1392,4.988,1393,4.988,1394,4.988,1395,4.988]],["title/classes/UserRoomKey.html",[24,0.214,608,2.784]],["body/classes/UserRoomKey.html",[3,0.169,4,0.169,5,0.087,7,0.683,11,0.015,13,1.223,16,1.376,17,0.401,23,0.212,24,0.346,31,0.012,32,0.012,120,1.123,122,2.384,261,2.58,269,1.887,354,1.86,370,1.129,534,4.001,603,3.104,604,5.797,605,3.322,606,3.913,608,4.498,609,4.557,610,5.969,904,4.352,906,4.352,1396,5.019,1397,5.019]],["title/injectables/UserService.html",[102,0.948,148,1.466]],["body/injectables/UserService.html",[3,0.095,4,0.095,5,0.049,7,0.382,8,1.151,11,0.015,13,1.113,15,1.664,16,0.894,17,0.506,18,0.517,23,0.095,24,0.154,25,1.386,26,0.897,28,1.798,31,0.008,32,0.008,99,2.434,102,1.025,103,1.202,109,2.983,118,1.865,119,1.42,120,1.112,121,1.536,122,0.972,148,1.585,151,1.202,156,1.727,185,3.403,199,1.54,200,2.484,211,1.632,212,1.056,225,2.115,243,2.942,253,1.259,261,2.305,263,3.655,267,3.286,269,1.056,277,3.479,279,3.01,296,2.434,300,3.242,302,2.434,308,1.858,355,1.632,362,1.89,399,1.386,423,3.479,459,1.459,476,1.54,482,2.005,563,3.27,755,2.005,805,2.005,1027,3.614,1028,3.35,1039,4.385,1073,3.35,1198,4.388,1211,2.188,1359,3.01,1367,3.655,1398,2.434,1399,4.215,1400,4.215,1401,4.215,1402,4.215,1403,4.215,1404,2.807,1405,4.215,1406,2.807,1407,4.215,1408,2.807,1409,4.215,1410,4.215,1411,6.029,1412,2.807,1413,4.215,1414,2.807,1415,6.029,1416,4.215,1417,2.807,1418,4.215,1419,2.807,1420,4.215,1421,2.807,1422,2.807,1423,2.807,1424,2.807,1425,2.807,1426,2.807,1427,4.215,1428,2.807,1429,2.807]],["title/coverage.html",[1430,4.627]],["body/coverage.html",[0,2.181,1,1.677,5,0.064,6,2.036,11,0.015,19,1.452,21,1.288,24,0.425,31,0.007,32,0.007,39,1.052,72,1.452,73,1.677,102,1.689,104,2.036,105,1.677,106,2.036,120,0.365,132,1.452,143,1.452,148,0.883,172,1.83,174,3.658,192,1.452,196,2.016,197,1.677,201,1.677,212,0.883,225,0.883,236,2.036,262,1.452,268,1.452,277,1.452,278,2.624,327,1.677,351,3.234,352,3.234,369,1.554,371,2.036,372,1.677,373,2.036,394,1.554,402,1.364,407,1.452,419,2.036,434,1.83,435,2.036,441,1.677,442,2.036,450,1.452,472,1.22,478,2.036,502,1.452,531,2.036,532,2.865,545,3.234,563,1.364,565,1.677,566,2.036,567,2.865,575,1.554,576,2.036,577,2.865,578,1.452,579,2.036,580,2.865,581,1.452,582,2.036,583,2.865,603,1.452,604,2.865,605,3.391,608,1.677,619,1.83,620,2.036,656,2.036,657,1.677,658,3.993,663,1.554,673,1.288,680,1.83,682,1.83,690,1.677,729,2.036,823,1.554,824,2.036,825,1.677,826,2.036,850,1.83,851,1.677,884,1.554,891,2.036,900,1.554,901,2.865,910,1.364,911,2.036,936,5.812,943,1.554,944,2.036,945,1.677,946,2.036,957,1.554,959,1.452,973,2.036,979,1.677,980,2.036,1050,1.452,1095,2.036,1223,2.036,1230,2.036,1231,1.677,1232,2.036,1261,1.677,1262,2.036,1304,2.036,1341,2.036,1343,2.036,1345,1.83,1346,2.036,1348,2.036,1350,1.83,1351,2.036,1359,1.677,1360,2.036,1362,1.677,1363,2.036,1398,2.036,1430,2.036,1431,2.348,1432,2.348,1433,2.348,1434,5.123,1435,5.561,1436,7.759,1437,6.164,1438,4.528,1439,6.559,1440,4.528,1441,2.036,1442,2.348,1443,4.528,1444,4.597,1445,5.898,1446,2.036,1447,2.036,1448,2.036,1449,2.036,1450,2.036,1451,2.348,1452,2.036,1453,5.561,1454,2.348,1455,2.348,1456,4.528,1457,2.348,1458,3.186,1459,2.348,1460,2.348]],["title/dependencies.html",[36,2.104,1461,2.817]],["body/dependencies.html",[11,0.015,18,0.865,24,0.332,31,0.011,32,0.011,36,2.105,59,4.072,61,4.072,67,4.072,68,5.236,71,4.072,76,4.707,77,2.904,81,3.354,84,3.354,85,3.354,191,3.109,267,3.661,269,1.766,457,3.661,458,3.661,562,3.354,678,4.072,714,2.441,848,3.661,890,4.072,908,2.577,921,4.072,1462,4.696,1463,4.696,1464,6.038,1465,4.696,1466,4.696,1467,4.696,1468,4.696,1469,6.038,1470,4.696,1471,4.696,1472,4.696,1473,4.696,1474,4.696,1475,4.696,1476,4.696,1477,4.696,1478,4.696,1479,4.696,1480,4.696,1481,4.696,1482,4.696,1483,4.696,1484,4.696,1485,4.696,1486,4.696,1487,4.696,1488,4.696,1489,4.696,1490,4.696,1491,4.696,1492,4.696,1493,4.696]],["title/miscellaneous/functions.html",[1494,2.32,1495,4.07]],["body/miscellaneous/functions.html",[5,0.126,7,0.698,11,0.015,15,1.348,31,0.012,32,0.012,39,3.117,118,2.126,119,1.618,120,0.798,121,1.75,185,2.412,666,4.979,669,3.665,680,4.979,719,4.449,1444,4,1446,5.538,1447,5.538,1448,5.538,1449,5.538,1452,4.449,1494,3.665,1495,4.449,1496,5.132,1497,6.49,1498,5.132,1499,5.132,1500,5.132,1501,5.132]],["title/index.html",[7,0.442,1502,3.248,1503,3.248]],["body/index.html",[11,0.013,29,5.316,31,0.013,32,0.013,480,2.212,862,5.316,867,5.316,870,5.316,1504,6.131,1505,6.131,1506,6.131,1507,6.131]],["title/modules.html",[35,2.392]],["body/modules.html",[11,0.012,31,0.012,32,0.012,34,3.836,35,2.408,45,3.556,46,3.556,47,3.556,48,3.556,49,3.556,50,3.556,51,3.556,52,3.322,1508,7.948,1509,7.948,1510,7.948,1511,7.948]],["title/overview.html",[1512,4.627]],["body/overview.html",[2,1.176,11,0.015,19,3.573,31,0.009,32,0.009,33,1.176,34,5.645,35,1.586,36,1.586,37,1.746,38,1.746,39,1.586,40,1.746,41,1.746,42,3.067,43,3.067,44,3.067,45,4.968,46,4.968,47,4.848,48,4.379,49,4.379,50,4.968,51,4.848,52,4.455,53,2.462,54,1.746,55,1.662,103,1.515,143,3.573,148,2.709,172,2.757,222,3.067,224,3.067,225,2.709,350,2.757,370,0.795,402,3.358,470,3.067,471,3.067,472,3.261,673,3.442,725,3.067,726,3.067,767,2.341,778,3.067,882,3.067,883,3.067,884,3.824,959,3.573,969,3.067,970,3.067,1050,3.573,1090,3.067,1091,3.067,1512,3.067,1513,4.988,1514,3.537,1515,3.537]],["title/properties.html",[354,1.386,1461,2.817]],["body/properties.html",[11,0.015,31,0.013,32,0.013,354,1.797,420,4.345,1077,4.743,1516,6.085,1517,6.085,1518,6.085,1519,6.085]],["title/miscellaneous/variables.html",[1494,2.32,1520,4.07]],["body/miscellaneous/variables.html",[5,0.073,7,0.573,11,0.015,16,0.745,21,3.087,31,0.01,32,0.01,119,1.216,120,0.875,174,3.01,192,3.479,200,2.484,201,4.018,202,3.286,203,3.286,204,1.805,212,1.585,216,3.724,274,3.01,327,4.522,328,3.286,329,2.313,383,2.79,568,3.01,649,3.655,658,3.286,677,3.655,682,4.385,683,3.655,684,3.655,685,3.655,686,3.655,687,3.655,688,3.655,689,3.655,690,4.018,691,3.655,692,3.655,693,3.655,694,3.655,695,3.655,696,3.655,697,3.655,698,3.655,699,3.655,700,3.655,701,3.655,702,3.655,752,5.034,753,5.034,850,4.385,851,4.018,1441,3.655,1444,3.286,1450,4.878,1458,3.655,1494,3.01,1497,3.655,1520,3.655,1521,6.332,1522,5.626,1523,5.626,1524,4.215,1525,4.215,1526,4.215,1527,4.215,1528,4.215,1529,4.215]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":936,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1517,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1481,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1490,"title":{},"body":{"dependencies.html":{}}}],["0.33.5",{"_index":1493,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":878,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1480,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1457,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1451,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1454,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1442,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1455,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1434,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1438,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1443,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1437,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1453,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1456,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1440,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":767,"title":{},"body":{"injectables/FileService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"overview.html":{}}}],["1.4.5",{"_index":1486,"title":{},"body":{"dependencies.html":{}}}],["1.7.5",{"_index":1483,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["10.4.4",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["10.4.6",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":706,"title":{},"body":{"controllers/FileController.html":{},"controllers/HealthController.html":{}}}],["11pm",{"_index":763,"title":{},"body":{"injectables/FileService.html":{}}}],["12",{"_index":1514,"title":{},"body":{"overview.html":{}}}],["150",{"_index":881,"title":{},"body":{"controllers/HealthController.html":{}}}],["16).tostring(16",{"_index":700,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":778,"title":{},"body":{"injectables/FileService.html":{},"overview.html":{}}}],["2.0.4",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":707,"title":{},"body":{"controllers/FileController.html":{}}}],["200",{"_index":873,"title":{},"body":{"controllers/HealthController.html":{}}}],["20mb",{"_index":708,"title":{},"body":{"controllers/FileController.html":{}}}],["28",{"_index":1515,"title":{},"body":{"overview.html":{}}}],["3.0.3",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":709,"title":{},"body":{"controllers/FileController.html":{}}}],["4.1.1",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["5.22.0",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["5.7.6",{"_index":1478,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":636,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["6.2.1",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["6000",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["60s",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.1.0",{"_index":1485,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1491,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1513,"title":{},"body":{"overview.html":{}}}],["9\\s]/g",{"_index":1084,"title":{},"body":{"controllers/PostController.html":{}}}],["access_token",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["account",{"_index":1507,"title":{},"body":{"index.html":{}}}],["action",{"_index":527,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{},"injectables/RoomService.html":{}}}],["adds",{"_index":899,"title":{},"body":{"injectables/HealthService.html":{},"injectables/NotificationService.html":{}}}],["allow",{"_index":550,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["allow()@isstring",{"_index":548,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["allow()@isstring({each",{"_index":590,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["allow()@validatenested({each",{"_index":587,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["allowed",{"_index":713,"title":{},"body":{"controllers/FileController.html":{}}}],["allowedmimetypes",{"_index":682,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["allowedmimetypes.has(file.mimetype",{"_index":711,"title":{},"body":{"controllers/FileController.html":{}}}],["anyfilesinterceptor",{"_index":676,"title":{},"body":{"controllers/FileController.html":{}}}],["api",{"_index":862,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["api_base_url",{"_index":850,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["app.interceptor",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":19,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":626,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":666,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"miscellaneous/functions.html":{}}}],["array(32",{"_index":696,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["array.from",{"_index":715,"title":{},"body":{"controllers/FileController.html":{}}}],["arraybuffer",{"_index":485,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["arraybuffertobase64",{"_index":479,"title":{},"body":{"injectables/ChatService.html":{}}}],["arraybuffertobase64(message",{"_index":484,"title":{},"body":{"injectables/ChatService.html":{}}}],["arraynotempty",{"_index":600,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":358,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["audio/mp3",{"_index":689,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["audio/mpeg",{"_index":688,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.service",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":105,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":72,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1077,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"properties.html":{}}}],["authservice",{"_index":143,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":268,"title":{"interfaces/AuthUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["await",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["azp",{"_index":357,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["badrequestexception",{"_index":672,"title":{},"body":{"controllers/FileController.html":{}}}],["banner",{"_index":546,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["based",{"_index":1034,"title":{},"body":{"controllers/PostController.html":{}}}],["bcrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(d.password",{"_index":1426,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["bio",{"_index":547,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["bookmark/:id",{"_index":1001,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkcount",{"_index":1218,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkedby",{"_index":1172,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkedbyme",{"_index":1195,"title":{},"body":{"injectables/PostService.html":{}}}],["bookmarkpost",{"_index":982,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["bookmarkpost(id",{"_index":995,"title":{},"body":{"controllers/PostController.html":{}}}],["bookmarkpost(postid",{"_index":1108,"title":{},"body":{"injectables/PostService.html":{}}}],["boolean",{"_index":360,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bree",{"_index":867,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["browse",{"_index":1511,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1508,"title":{},"body":{"modules.html":{}}}],["buffer.from(message).tostring('base64",{"_index":524,"title":{},"body":{"injectables/ChatService.html":{}}}],["bytes",{"_index":938,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["c",{"_index":1151,"title":{},"body":{"injectables/PostService.html":{}}}],["c.media",{"_index":1167,"title":{},"body":{"injectables/PostService.html":{}}}],["c.mediatypes",{"_index":1168,"title":{},"body":{"injectables/PostService.html":{}}}],["c.text",{"_index":1166,"title":{},"body":{"injectables/PostService.html":{}}}],["cache",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["cachemodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["callhandler",{"_index":915,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["canactivate(context",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["catch",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["catch(exception",{"_index":623,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["cb",{"_index":691,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["cb(null",{"_index":701,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["chat",{"_index":369,"title":{"classes/Chat.html":{}},"body":{"classes/Chat.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"coverage.html":{}}}],["chat.controller",{"_index":475,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.created",{"_index":522,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.dto",{"_index":400,"title":{},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/UpdateChatDto.html":{}}}],["chat.dto.ts",{"_index":532,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["chat.dto.ts:2",{"_index":543,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:3",{"_index":538,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:4",{"_index":539,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:5",{"_index":544,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:6",{"_index":537,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:7",{"_index":541,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:8",{"_index":542,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.dto.ts:9",{"_index":540,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.gateway",{"_index":474,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":403,"title":{},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["chatcontroller",{"_index":372,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatcreatedevent",{"_index":407,"title":{"classes/ChatCreatedEvent.html":{}},"body":{"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"coverage.html":{}}}],["chatcreatedlistener",{"_index":434,"title":{"injectables/ChatCreatedListener.html":{}},"body":{"injectables/ChatCreatedListener.html":{},"coverage.html":{}}}],["chatdata",{"_index":453,"title":{},"body":{"classes/ChatGateway.html":{}}}],["chatgateway",{"_index":441,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":46,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chats",{"_index":374,"title":{},"body":{"controllers/ChatController.html":{},"injectables/RoomService.html":{}}}],["chatservice",{"_index":402,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":827,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkbookmarkedbyuser",{"_index":983,"title":{},"body":{"controllers/PostController.html":{}}}],["checkbookmarkedbyuser(id",{"_index":998,"title":{},"body":{"controllers/PostController.html":{}}}],["checkfrontend",{"_index":828,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkhealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["checkifuserbookmarkedpost",{"_index":1096,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserbookmarkedpost(postid",{"_index":1111,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserlikedpost",{"_index":1097,"title":{},"body":{"injectables/PostService.html":{}}}],["checkifuserlikedpost(postid",{"_index":1113,"title":{},"body":{"injectables/PostService.html":{}}}],["checklikedbyuser",{"_index":984,"title":{},"body":{"controllers/PostController.html":{}}}],["checklikedbyuser(id",{"_index":1003,"title":{},"body":{"controllers/PostController.html":{}}}],["class",{"_index":24,"title":{"classes/Chat.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"classes/JoinRoomDto.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRoomKey.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":370,"title":{},"body":{"classes/Chat.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"classes/JoinRoomDto.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRoomKey.html":{},"overview.html":{}}}],["cleanedquery",{"_index":1080,"title":{},"body":{"controllers/PostController.html":{}}}],["cleanedquery.split",{"_index":1085,"title":{},"body":{"controllers/PostController.html":{}}}],["client",{"_index":466,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["client.id",{"_index":1291,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client.join(roomdata.roomid",{"_index":1288,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client.leave(roomid",{"_index":1294,"title":{},"body":{"classes/RoomGateway.html":{}}}],["client_id",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["clone",{"_index":1141,"title":{},"body":{"injectables/PostService.html":{}}}],["clone.length",{"_index":1178,"title":{},"body":{"injectables/PostService.html":{}}}],["clone.map(async",{"_index":1179,"title":{},"body":{"injectables/PostService.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":470,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":471,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":725,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":726,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":882,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_providers",{"_index":883,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":969,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":970,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1090,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":1091,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":1299,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_providers",{"_index":1300,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_usermodule",{"_index":1392,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1393,"title":{},"body":{"modules/UserModule.html":{}}}],["commentcount",{"_index":1188,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":1197,"title":{},"body":{"injectables/PostService.html":{}}}],["compressaudio",{"_index":1446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressaudio(file",{"_index":1498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compressedfiles",{"_index":718,"title":{},"body":{"controllers/FileController.html":{}}}],["compressfile",{"_index":1447,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressfile(file",{"_index":1499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compressfiles",{"_index":680,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressfiles(files",{"_index":719,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["compressimage",{"_index":1448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressimage(file",{"_index":1500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compression",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["compressvideo",{"_index":1449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compressvideo(file",{"_index":1501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":509,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["connectedsocket",{"_index":465,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["console.error('error",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/PostService.html":{}}}],["console.error(`error",{"_index":784,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log('search",{"_index":1388,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`file",{"_index":775,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log(`user",{"_index":1292,"title":{},"body":{"classes/RoomGateway.html":{}}}],["console.log(event",{"_index":440,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["console.log(postdata",{"_index":1058,"title":{},"body":{"controllers/PostController.html":{}}}],["const",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["constructor",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(chatservice",{"_index":445,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(data",{"_index":422,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["constructor(jwtservice",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prisma",{"_index":482,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(roomservice",{"_index":1265,"title":{},"body":{"classes/RoomGateway.html":{}}}],["constructor(userservice",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["contains",{"_index":1390,"title":{},"body":{"controllers/UserController.html":{}}}],["content",{"_index":602,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["contents",{"_index":1149,"title":{},"body":{"injectables/PostService.html":{}}}],["contents[index].type",{"_index":1157,"title":{},"body":{"injectables/PostService.html":{}}}],["contents[index].url",{"_index":1156,"title":{},"body":{"injectables/PostService.html":{}}}],["context",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["context.getclass",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["context.gethandler",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["context.switchtohttp().getrequest",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('chats",{"_index":404,"title":{},"body":{"controllers/ChatController.html":{}}}],["controller('file",{"_index":703,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":853,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('notification",{"_index":962,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('posts",{"_index":1054,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('rooms",{"_index":1251,"title":{},"body":{"controllers/RoomController.html":{}}}],["controller('user",{"_index":1384,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cors",{"_index":460,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["coverage",{"_index":1430,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":480,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["create(@body",{"_index":963,"title":{},"body":{"controllers/NotificationController.html":{}}}],["create(createhealthdto",{"_index":892,"title":{},"body":{"injectables/HealthService.html":{}}}],["create(createnotificationdto",{"_index":948,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["create(files",{"_index":736,"title":{},"body":{"injectables/FileService.html":{}}}],["create(new_chat",{"_index":487,"title":{},"body":{"injectables/ChatService.html":{}}}],["create(sender",{"_index":1307,"title":{},"body":{"injectables/RoomService.html":{}}}],["createchat",{"_index":444,"title":{},"body":{"classes/ChatGateway.html":{}}}],["createchat(chatdata",{"_index":449,"title":{},"body":{"classes/ChatGateway.html":{}}}],["createchatdto",{"_index":450,"title":{"classes/CreateChatDto.html":{}},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["created_chat",{"_index":506,"title":{},"body":{"injectables/ChatService.html":{}}}],["createdat",{"_index":771,"title":{},"body":{"injectables/FileService.html":{},"controllers/PostController.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{}}}],["createdata",{"_index":1161,"title":{},"body":{"injectables/PostService.html":{}}}],["createdraft",{"_index":985,"title":{},"body":{"controllers/PostController.html":{}}}],["createdraft(req",{"_index":1006,"title":{},"body":{"controllers/PostController.html":{}}}],["createfeduser",{"_index":1399,"title":{},"body":{"injectables/UserService.html":{}}}],["createfeduser(data",{"_index":1405,"title":{},"body":{"injectables/UserService.html":{}}}],["createfeduserdto",{"_index":277,"title":{"classes/CreateFedUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createfiledto",{"_index":565,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["createhealthdto",{"_index":575,"title":{"classes/CreateHealthDto.html":{}},"body":{"classes/CreateHealthDto.html":{},"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["createimgpath",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["createmany",{"_index":1165,"title":{},"body":{"injectables/PostService.html":{}}}],["createnotificationdto",{"_index":578,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createpost",{"_index":986,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(data",{"_index":1115,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(req",{"_index":1010,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":581,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostdto:12",{"_index":1357,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:16",{"_index":1354,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:20",{"_index":1355,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:24",{"_index":1356,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:30",{"_index":1353,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:36",{"_index":1358,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createroomdto",{"_index":603,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["createuser",{"_index":1400,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(d",{"_index":1407,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":563,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["cron",{"_index":757,"title":{},"body":{"injectables/FileService.html":{},"controllers/NotificationController.html":{}}}],["cron(cronexpression.every_day_at_11pm",{"_index":746,"title":{},"body":{"injectables/FileService.html":{}}}],["cronexpression",{"_index":758,"title":{},"body":{"injectables/FileService.html":{}}}],["ctx",{"_index":631,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["ctx.getrequest",{"_index":634,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["ctx.getresponse",{"_index":633,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["currentuseremail",{"_index":1067,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["cursor",{"_index":1198,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["d",{"_index":1409,"title":{},"body":{"injectables/UserService.html":{}}}],["d.img",{"_index":1425,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.description",{"_index":431,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.fromuserid",{"_index":433,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.longpost",{"_index":1163,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content",{"_index":1154,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.length",{"_index":1164,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.map((c",{"_index":1155,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost.content.map(async",{"_index":1150,"title":{},"body":{"injectables/PostService.html":{}}}],["data.longpost?.content",{"_index":1142,"title":{},"body":{"injectables/PostService.html":{}}}],["data.media",{"_index":1140,"title":{},"body":{"injectables/PostService.html":{}}}],["data.mediatypes",{"_index":1148,"title":{},"body":{"injectables/PostService.html":{}}}],["data.name",{"_index":429,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["data.type",{"_index":1144,"title":{},"body":{"injectables/PostService.html":{}}}],["database",{"_index":779,"title":{},"body":{"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["databasecheck",{"_index":829,"title":{},"body":{"controllers/HealthController.html":{}}}],["date",{"_index":765,"title":{},"body":{"injectables/FileService.html":{}}}],["date().toisostring",{"_index":638,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["date.now",{"_index":925,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["day",{"_index":762,"title":{},"body":{"injectables/FileService.html":{}}}],["db",{"_index":855,"title":{},"body":{"controllers/HealthController.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{}}}],["default",{"_index":752,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["default_img",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":391,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["delete('post/:id",{"_index":1013,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":776,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefilesandrecords",{"_index":731,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefilesandrecords(files",{"_index":738,"title":{},"body":{"injectables/FileService.html":{}}}],["deletepost",{"_index":987,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{}}}],["deletepost(@param('id",{"_index":1088,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deletepost(id",{"_index":1012,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["deletepost(where",{"_index":1117,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteuser",{"_index":1401,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":1410,"title":{},"body":{"injectables/UserService.html":{}}}],["deleting",{"_index":785,"title":{},"body":{"injectables/FileService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1074,"title":{},"body":{"controllers/PostController.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{}}}],["descending",{"_index":1032,"title":{},"body":{"controllers/PostController.html":{}}}],["description",{"_index":420,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"controllers/PostController.html":{},"properties.html":{}}}],["dest",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["destination",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["disconnect",{"_index":1214,"title":{},"body":{"injectables/PostService.html":{}}}],["disk",{"_index":856,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":846,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskstorage",{"_index":677,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["downloadimage",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["downloadimage(url",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["downloading",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["draft",{"_index":1008,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/create",{"_index":459,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/sign",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":399,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["each",{"_index":601,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"injectables/UserService.html":{}}}],["email)).status",{"_index":1213,"title":{},"body":{"injectables/PostService.html":{}}}],["email_verified",{"_index":359,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["emit",{"_index":530,"title":{},"body":{"injectables/ChatService.html":{}}}],["emitevent",{"_index":481,"title":{},"body":{"injectables/ChatService.html":{}}}],["emitter",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"dependencies.html":{}}}],["encryptedmessage",{"_index":515,"title":{},"body":{"injectables/ChatService.html":{}}}],["encryptionkey",{"_index":610,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["err",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{}}}],["error",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["error('failed",{"_index":1159,"title":{},"body":{"injectables/PostService.html":{}}}],["error.message",{"_index":1328,"title":{},"body":{"injectables/RoomService.html":{}}}],["error.stack",{"_index":1329,"title":{},"body":{"injectables/RoomService.html":{}}}],["europe/london",{"_index":955,"title":{},"body":{"controllers/NotificationController.html":{}}}],["event",{"_index":408,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{}}}],["eventemittermodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["events/chat.event",{"_index":439,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["exception",{"_index":628,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.getstatus",{"_index":635,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.message",{"_index":643,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception.stack",{"_index":644,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptionfilter",{"_index":621,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptionsloggerfilter",{"_index":619,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["execpromise",{"_index":1450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{}}}],["existingroom",{"_index":1336,"title":{},"body":{"injectables/RoomService.html":{}}}],["exp",{"_index":367,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["expiresin",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":935,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["extends",{"_index":353,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/JoinRoomDto.html":{},"injectables/PrismaService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":693,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["extname",{"_index":679,"title":{},"body":{"controllers/FileController.html":{}}}],["extname(file.originalname",{"_index":694,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["extracttokenfromheader",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["false",{"_index":716,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostController.html":{},"injectables/RoomService.html":{}}}],["family_name",{"_index":365,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["feed",{"_index":1031,"title":{},"body":{"controllers/PostController.html":{}}}],["fieldname",{"_index":934,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["file",{"_index":5,"title":{"classes/File.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.close",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["file.controller",{"_index":728,"title":{},"body":{"modules/FileModule.html":{}}}],["file.dto",{"_index":675,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/UpdateFileDto.html":{}}}],["file.dto.ts",{"_index":567,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["file.dto.ts:2",{"_index":573,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:3",{"_index":571,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:4",{"_index":572,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:5",{"_index":574,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.filename",{"_index":789,"title":{},"body":{"injectables/FileService.html":{}}}],["file.id",{"_index":782,"title":{},"body":{"injectables/FileService.html":{}}}],["file.manager",{"_index":681,"title":{},"body":{"controllers/FileController.html":{}}}],["file.mimetype",{"_index":793,"title":{},"body":{"injectables/FileService.html":{}}}],["file.mimetype.split('/')[0",{"_index":795,"title":{},"body":{"injectables/FileService.html":{}}}],["file.on('finish",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["file.originalname",{"_index":791,"title":{},"body":{"injectables/FileService.html":{}}}],["file.originalname.split('.')[0",{"_index":692,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file.path",{"_index":777,"title":{},"body":{"injectables/FileService.html":{}}}],["file.service",{"_index":674,"title":{},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{}}}],["file.size",{"_index":794,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{}}}],["file.status",{"_index":808,"title":{},"body":{"injectables/FileService.html":{}}}],["file.type",{"_index":807,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["file.url",{"_index":806,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["file/file.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["file?.originalname",{"_index":937,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["filecontroller",{"_index":657,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"coverage.html":{}}}],["filefilter",{"_index":710,"title":{},"body":{"controllers/FileController.html":{}}}],["fileid",{"_index":801,"title":{},"body":{"injectables/FileService.html":{}}}],["fileids",{"_index":745,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["fileids.length",{"_index":1143,"title":{},"body":{"injectables/PostService.html":{}}}],["fileids.map(async",{"_index":800,"title":{},"body":{"injectables/FileService.html":{}}}],["filemodel",{"_index":756,"title":{},"body":{"injectables/FileService.html":{}}}],["filemodule",{"_index":47,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules.html":{},"overview.html":{}}}],["filename",{"_index":568,"title":{},"body":{"classes/CreateFileDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["files",{"_index":669,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["fileservice",{"_index":673,"title":{"injectables/FileService.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["filesize",{"_index":705,"title":{},"body":{"controllers/FileController.html":{}}}],["fill(null",{"_index":697,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":375,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{}}}],["findall(@request",{"_index":409,"title":{},"body":{"controllers/ChatController.html":{},"controllers/RoomController.html":{}}}],["findall(req",{"_index":380,"title":{},"body":{"controllers/ChatController.html":{},"controllers/RoomController.html":{}}}],["findall(to",{"_index":491,"title":{},"body":{"injectables/ChatService.html":{}}}],["findallwithparticipant",{"_index":1305,"title":{},"body":{"injectables/RoomService.html":{}}}],["findallwithparticipant(email",{"_index":1309,"title":{},"body":{"injectables/RoomService.html":{}}}],["findchatsinroom",{"_index":1234,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findchatsinroom(@param('id",{"_index":1257,"title":{},"body":{"controllers/RoomController.html":{}}}],["findchatsinroom(id",{"_index":1238,"title":{},"body":{"controllers/RoomController.html":{}}}],["findchatsinroom(roomid",{"_index":1311,"title":{},"body":{"injectables/RoomService.html":{}}}],["findone",{"_index":376,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["findone(@messagebody",{"_index":1284,"title":{},"body":{"classes/RoomGateway.html":{}}}],["findone(@param('id",{"_index":413,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["findone(id",{"_index":384,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["findparentpost",{"_index":1098,"title":{},"body":{"injectables/PostService.html":{}}}],["findparentpost(postid",{"_index":1120,"title":{},"body":{"injectables/PostService.html":{}}}],["findpost",{"_index":1099,"title":{},"body":{"injectables/PostService.html":{}}}],["findpost(postid",{"_index":1122,"title":{},"body":{"injectables/PostService.html":{}}}],["findroombyparticipantsorcreate",{"_index":1235,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findroombyparticipantsorcreate(user1id",{"_index":1242,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["finduser",{"_index":1402,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(usernameoremail",{"_index":1413,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":648,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["found",{"_index":805,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["fromuserid",{"_index":421,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["fs",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{}}}],["fs.appendfile('./error.log",{"_index":645,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["fs.createwritestream(filepath",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs.mkdirsync(destination",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{}}}],["fs.unlink(file.path",{"_index":774,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.unlink(filepath",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs/promises",{"_index":759,"title":{},"body":{"injectables/FileService.html":{}}}],["fun",{"_index":1504,"title":{},"body":{"index.html":{}}}],["function",{"_index":1445,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1495,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":1024,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["get('/all",{"_index":1236,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/chats/:id",{"_index":1239,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/comments/:id",{"_index":1016,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/find",{"_index":1244,"title":{},"body":{"controllers/RoomController.html":{}}}],["get(':id",{"_index":385,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["get('api",{"_index":859,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('db",{"_index":874,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('hello",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["get('memory",{"_index":879,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('profile",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('storage",{"_index":875,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('ui",{"_index":865,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('user/:id/posts",{"_index":1037,"title":{},"body":{"controllers/PostController.html":{}}}],["get('view/:id",{"_index":381,"title":{},"body":{"controllers/ChatController.html":{}}}],["get(url",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcommentsforpost",{"_index":988,"title":{},"body":{"controllers/PostController.html":{}}}],["getcommentsforpost(req",{"_index":1015,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilesurls",{"_index":732,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilesurls(fileids",{"_index":742,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilteredposts",{"_index":989,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilteredposts(req",{"_index":1018,"title":{},"body":{"controllers/PostController.html":{}}}],["getfilteredusers",{"_index":1364,"title":{},"body":{"controllers/UserController.html":{}}}],["getfilteredusers(searchstring",{"_index":1369,"title":{},"body":{"controllers/UserController.html":{}}}],["getmultipleposts",{"_index":1100,"title":{},"body":{"injectables/PostService.html":{}}}],["getmultipleposts(params",{"_index":1124,"title":{},"body":{"injectables/PostService.html":{}}}],["getmultipleusers",{"_index":1403,"title":{},"body":{"injectables/UserService.html":{}}}],["getmultipleusers(params",{"_index":1416,"title":{},"body":{"injectables/UserService.html":{}}}],["getpostbookmarks",{"_index":1101,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbookmarks(postid",{"_index":1126,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyid",{"_index":990,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":1023,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments",{"_index":1102,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostcomments(postid",{"_index":1128,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostlikes",{"_index":1103,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostlikes(postid",{"_index":1130,"title":{},"body":{"injectables/PostService.html":{}}}],["getprofile",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@body('id",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["getpublishedposts",{"_index":991,"title":{},"body":{"controllers/PostController.html":{}}}],["getpublishedposts(req",{"_index":1026,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":1502,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":1365,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(@param('id",{"_index":1387,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":1372,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserposts",{"_index":992,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(params",{"_index":1036,"title":{},"body":{"controllers/PostController.html":{}}}],["given_name",{"_index":364,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["global",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["googleauthuser",{"_index":262,"title":{"classes/GoogleAuthUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["googlelogin",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin(@body('token",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin(token",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup(@body('token",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignup(token",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard",{"_index":172,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":405,"title":{},"body":{"controllers/ChatController.html":{}}}],["handlechatcreatedevent",{"_index":436,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["handlechatcreatedevent(event",{"_index":437,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["handlecron",{"_index":733,"title":{},"body":{"injectables/FileService.html":{}}}],["handleordercreatedevent",{"_index":377,"title":{},"body":{"controllers/ChatController.html":{}}}],["health",{"_index":823,"title":{"classes/Health.html":{}},"body":{"classes/Health.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"coverage.html":{}}}],["health.controller",{"_index":887,"title":{},"body":{"modules/HealthModule.html":{}}}],["health.dto",{"_index":898,"title":{},"body":{"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{}}}],["health.dto.ts",{"_index":577,"title":{},"body":{"classes/CreateHealthDto.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["health.service",{"_index":886,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":844,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":842,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":825,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":48,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthservice",{"_index":884,"title":{"injectables/HealthService.html":{}},"body":{"modules/HealthModule.html":{},"injectables/HealthService.html":{},"coverage.html":{},"overview.html":{}}}],["hello",{"_index":864,"title":{},"body":{"controllers/HealthController.html":{}}}],["helmet",{"_index":1484,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":625,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["host.switchtohttp",{"_index":632,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["http",{"_index":854,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('login",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('login/google",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('logout",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('signup/google",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":624,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["httphealthindicator",{"_index":843,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":889,"title":{},"body":{"modules/HealthModule.html":{}}}],["https",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://localhost:4000",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["iat",{"_index":366,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["id",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreateRoomDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["image/jpeg",{"_index":684,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["image/png",{"_index":685,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["image/webp",{"_index":686,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["img",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["img_name",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["img_path",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ExceptionsLoggerFilter.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{}}}],["in.dto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["in.dto.ts",{"_index":352,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:10",{"_index":810,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:11",{"_index":809,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:12",{"_index":822,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:13",{"_index":811,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:14",{"_index":812,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:15",{"_index":820,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:16",{"_index":819,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:17",{"_index":821,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:18",{"_index":815,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:19",{"_index":814,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:20",{"_index":816,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:21",{"_index":813,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:22",{"_index":818,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["in.dto.ts:4",{"_index":1339,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:5",{"_index":1340,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:9",{"_index":817,"title":{},"body":{"classes/GoogleAuthUser.html":{}}}],["include",{"_index":520,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["incoming",{"_index":930,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["incrementparentpostcommentcount",{"_index":1104,"title":{},"body":{"injectables/PostService.html":{}}}],["incrementparentpostcommentcount(postid",{"_index":1132,"title":{},"body":{"injectables/PostService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":1352,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["intercept",{"_index":912,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":913,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":196,"title":{"interfaces/AuthUser.html":{},"interfaces/JwtSubPayload.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"interfaces/JwtSubPayload.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":350,"title":{},"body":{"interfaces/AuthUser.html":{},"interfaces/JwtSubPayload.html":{},"overview.html":{}}}],["is_public_key",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":599,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":558,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":552,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":561,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["ispasswordvalid",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":356,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["isstring",{"_index":559,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":555,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["join(__dirname",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["join(destination",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["joined",{"_index":1290,"title":{},"body":{"classes/RoomGateway.html":{}}}],["joining",{"_index":1327,"title":{},"body":{"injectables/RoomService.html":{}}}],["joinroom",{"_index":1263,"title":{},"body":{"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["joinroom(roomdata",{"_index":1271,"title":{},"body":{"classes/RoomGateway.html":{}}}],["joinroom(roomid",{"_index":1315,"title":{},"body":{"injectables/RoomService.html":{}}}],["joinroomdto",{"_index":900,"title":{"classes/JoinRoomDto.html":{}},"body":{"classes/JoinRoomDto.html":{},"classes/RoomGateway.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["jpg",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(this.sanitizerequestbody(request.body",{"_index":642,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["jti",{"_index":368,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["jwtconstants",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["jwtmodule",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["jwtsubpayload",{"_index":197,"title":{"interfaces/JwtSubPayload.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{}}}],["leaveroom",{"_index":1264,"title":{},"body":{"classes/RoomGateway.html":{}}}],["leaveroom(roomid",{"_index":1275,"title":{},"body":{"classes/RoomGateway.html":{}}}],["left",{"_index":1295,"title":{},"body":{"classes/RoomGateway.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1086,"title":{},"body":{"controllers/PostController.html":{}}}],["license",{"_index":1518,"title":{},"body":{"properties.html":{}}}],["like/:id",{"_index":1004,"title":{},"body":{"controllers/PostController.html":{}}}],["likecount",{"_index":1215,"title":{},"body":{"injectables/PostService.html":{}}}],["likedby",{"_index":1171,"title":{},"body":{"injectables/PostService.html":{}}}],["likedbyme",{"_index":1193,"title":{},"body":{"injectables/PostService.html":{}}}],["likepost",{"_index":993,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["likepost(id",{"_index":1042,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(postid",{"_index":1134,"title":{},"body":{"injectables/PostService.html":{}}}],["limit",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["limits",{"_index":704,"title":{},"body":{"controllers/FileController.html":{}}}],["literal",{"_index":423,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":647,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logged",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger",{"_index":730,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RoomService.html":{}}}],["logger(logginginterceptor.name",{"_index":918,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger(roomservice.name",{"_index":1320,"title":{},"body":{"injectables/RoomService.html":{}}}],["logginginterceptor",{"_index":73,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":870,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["logmessage",{"_index":637,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["long",{"_index":1160,"title":{},"body":{"injectables/PostService.html":{}}}],["longpost",{"_index":584,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["longpostblock",{"_index":597,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["lt",{"_index":772,"title":{},"body":{"injectables/FileService.html":{}}}],["lts.1",{"_index":1487,"title":{},"body":{"dependencies.html":{}}}],["manager",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["map",{"_index":698,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["mark",{"_index":1174,"title":{},"body":{"injectables/PostService.html":{}}}],["markfileasuploaded",{"_index":734,"title":{},"body":{"injectables/FileService.html":{}}}],["markfileasuploaded(fileids",{"_index":748,"title":{},"body":{"injectables/FileService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":699,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["media",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"miscellaneous/variables.html":{}}}],["media_base_url",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["media_base_url}${file.filename",{"_index":792,"title":{},"body":{"injectables/FileService.html":{}}}],["media_base_url}${img_name",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["mediatype",{"_index":497,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["mediatypes",{"_index":585,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["memory",{"_index":857,"title":{},"body":{"controllers/HealthController.html":{}}}],["memorycheck",{"_index":830,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":847,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{}}}],["messagebody",{"_index":456,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["messagebody('roomid",{"_index":1293,"title":{},"body":{"classes/RoomGateway.html":{}}}],["metadata",{"_index":1489,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["mimetype",{"_index":569,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FileService.html":{}}}],["minlength",{"_index":560,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":564,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1494,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["multer",{"_index":678,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["multermodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["multipart",{"_index":931,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["name",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":461,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["nbf",{"_index":361,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["nestinterceptor",{"_index":920,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/axios",{"_index":890,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core/services/reflector.service",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["nestjs/event",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":908,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"controllers/NotificationController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":848,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":457,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{},"dependencies.html":{}}}],["new",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_chat",{"_index":489,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.fromuserid",{"_index":511,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.receiverencryptedmessage",{"_index":519,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.roomid",{"_index":503,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.senderencryptedmessage",{"_index":517,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_chat.touserid",{"_index":510,"title":{},"body":{"injectables/ChatService.html":{}}}],["new_user",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.email",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.password",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["new_user.username",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["newchat.fromuserid",{"_index":523,"title":{},"body":{"injectables/ChatService.html":{}}}],["next",{"_index":914,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle",{"_index":928,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":940,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["notacceptableexception",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":755,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('file",{"_index":804,"title":{},"body":{"injectables/FileService.html":{}}}],["notfoundexception('parent",{"_index":1184,"title":{},"body":{"injectables/PostService.html":{}}}],["notfoundexception('post",{"_index":1190,"title":{},"body":{"injectables/PostService.html":{}}}],["notfoundexception('user",{"_index":1211,"title":{},"body":{"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["notification",{"_index":943,"title":{"classes/Notification.html":{}},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notification.controller",{"_index":972,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.dto",{"_index":961,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":580,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.service",{"_index":960,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["notificationcontroller",{"_index":945,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationmodule",{"_index":49,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["notifications",{"_index":953,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationservice",{"_index":959,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["now",{"_index":924,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":942,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":1331,"title":{},"body":{"injectables/RoomService.html":{}}}],["number",{"_index":362,"title":{},"body":{"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateFileDto.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(skip",{"_index":1075,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["number(take",{"_index":1076,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["object",{"_index":649,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":933,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["observable",{"_index":917,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["omit",{"_index":1227,"title":{},"body":{"injectables/PrismaService.html":{}}}],["on('error",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":1269,"title":{},"body":{"classes/RoomGateway.html":{}}}],["onevent",{"_index":401,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{}}}],["onevent('chat.created",{"_index":387,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{}}}],["onmoduleinit",{"_index":1225,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1033,"title":{},"body":{"controllers/PostController.html":{}}}],["orderby",{"_index":1073,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["origin",{"_index":462,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["originalname",{"_index":790,"title":{},"body":{"injectables/FileService.html":{}}}],["orphaned",{"_index":761,"title":{},"body":{"injectables/FileService.html":{}}}],["out",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outgoing",{"_index":941,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["overview",{"_index":1512,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":796,"title":{},"body":{"injectables/FileService.html":{}}}],["package",{"_index":1461,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":398,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":410,"title":{},"body":{"controllers/ChatController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1039,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["params.currentuseremail",{"_index":1205,"title":{},"body":{"injectables/PostService.html":{}}}],["params.email",{"_index":1209,"title":{},"body":{"injectables/PostService.html":{}}}],["params.id",{"_index":1078,"title":{},"body":{"controllers/PostController.html":{}}}],["parent",{"_index":1066,"title":{},"body":{"controllers/PostController.html":{}}}],["parentid",{"_index":586,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["parentpost",{"_index":1185,"title":{},"body":{"injectables/PostService.html":{}}}],["parentpost.commentcount",{"_index":1189,"title":{},"body":{"injectables/PostService.html":{}}}],["partial",{"_index":1379,"title":{},"body":{"controllers/UserController.html":{}}}],["partialtype",{"_index":907,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createchatdto",{"_index":1342,"title":{},"body":{"classes/UpdateChatDto.html":{}}}],["partialtype(createfiledto",{"_index":1344,"title":{},"body":{"classes/UpdateFileDto.html":{}}}],["partialtype(createhealthdto",{"_index":1347,"title":{},"body":{"classes/UpdateHealthDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1349,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createroomdto",{"_index":902,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":1361,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participants",{"_index":606,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{},"classes/UserRoomKey.html":{}}}],["pass",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":355,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleAuthUser.html":{},"injectables/PrismaService.html":{},"classes/SignInDto.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":397,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["patch('/update/:id",{"_index":1248,"title":{},"body":{"controllers/RoomController.html":{}}}],["patch(':id",{"_index":395,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{}}}],["path",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["payload",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["payload.aud",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.name",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["pendingfiles",{"_index":768,"title":{},"body":{"injectables/FileService.html":{}}}],["picture",{"_index":363,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{}}}],["post",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{}}}],["post('/check",{"_index":1000,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/search",{"_index":1020,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["post('create",{"_index":1007,"title":{},"body":{"controllers/PostController.html":{}}}],["post('feed",{"_index":1029,"title":{},"body":{"controllers/PostController.html":{}}}],["post('login",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/google",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":1385,"title":{},"body":{"controllers/UserController.html":{}}}],["post('signup/google",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('upload",{"_index":717,"title":{},"body":{"controllers/FileController.html":{}}}],["post.author",{"_index":1192,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkcount",{"_index":1219,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.length",{"_index":1221,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.some",{"_index":1206,"title":{},"body":{"injectables/PostService.html":{}}}],["post.bookmarkedby.some((user",{"_index":1196,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":1093,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":1053,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":583,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:12",{"_index":594,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":591,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:20",{"_index":592,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":593,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:30",{"_index":589,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":596,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.likecount",{"_index":1216,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.length",{"_index":1220,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.some",{"_index":1204,"title":{},"body":{"injectables/PostService.html":{}}}],["post.likedby.some((user",{"_index":1194,"title":{},"body":{"injectables/PostService.html":{}}}],["post.parentid",{"_index":1181,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":1051,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/post.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":979,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postdata",{"_index":999,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.email",{"_index":1069,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.longpost",{"_index":1057,"title":{},"body":{"controllers/PostController.html":{}}}],["postdata.type",{"_index":1056,"title":{},"body":{"controllers/PostController.html":{}}}],["postid",{"_index":1110,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodel",{"_index":1052,"title":{},"body":{"controllers/PostController.html":{}}}],["postmodule",{"_index":50,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":981,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.map((post",{"_index":1203,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":1050,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postswithuserflags",{"_index":1202,"title":{},"body":{"injectables/PostService.html":{}}}],["posttype",{"_index":595,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["posttype.long",{"_index":1145,"title":{},"body":{"injectables/PostService.html":{}}}],["postwithuserflags",{"_index":1191,"title":{},"body":{"injectables/PostService.html":{}}}],["prefix",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["prisma.filecreateinput",{"_index":797,"title":{},"body":{"injectables/FileService.html":{}}}],["prisma.postcreateinput",{"_index":1162,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postcreatemediainput",{"_index":743,"title":{},"body":{"injectables/FileService.html":{}}}],["prisma.postorderbywithrelationinput",{"_index":1200,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postupdateinput",{"_index":1207,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereinput",{"_index":1199,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":1118,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.service",{"_index":476,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":1423,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":1422,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":1411,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":1224,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismahealthindicator",{"_index":845,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismaservice",{"_index":225,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["process",{"_index":406,"title":{},"body":{"controllers/ChatController.html":{},"injectables/PostService.html":{}}}],["process.env.api_base_url",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.default_profile_img",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["process.env.file_base_url",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["process.env.google_auth_client_id",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.ui_base_url",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.all",{"_index":799,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostService.html":{}}}],["promisify(exec",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":354,"title":{"properties.html":{}},"body":{"interfaces/AuthUser.html":{},"classes/ChatCreatedEvent.html":{},"classes/ChatGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserRoomKey.html":{},"properties.html":{}}}],["provide",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('api')@healthcheck",{"_index":832,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('db')@healthcheck",{"_index":836,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('hello",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@get('memory')@healthcheck",{"_index":838,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('storage')@healthcheck",{"_index":840,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('ui')@healthcheck",{"_index":834,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@post('register",{"_index":1375,"title":{},"body":{"controllers/UserController.html":{}}}],["publickey",{"_index":903,"title":{},"body":{"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["published",{"_index":1061,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["publishpost",{"_index":994,"title":{},"body":{"controllers/PostController.html":{}}}],["publishpost(id",{"_index":1045,"title":{},"body":{"controllers/PostController.html":{}}}],["put",{"_index":1048,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["put('bookmark/:id",{"_index":996,"title":{},"body":{"controllers/PostController.html":{}}}],["put('like/:id",{"_index":1043,"title":{},"body":{"controllers/PostController.html":{}}}],["put('publish/:id",{"_index":1046,"title":{},"body":{"controllers/PostController.html":{}}}],["put('update/:id",{"_index":1380,"title":{},"body":{"controllers/UserController.html":{}}}],["q",{"_index":1019,"title":{},"body":{"controllers/PostController.html":{}}}],["q.trim().replace(/[^a",{"_index":1081,"title":{},"body":{"controllers/PostController.html":{}}}],["query",{"_index":1049,"title":{},"body":{"controllers/PostController.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["query('q",{"_index":1079,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('skip",{"_index":1071,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('take",{"_index":1072,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["query('user1",{"_index":1254,"title":{},"body":{"controllers/RoomController.html":{}}}],["query('user2",{"_index":1255,"title":{},"body":{"controllers/RoomController.html":{}}}],["randomname",{"_index":695,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["randomname}${extension",{"_index":702,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["receiver",{"_index":500,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["receiver.id",{"_index":518,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["receiverencryptedmessage",{"_index":533,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["record",{"_index":780,"title":{},"body":{"injectables/FileService.html":{}}}],["recursive",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{}}}],["redacted",{"_index":655,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["reflect",{"_index":1488,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["reject",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":378,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["remove(@messagebody",{"_index":1297,"title":{},"body":{"classes/RoomGateway.html":{}}}],["remove(@param('id",{"_index":417,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/NotificationController.html":{},"controllers/RoomController.html":{}}}],["remove(id",{"_index":390,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["removes",{"_index":529,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{},"injectables/RoomService.html":{}}}],["req",{"_index":383,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{},"miscellaneous/variables.html":{}}}],["req.user.sub",{"_index":412,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/PostController.html":{}}}],["request",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/ChatController.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostController.html":{},"controllers/RoomController.html":{}}}],["request.file",{"_index":932,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.files",{"_index":927,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers.authorization?.split",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["request.is('multipart/form",{"_index":926,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":640,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.url",{"_index":641,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request['user",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["res",{"_index":871,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{}}}],["res.map((file",{"_index":1147,"title":{},"body":{"injectables/PostService.html":{}}}],["res.status",{"_index":872,"title":{},"body":{"controllers/HealthController.html":{}}}],["res[0",{"_index":1153,"title":{},"body":{"injectables/PostService.html":{}}}],["reset",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["response.pipe(file",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.status(status).json",{"_index":651,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["response.statuscode",{"_index":639,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":1041,"title":{},"body":{"controllers/PostController.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["room",{"_index":502,"title":{"classes/Room.html":{}},"body":{"injectables/ChatService.html":{},"classes/Room.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"coverage.html":{}}}],["room.controller",{"_index":1303,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":909,"title":{},"body":{"classes/JoinRoomDto.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["room.dto.ts",{"_index":605,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":1397,"title":{},"body":{"classes/UserRoomKey.html":{}}}],["room.dto.ts:11",{"_index":1396,"title":{},"body":{"classes/UserRoomKey.html":{}}}],["room.dto.ts:4",{"_index":607,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:7",{"_index":905,"title":{},"body":{"classes/JoinRoomDto.html":{}}}],["room.dto.ts:8",{"_index":906,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["room.dto.ts:9",{"_index":904,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["room.gateway",{"_index":1302,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.id",{"_index":512,"title":{},"body":{"injectables/ChatService.html":{}}}],["room.service",{"_index":1250,"title":{},"body":{"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{}}}],["room/dto/update",{"_index":1283,"title":{},"body":{"classes/RoomGateway.html":{}}}],["room/room.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["roomcontroller",{"_index":1231,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomdata",{"_index":1274,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomdata.roomid",{"_index":1286,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomdata.userid",{"_index":1287,"title":{},"body":{"classes/RoomGateway.html":{}}}],["roomgateway",{"_index":1261,"title":{"classes/RoomGateway.html":{}},"body":{"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomid",{"_index":534,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["roommodule",{"_index":51,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["rooms",{"_index":1233,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomservice",{"_index":472,"title":{"injectables/RoomService.html":{}},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"coverage.html":{},"overview.html":{}}}],["rxjs",{"_index":921,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":923,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sanitizedbody",{"_index":653,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizedbody.password",{"_index":654,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizerequestbody",{"_index":622,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["sanitizerequestbody(body",{"_index":629,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["savedfile",{"_index":787,"title":{},"body":{"injectables/FileService.html":{}}}],["savedfiles",{"_index":786,"title":{},"body":{"injectables/FileService.html":{}}}],["savedfiles.push(savedfile.id",{"_index":798,"title":{},"body":{"injectables/FileService.html":{}}}],["saving",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["schedulemodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["search",{"_index":1087,"title":{},"body":{"controllers/PostController.html":{}}}],["searchstring",{"_index":1371,"title":{},"body":{"controllers/UserController.html":{}}}],["searchterm",{"_index":1420,"title":{},"body":{"injectables/UserService.html":{}}}],["secret",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":1173,"title":{},"body":{"injectables/PostService.html":{}}}],["sender",{"_index":498,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["sender.id",{"_index":514,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["senderencryptedmessage",{"_index":535,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["server",{"_index":443,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["set",{"_index":683,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["setmetadata(is_public_key",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"miscellaneous/variables.html":{}}}],["sharp",{"_index":1492,"title":{},"body":{"dependencies.html":{}}}],["short",{"_index":1176,"title":{},"body":{"injectables/PostService.html":{}}}],["signin",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":132,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["signingoogle",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["signingoogle(token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["signout(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout(signindto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupgoogle",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupgoogle(token",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupuser",{"_index":1366,"title":{},"body":{"controllers/UserController.html":{}}}],["signupuser(userdata",{"_index":1374,"title":{},"body":{"controllers/UserController.html":{}}}],["size",{"_index":570,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{}}}],["skip",{"_index":1027,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["skipduplicates",{"_index":1169,"title":{},"body":{"injectables/PostService.html":{}}}],["social",{"_index":1505,"title":{},"body":{"index.html":{}}}],["socket",{"_index":467,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["socket.io",{"_index":458,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/Chat.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/File.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["src/.../auth.guard.ts",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.controller.ts",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.manager.ts",{"_index":1497,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.interceptor.ts",{"_index":911,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/app.interceptor.ts:13",{"_index":919,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/app.interceptor.ts:15",{"_index":916,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/app.module.ts",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard",{"_index":849,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["src/auth/auth.guard.ts",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.guard.ts:22",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:28",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:55",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:101",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:165",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:207",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:216",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:52",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1441,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/sign",{"_index":351,"title":{},"body":{"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts",{"_index":373,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:20",{"_index":388,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:25",{"_index":382,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:30",{"_index":386,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:35",{"_index":396,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:40",{"_index":392,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.gateway.ts",{"_index":442,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:18",{"_index":446,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:22",{"_index":448,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:25",{"_index":452,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":473,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":478,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:10",{"_index":483,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:102",{"_index":493,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:106",{"_index":495,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:110",{"_index":494,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:114",{"_index":490,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:17",{"_index":488,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:79",{"_index":486,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:83",{"_index":492,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/dto/create",{"_index":531,"title":{},"body":{"classes/CreateChatDto.html":{},"coverage.html":{}}}],["src/chat/dto/update",{"_index":1341,"title":{},"body":{"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["src/chat/entities/chat.entity.ts",{"_index":371,"title":{},"body":{"classes/Chat.html":{},"coverage.html":{}}}],["src/chat/events/chat.event.ts",{"_index":419,"title":{},"body":{"classes/ChatCreatedEvent.html":{},"coverage.html":{}}}],["src/chat/events/chat.event.ts:1",{"_index":424,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:10",{"_index":426,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:8",{"_index":427,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/events/chat.event.ts:9",{"_index":425,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["src/chat/listeners/chat.listener.ts",{"_index":435,"title":{},"body":{"injectables/ChatCreatedListener.html":{},"coverage.html":{}}}],["src/chat/listeners/chat.listener.ts:8",{"_index":438,"title":{},"body":{"injectables/ChatCreatedListener.html":{}}}],["src/file/dto/create",{"_index":566,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/file/dto/update",{"_index":1343,"title":{},"body":{"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["src/file/entities/file.entity.ts",{"_index":656,"title":{},"body":{"classes/File.html":{},"coverage.html":{}}}],["src/file/file.controller.ts",{"_index":658,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/file/file.controller.ts:75",{"_index":668,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:84",{"_index":660,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:89",{"_index":661,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:94",{"_index":664,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.controller.ts:99",{"_index":662,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.manager.ts",{"_index":1444,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/file/file.module.ts",{"_index":727,"title":{},"body":{"modules/FileModule.html":{}}}],["src/file/file.service",{"_index":1094,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["src/file/file.service.ts",{"_index":729,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/file/file.service.ts:10",{"_index":735,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:104",{"_index":749,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:121",{"_index":740,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:125",{"_index":741,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:129",{"_index":751,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:133",{"_index":750,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:16",{"_index":754,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:19",{"_index":747,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:36",{"_index":739,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:53",{"_index":737,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:83",{"_index":744,"title":{},"body":{"injectables/FileService.html":{}}}],["src/health/dto/create",{"_index":576,"title":{},"body":{"classes/CreateHealthDto.html":{},"coverage.html":{}}}],["src/health/dto/update",{"_index":1346,"title":{},"body":{"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["src/health/entities/health.entity.ts",{"_index":824,"title":{},"body":{"classes/Health.html":{},"coverage.html":{}}}],["src/health/exceptionslogger.filter.ts",{"_index":620,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/health/exceptionslogger.filter.ts:12",{"_index":627,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["src/health/exceptionslogger.filter.ts:44",{"_index":630,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["src/health/health.controller.ts",{"_index":826,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:29",{"_index":833,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:38",{"_index":835,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:52",{"_index":837,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:61",{"_index":841,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:71",{"_index":839,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":885,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/health/health.service.ts",{"_index":891,"title":{},"body":{"injectables/HealthService.html":{},"coverage.html":{}}}],["src/health/health.service.ts:10",{"_index":894,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:14",{"_index":895,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:18",{"_index":897,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:22",{"_index":896,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/health/health.service.ts:6",{"_index":893,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/main.ts",{"_index":1452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notification/dto/create",{"_index":579,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/dto/update",{"_index":1348,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/entities/notification.entity.ts",{"_index":944,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{}}}],["src/notification/notification.controller.ts",{"_index":946,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notification/notification.controller.ts:23",{"_index":956,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:26",{"_index":949,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:31",{"_index":950,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:36",{"_index":951,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:41",{"_index":958,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:49",{"_index":952,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.module.ts",{"_index":971,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/notification/notification.service.ts",{"_index":973,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notification/notification.service.ts:11",{"_index":975,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:15",{"_index":976,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:19",{"_index":978,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:23",{"_index":977,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:7",{"_index":974,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/post/dto/create",{"_index":582,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dto/update",{"_index":1351,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":980,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:105",{"_index":1005,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:117",{"_index":1002,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:132",{"_index":1030,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:153",{"_index":1038,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:171",{"_index":1021,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:194",{"_index":1014,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:21",{"_index":1009,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:39",{"_index":1011,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:58",{"_index":1047,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:70",{"_index":997,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:78",{"_index":1044,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:86",{"_index":1025,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:94",{"_index":1017,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":1092,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":1095,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:109",{"_index":1121,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:121",{"_index":1133,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:134",{"_index":1123,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:14",{"_index":1116,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:171",{"_index":1139,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:205",{"_index":1114,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:217",{"_index":1112,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:229",{"_index":1125,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:281",{"_index":1137,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:323",{"_index":1135,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:352",{"_index":1109,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:384",{"_index":1131,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:392",{"_index":1127,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:401",{"_index":1129,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:410",{"_index":1119,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:8",{"_index":1107,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma.service",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FileModule.html":{},"modules/RoomModule.html":{}}}],["src/prisma.service.ts",{"_index":1223,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":1228,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":1226,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/room/dto/create",{"_index":604,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["src/room/dto/update",{"_index":901,"title":{},"body":{"classes/JoinRoomDto.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/room/entities/room.entity.ts",{"_index":1230,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/room/room.controller.ts",{"_index":1232,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/room/room.controller.ts:19",{"_index":1237,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:24",{"_index":1241,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:29",{"_index":1245,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:37",{"_index":1240,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:42",{"_index":1249,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:47",{"_index":1247,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.gateway.ts",{"_index":1262,"title":{},"body":{"classes/RoomGateway.html":{},"coverage.html":{}}}],["src/room/room.gateway.ts:21",{"_index":1266,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:25",{"_index":1267,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:28",{"_index":1270,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:33",{"_index":1273,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:50",{"_index":1277,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:59",{"_index":1282,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.gateway.ts:64",{"_index":1279,"title":{},"body":{"classes/RoomGateway.html":{}}}],["src/room/room.module.ts",{"_index":1301,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/room/room.service",{"_index":477,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["src/room/room.service.ts",{"_index":1304,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/room/room.service.ts:113",{"_index":1314,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:146",{"_index":1319,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:150",{"_index":1317,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:16",{"_index":1308,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:35",{"_index":1310,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:54",{"_index":1312,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:65",{"_index":1316,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:9",{"_index":1306,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:97",{"_index":1313,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/user/dto/create",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1360,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1363,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:22",{"_index":1376,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:30",{"_index":1373,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:35",{"_index":1370,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":1381,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":1368,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":1394,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{}}}],["src/user/user.service.ts",{"_index":1398,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:12",{"_index":1414,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:31",{"_index":1417,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1408,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1406,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:66",{"_index":1419,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":1412,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1404,"title":{},"body":{"injectables/UserService.html":{}}}],["started",{"_index":1503,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":496,"title":{},"body":{"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/FileService.html":{},"injectables/PostService.html":{},"classes/RoomGateway.html":{}}}],["status.deleted",{"_index":783,"title":{},"body":{"injectables/FileService.html":{}}}],["status.pending",{"_index":770,"title":{},"body":{"injectables/FileService.html":{}}}],["status.sent",{"_index":508,"title":{},"body":{"injectables/ChatService.html":{}}}],["status.uploaded",{"_index":803,"title":{},"body":{"injectables/FileService.html":{}}}],["storage",{"_index":690,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagecheck",{"_index":831,"title":{},"body":{"controllers/HealthController.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoomDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":1060,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["sub",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/GoogleAuthUser.html":{},"interfaces/JwtSubPayload.html":{},"classes/SignInDto.html":{}}}],["subscribemessage",{"_index":455,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["subscribemessage('find",{"_index":1268,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('join",{"_index":1272,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('leave",{"_index":1276,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('removeroom",{"_index":1278,"title":{},"body":{"classes/RoomGateway.html":{}}}],["subscribemessage('send",{"_index":451,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('updateroom",{"_index":1281,"title":{},"body":{"classes/RoomGateway.html":{}}}],["successfully",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":1509,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1510,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1460,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1459,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1028,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":922,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["terminusmodule",{"_index":888,"title":{},"body":{"modules/HealthModule.html":{}}}],["text",{"_index":536,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{}}}],["this.$connect",{"_index":1229,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.arraybuffertobase64",{"_index":516,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authservice.signin(signindto.email",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signingoogle(token",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signout(signindto.email",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupgoogle(token",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.chatservice.create(chatdata",{"_index":468,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.findall(id",{"_index":411,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.findone(+id",{"_index":414,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.remove(+id",{"_index":418,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.update(+id",{"_index":416,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.checkifuserbookmarkedpost(postid",{"_index":1217,"title":{},"body":{"injectables/PostService.html":{}}}],["this.checkifuserlikedpost(postid",{"_index":1212,"title":{},"body":{"injectables/PostService.html":{}}}],["this.create(user1",{"_index":1338,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.createimgpath",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.deletefilesandrecords(pendingfiles",{"_index":773,"title":{},"body":{"injectables/FileService.html":{}}}],["this.description",{"_index":430,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.disk.checkstorage('storage",{"_index":876,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.downloadimage(payload.picture",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventemitter.emit",{"_index":521,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.extracttokenfromheader(request",{"_index":210,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.fileservice.create(compressedfiles",{"_index":720,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.findall",{"_index":721,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.findone(id",{"_index":722,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.getfilesurls(c.media",{"_index":1152,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.getfilesurls(data.media",{"_index":1146,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.markfileasuploaded(c.media",{"_index":1180,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.markfileasuploaded(fileids",{"_index":1177,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fileservice.remove(id",{"_index":724,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.update(id",{"_index":723,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findone(roomid",{"_index":1324,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.findparentpost(postid",{"_index":1186,"title":{},"body":{"injectables/PostService.html":{}}}],["this.fromuserid",{"_index":432,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.health.check",{"_index":860,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('bree",{"_index":861,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.responsecheck",{"_index":866,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.incrementparentpostcommentcount(post.parentid",{"_index":1182,"title":{},"body":{"injectables/PostService.html":{}}}],["this.jwtservice.decode(token",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(data",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.logger.error",{"_index":1326,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.logger.log",{"_index":929,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.log('remove",{"_index":760,"title":{},"body":{"injectables/FileService.html":{}}}],["this.logger.log(`incoming",{"_index":939,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":880,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.name",{"_index":428,"title":{},"body":{"classes/ChatCreatedEvent.html":{}}}],["this.notificationservice.create(createnotificationdto",{"_index":964,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findall",{"_index":965,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.findone(id",{"_index":966,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.remove(id",{"_index":968,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.update(id",{"_index":967,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.postservice.bookmarkpost(id",{"_index":1062,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.checkifuserbookmarkedpost",{"_index":1070,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.checkifuserlikedpost",{"_index":1068,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createpost",{"_index":1055,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletepost",{"_index":1089,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getmultipleposts",{"_index":1065,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.likepost(id",{"_index":1063,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.updatepost",{"_index":1059,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.viewsinglepost(id",{"_index":1064,"title":{},"body":{"controllers/PostController.html":{}}}],["this.prisma.chat.create",{"_index":507,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.prisma.chat.findmany",{"_index":525,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["this.prisma.file.create",{"_index":788,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.findmany",{"_index":769,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.findunique",{"_index":802,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.file.update",{"_index":781,"title":{},"body":{"injectables/FileService.html":{}}}],["this.prisma.post.create",{"_index":1170,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":1222,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":1201,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":1183,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":1208,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.room.create",{"_index":1321,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findfirst",{"_index":1337,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findmany",{"_index":1322,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findunique",{"_index":1330,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.update",{"_index":1325,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.user.create",{"_index":1427,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1429,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":1424,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1210,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.update",{"_index":1428,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{}}}],["this.roomservice.create(sender",{"_index":505,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.roomservice.findallwithparticipant(req.user.sub",{"_index":1252,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findchatsinroom(id",{"_index":1258,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findone(id",{"_index":1253,"title":{},"body":{"controllers/RoomController.html":{},"classes/RoomGateway.html":{}}}],["this.roomservice.findone(new_chat.roomid",{"_index":504,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.roomservice.findroombyparticipantsorcreate(user1id",{"_index":1256,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.joinroom",{"_index":1285,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.roomservice.remove(+id",{"_index":1260,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.remove(id",{"_index":1298,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.roomservice.update(id",{"_index":1259,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.server.to(chatdata.roomid).emit('receive",{"_index":469,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.server.to(roomdata.roomid).emit('user",{"_index":1289,"title":{},"body":{"classes/RoomGateway.html":{}}}],["this.ui_url",{"_index":869,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.updatepost",{"_index":1187,"title":{},"body":{"injectables/PostService.html":{}}}],["this.updateuserprofile(user",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url",{"_index":863,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.createfeduser(u",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(userdata",{"_index":1386,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser",{"_index":1391,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduser(email",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["this.userservice.finduser(id",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.userservice.finduser(new_chat.fromuserid",{"_index":499,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userservice.finduser(new_chat.touserid",{"_index":501,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userservice.finduser(payload.email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduser(user1id",{"_index":1333,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.finduser(user2id",{"_index":1335,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.finduser(userid",{"_index":1323,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.userservice.getmultipleusers",{"_index":1389,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["thresholdpercent",{"_index":877,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttlermodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":211,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":650,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["timezone",{"_index":954,"title":{},"body":{"controllers/NotificationController.html":{}}}],["token",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["touserid",{"_index":526,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreateChatDto.html":{}}}],["transformer",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["transports",{"_index":463,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["triggernotifications",{"_index":947,"title":{},"body":{"controllers/NotificationController.html":{}}}],["true",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"interfaces/JwtSubPayload.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/UpdatePostDto.html":{},"miscellaneous/variables.html":{}}}],["true})@isarray()@arraynotempty",{"_index":588,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["try",{"_index":213,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"injectables/RoomService.html":{}}}],["ttl",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["twentyfourhoursago",{"_index":764,"title":{},"body":{"injectables/FileService.html":{}}}],["twentyfourhoursago.setdate(twentyfourhoursago.getdate",{"_index":766,"title":{},"body":{"injectables/FileService.html":{}}}],["type",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/ChatController.html":{},"classes/ChatCreatedEvent.html":{},"injectables/ChatCreatedListener.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateChatDto.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateFileDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"injectables/HealthService.html":{},"classes/JoinRoomDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/LoggingInterceptor.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":652,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["types",{"_index":714,"title":{},"body":{"controllers/FileController.html":{},"classes/JoinRoomDto.html":{},"classes/UpdateChatDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["u",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["ui_base_url",{"_index":851,"title":{},"body":{"controllers/HealthController.html":{},"classes/RoomGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui_url",{"_index":858,"title":{},"body":{"controllers/HealthController.html":{}}}],["unauthorizedexception",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JwtSubPayload.html":{}}}],["undefined",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{}}}],["unknown",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["unlicensed",{"_index":1519,"title":{},"body":{"properties.html":{}}}],["unsupported",{"_index":712,"title":{},"body":{"controllers/FileController.html":{}}}],["update",{"_index":379,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{}}}],["update(@messagebody",{"_index":1296,"title":{},"body":{"classes/RoomGateway.html":{}}}],["update(@param('id",{"_index":415,"title":{},"body":{"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/RoomController.html":{}}}],["update(id",{"_index":393,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/RoomController.html":{}}}],["update(roomid",{"_index":1318,"title":{},"body":{"injectables/RoomService.html":{}}}],["update(updateroomdto",{"_index":1280,"title":{},"body":{"classes/RoomGateway.html":{}}}],["updatechatdto",{"_index":394,"title":{"classes/UpdateChatDto.html":{}},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/UpdateChatDto.html":{},"coverage.html":{}}}],["updated_user",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.email",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.password",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_user.username",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatefiledto",{"_index":663,"title":{"classes/UpdateFileDto.html":{}},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["updatehealthdto",{"_index":1345,"title":{"classes/UpdateHealthDto.html":{}},"body":{"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":957,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1105,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(params",{"_index":1136,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepostdto",{"_index":1350,"title":{"classes/UpdatePostDto.html":{}},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateroomdto",{"_index":910,"title":{"classes/UpdateRoomDto.html":{}},"body":{"classes/JoinRoomDto.html":{},"controllers/RoomController.html":{},"classes/RoomGateway.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updates",{"_index":528,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/HealthService.html":{},"injectables/NotificationService.html":{}}}],["updateuser",{"_index":1367,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(id",{"_index":1378,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(params",{"_index":1418,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1359,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserprofile",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserprofile(user",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["uploaded",{"_index":1175,"title":{},"body":{"injectables/PostService.html":{}}}],["uploadedfiles",{"_index":671,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile",{"_index":659,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile(files",{"_index":665,"title":{},"body":{"controllers/FileController.html":{}}}],["uploading",{"_index":1158,"title":{},"body":{"injectables/PostService.html":{}}}],["uploads",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{}}}],["useclass",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard)@get('profile",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":670,"title":{},"body":{"controllers/FileController.html":{}}}],["useinterceptors(undefined)@post('upload",{"_index":667,"title":{},"body":{"controllers/FileController.html":{}}}],["user",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/ChatService.html":{},"classes/CreateRoomDto.html":{},"injectables/FileService.html":{},"classes/GoogleAuthUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"classes/SignInDto.html":{},"controllers/UserController.html":{},"classes/UserRoomKey.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":1395,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":545,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":553,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:46",{"_index":556,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:50",{"_index":557,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:53",{"_index":551,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:57",{"_index":554,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.dto.ts:61",{"_index":549,"title":{},"body":{"classes/CreateFedUserDto.html":{}}}],["user.email",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["user.id",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["user.img",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1382,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{}}}],["user1",{"_index":1332,"title":{},"body":{"injectables/RoomService.html":{}}}],["user1id",{"_index":1246,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["user2",{"_index":1334,"title":{},"body":{"injectables/RoomService.html":{}}}],["user2id",{"_index":1243,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["usercontroller",{"_index":1362,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1377,"title":{},"body":{"controllers/UserController.html":{}}}],["userencryptedmessages",{"_index":513,"title":{},"body":{"injectables/ChatService.html":{},"injectables/RoomService.html":{}}}],["userid",{"_index":609,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/JoinRoomDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserRoomKey.html":{}}}],["usermodel",{"_index":1383,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":52,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateFedUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtSubPayload.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usernameoremail",{"_index":1415,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameoremail.startswith",{"_index":1421,"title":{},"body":{"injectables/UserService.html":{}}}],["userroomkey",{"_index":608,"title":{"classes/UserRoomKey.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/UserRoomKey.html":{},"coverage.html":{}}}],["userservice",{"_index":148,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":852,"title":{},"body":{"controllers/HealthController.html":{},"classes/RoomGateway.html":{}}}],["utils/.../index.ts",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/index.ts",{"_index":1458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["uuidv4",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":598,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":562,"title":{},"body":{"classes/CreateFedUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":753,"title":{},"body":{"injectables/FileService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1035,"title":{},"body":{"controllers/PostController.html":{}}}],["variable",{"_index":1439,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1520,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1516,"title":{},"body":{"properties.html":{}}}],["video/mp4",{"_index":687,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["viewsinglepost",{"_index":1106,"title":{},"body":{"injectables/PostService.html":{}}}],["viewsinglepost(postid",{"_index":1138,"title":{},"body":{"injectables/PostService.html":{}}}],["void",{"_index":389,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatCreatedListener.html":{},"injectables/ChatService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/NotificationController.html":{},"classes/RoomGateway.html":{}}}],["web",{"_index":868,"title":{},"body":{"controllers/HealthController.html":{}}}],["websocket",{"_index":464,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["websocketgateway",{"_index":454,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["websocketserver",{"_index":447,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomGateway.html":{}}}],["welcome",{"_index":1506,"title":{},"body":{"index.html":{}}}],["whose",{"_index":1040,"title":{},"body":{"controllers/PostController.html":{}}}],["working",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["writing",{"_index":646,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["yes",{"_index":1022,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["z0",{"_index":1083,"title":{},"body":{"controllers/PostController.html":{}}}],["za",{"_index":1082,"title":{},"body":{"controllers/PostController.html":{}}}],["zoom",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        checkHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('hello')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './auth/auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get('hello')\n  checkHealth(): string {\n    return 'app is working';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostModule } from './post/post.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuard } from './auth/auth.guard';\nimport { LoggingInterceptor } from './app.interceptor';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { FileModule } from './file/file.module';\nimport { HealthModule } from './health/health.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { NotificationModule } from './notification/notification.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ChatModule } from './chat/chat.module';\nimport { RoomModule } from './room/room.module';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    EventEmitterModule.forRoot(),\n    ConfigModule.forRoot(),\n    CacheModule.register(),\n    MulterModule.register({\n      dest: '../uploads',\n    }),\n    ThrottlerModule.forRoot([\n      {\n        ttl: 6000,\n        limit: 10,\n      },\n    ]),\n    UserModule,\n    PostModule,\n    AuthModule,\n    FileModule,\n    HealthModule,\n    NotificationModule,\n    ChatModule,\n    RoomModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleSignup\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('login/google')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleSignup(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('signup/google')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dto/sign-in.dto';\nimport { AuthGuard, Public } from './auth.guard';\nimport { UserService } from 'src/user/user.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly authService: AuthService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('login/google')\n  async googleLogin(@Body('token') token: string) {\n    return await this.authService.signInGoogle(token);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('signup/google')\n  async googleSignup(@Body('token') token: string) {\n    return await this.authService.signUpGoogle(token);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('login')\n  async signIn(@Body() signInDto: SignInDto) {\n    return await this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @Post('logout')\n  async signOut(@Body() signInDto: SignInDto) {\n    return await this.authService.signOut(signInDto.email, signInDto.password);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('profile')\n  async getProfile(@Body('id') id: string) {\n    return await this.userService.findUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\nimport { SetMetadata } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core/services/reflector.service';\n\ninterface JwtSubPayload {\n  sub: string;\n  username: string;\n}\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload: JwtSubPayload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { UserService } from 'src/user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from 'src/prisma.service';\nimport { jwtConstants } from './constants';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, UserService, JwtService, PrismaService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImgPath\n                            \n                            \n                                    Private\n                                    Async\n                                downloadImage\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInGoogle\n                            \n                            \n                                    Async\n                                signOut\n                            \n                            \n                                    Async\n                                signUpGoogle\n                            \n                            \n                                    Private\n                                    Async\n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImgPath\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImgPath()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { url: string; file: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        downloadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadImage(url: string, filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:216\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInGoogle(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpGoogle(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(user: User, payload: GoogleAuthUser, default_img: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            GoogleAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                default_img\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { GoogleAuthUser, AuthUser } from './dto/sign-in.dto';\nimport { User } from '@prisma/client';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as https from 'https';\nimport { join } from 'path';\nimport * as fs from 'fs';\nimport { CreateFedUserDto } from 'src/user/dto/create-user.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  async signIn(email: string, pass: string): Promise> {\n    const user = await this.userService.findUser(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const isPasswordValid = await bcrypt.compare(pass, user.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException();\n    }\n\n    delete user.password;\n\n    const payload = { sub: user.email, username: user.username };\n\n    return {\n      ...user,\n      access_token: await this.jwtService.signAsync(payload, {\n        secret: jwtConstants.secret,\n      }),\n    };\n  }\n\n  async signOut(email: string, pass: string): Promise {\n    const user = await this.userService.findUser(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const isPasswordValid = await bcrypt.compare(pass, user.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException();\n    }\n\n    return {\n      message: 'Logged out successfully',\n    };\n  }\n\n  async signInGoogle(token: string): Promise> {\n    const payload: GoogleAuthUser = await this.jwtService.decode(token);\n\n    const user = await this.userService.findUser(payload.email);\n\n    const client_id = process.env.GOOGLE_AUTH_CLIENT_ID;\n    const default_img = process.env.DEFAULT_PROFILE_IMG;\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    if (client_id !== payload.aud) {\n      throw new UnauthorizedException();\n    }\n\n    if (user.img === default_img) {\n      return await this.updateUserProfile(user, payload, default_img);\n    } else {\n      const data = { sub: user.email, username: user.username };\n      delete user.password;\n\n      return {\n        ...user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    }\n  }\n\n  async signUpGoogle(token: string): Promise> {\n    const payload: GoogleAuthUser = await this.jwtService.decode(token);\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        email: payload.email,\n      },\n    });\n\n    const client_id = process.env.GOOGLE_AUTH_CLIENT_ID;\n\n    if (user) {\n      throw new NotAcceptableException();\n    }\n\n    if (client_id !== payload.aud) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const { url, file } = this.createImgPath();\n      await this.downloadImage(payload.picture, file);\n\n      const u: CreateFedUserDto = {\n        name: payload.name,\n        username: payload.email,\n        email: payload.email,\n        img: url,\n      };\n\n      const new_user = await this.userService.createFedUser(u);\n\n      const data = { sub: new_user.email, username: new_user.username };\n      delete user.password;\n\n      return {\n        ...user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    } catch (error) {\n      if (!error) return;\n      const default_img = process.env.DEFAULT_PROFILE_IMG;\n      const u: CreateFedUserDto = {\n        name: payload.name,\n        username: payload.email,\n        email: payload.email,\n        img: default_img,\n      };\n\n      const new_user = await this.userService.createFedUser(u);\n\n      delete new_user.password;\n      const data = { sub: new_user.email, username: new_user.username };\n\n      return {\n        ...new_user,\n        access_token: await this.jwtService.signAsync(data, {\n          secret: jwtConstants.secret,\n        }),\n      };\n    }\n  }\n\n  private async updateUserProfile(\n    user: User,\n    payload: GoogleAuthUser,\n    default_img: string,\n  ): Promise> {\n    if (user.img === default_img) {\n      try {\n        const { url, file } = this.createImgPath();\n        await this.downloadImage(payload.picture, file);\n        const updated_user = await this.userService.updateUser({\n          where: { id: user.id },\n          data: { img: url },\n        });\n\n        delete updated_user.password;\n\n        const data = {\n          sub: updated_user.email,\n          username: updated_user.username,\n        };\n\n        return {\n          ...updated_user,\n          access_token: await this.jwtService.signAsync(data, {\n            secret: jwtConstants.secret,\n          }),\n        };\n      } catch (error) {\n        console.error('Error downloading or saving image:', error);\n\n        delete user.password;\n        const data = { sub: user.email, username: user.username };\n        return {\n          ...user,\n          access_token: await this.jwtService.signAsync(data, {\n            secret: jwtConstants.secret,\n          }),\n        };\n      }\n    }\n  }\n\n  private createImgPath() {\n    const img_name = uuidv4() + '.jpg';\n    const destination = join(__dirname, '../../../../', 'media');\n    const media_base_url = process.env.FILE_BASE_URL;\n    fs.mkdirSync(destination, { recursive: true });\n    const img_path = `${media_base_url}${img_name}`;\n    return { url: img_path, file: join(destination, img_name) };\n  }\n\n  private async downloadImage(url: string, filepath: string): Promise {\n    return new Promise((resolve, reject) => {\n      const file = fs.createWriteStream(filepath);\n      https\n        .get(url, (response) => {\n          response.pipe(file);\n          file.on('finish', () => {\n            file.close();\n            resolve();\n          });\n        })\n        .on('error', (err) => {\n          fs.unlink(filepath, () => reject(err));\n        });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthUser.html":{"url":"interfaces/AuthUser.html","title":"interface - AuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            access_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chat.html":{"url":"classes/Chat.html","title":"class - Chat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/entities/chat.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Chat {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                handleOrderCreatedEvent\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: any, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('view/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleOrderCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleOrderCreatedEvent()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('chat.created')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateChatDto: UpdateChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatDto\n                                            \n                                                            UpdateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n} from '@nestjs/common';\n\nimport { UpdateChatDto } from './dto/update-chat.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ChatService } from './chat.service';\n\n@Controller('chats')\nexport class ChatController {\n  constructor(private readonly chatService: ChatService) {}\n\n  @OnEvent('chat.created')\n  handleOrderCreatedEvent() {\n    // handle and process \"ChatCreatedEvent\" event\n  }\n\n  @Get('view/:id')\n  findAll(@Request() req: any, @Param('id') id: 'uuid') {\n    return this.chatService.findAll(id, req.user.sub);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.chatService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateChatDto: UpdateChatDto) {\n    return this.chatService.update(+id, updateChatDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.chatService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatCreatedEvent.html":{"url":"classes/ChatCreatedEvent.html","title":"class - ChatCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/events/chat.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                fromUserId\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/chat/events/chat.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/events/chat.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ChatCreatedEvent {\n  constructor(data: { name: string; description: string; fromUserId: string }) {\n    this.name = data.name;\n    this.description = data.description;\n    this.fromUserId = data.fromUserId;\n  }\n\n  name: string;\n  description: string;\n  fromUserId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatCreatedListener.html":{"url":"injectables/ChatCreatedListener.html","title":"injectable - ChatCreatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatCreatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/listeners/chat.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleChatCreatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleChatCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleChatCreatedEvent(event: ChatCreatedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('chat.created')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/listeners/chat.listener.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            ChatCreatedEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ChatCreatedEvent } from '../events/chat.event';\n\n@Injectable()\nexport class ChatCreatedListener {\n  @OnEvent('chat.created')\n  handleChatCreatedEvent(event: ChatCreatedEvent) {\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createChat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChat(chatData: CreateChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send-message')\n                \n            \n\n                    \n                        \n                            Defined in src/chat/chat.gateway.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatData\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { CreateChatDto } from './dto/create-chat.dto';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway({\n  cors: {\n    namespace: 'chat',\n    origin: '*',\n    transports: ['websocket'],\n  },\n})\nexport class ChatGateway {\n  constructor(private readonly chatService: ChatService) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  @SubscribeMessage('send-message')\n  async createChat(\n    @MessageBody() chatData: CreateChatDto,\n    // @ConnectedSocket() client: Socket,\n  ) {\n    const chat = await this.chatService.create(chatData);\n    if (chat) {\n      this.server.to(chatData.roomId).emit('receive-message', chat);\n\n      return chat;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nChatService\n\nChatService\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nChatModule -->\n\nPrismaService->ChatModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nChatModule -->\n\nRoomService->ChatModule\n\n\n\n\n\nUserService\n\nUserService\n\nChatModule -->\n\nUserService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatService } from './chat.service';\nimport { ChatGateway } from './chat.gateway';\nimport { ChatController } from './chat.controller';\nimport { PrismaService } from '../prisma.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [ChatController],\n  providers: [\n    ChatGateway,\n    ChatService,\n    RoomService,\n    UserService,\n    PrismaService,\n  ],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                arrayBufferToBase64\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                emitEvent\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService, roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        arrayBufferToBase64\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrayBufferToBase64(message: ArrayBuffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        ArrayBuffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(new_chat: CreateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                new_chat\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitEvent\n                        \n                    \n                \n            \n            \n                \nemitEvent()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(to, from)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                from\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateChatDto: UpdateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chat/chat.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatDto\n                                            \n                                                            UpdateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateChatDto } from './dto/create-chat.dto';\nimport { PrismaService } from '../prisma.service';\nimport { Chat, Status } from '@prisma/client';\nimport { UserService } from 'src/user/user.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UpdateChatDto } from './dto/update-chat.dto';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly userService: UserService,\n    private readonly roomService: RoomService,\n  ) {}\n\n  async create(new_chat: CreateChatDto): Promise {\n    const { media, mediaType } = new_chat;\n    const sender = await this.userService.findUser(new_chat.fromUserId);\n    const receiver = await this.userService.findUser(new_chat.toUserId);\n\n    const room = new_chat.roomId\n      ? await this.roomService.findOne(new_chat.roomId)\n      : await this.roomService.create(sender, receiver);\n\n    const created_chat = await this.prisma.chat.create({\n      data: {\n        ...(media && { media }),\n        ...(mediaType && { mediaType: [mediaType] }),\n        status: Status.SENT,\n        to: {\n          connect: {\n            id: new_chat.toUserId,\n          },\n        },\n        from: {\n          connect: {\n            id: new_chat.fromUserId,\n          },\n        },\n        room: {\n          connect: {\n            id: room.id,\n          },\n        },\n        userEncryptedMessages: {\n          create: [\n            {\n              user: { connect: { id: sender.id } },\n              encryptedMessage: await this.arrayBufferToBase64(\n                new_chat.senderEncryptedMessage,\n              ),\n            },\n            {\n              user: { connect: { id: receiver.id } },\n              encryptedMessage: await this.arrayBufferToBase64(\n                new_chat.receiverEncryptedMessage,\n              ),\n            },\n          ],\n        },\n      },\n      include: {\n        userEncryptedMessages: true,\n      },\n    });\n\n    // this.eventEmitter.emit(\n    //   'chat.created',\n    //   new ChatCreatedEvent({\n    //     name: '',\n    //     description: '',\n    //     fromUserId: newChat.fromUserId,\n    //   }),\n    // );\n    return created_chat;\n  }\n\n  async arrayBufferToBase64(message: ArrayBuffer): Promise {\n    return Buffer.from(message).toString('base64');\n  }\n\n  async findAll(to: 'uuid', from: 'email') {\n    return await this.prisma.chat.findMany({\n      where: {\n        OR: [\n          {\n            from: { email: from },\n            toUserId: to,\n          },\n          {\n            fromUserId: to,\n            to: {\n              email: from,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} chat`;\n  }\n\n  update(id: number, updateChatDto: UpdateChatDto) {\n    return `This action updates a #${id} chat ${updateChatDto}`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} chat`;\n  }\n\n  emitEvent() {\n    // emit event\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatDto.html":{"url":"classes/CreateChatDto.html","title":"class - CreateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/dto/create-chat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fromUserId\n                            \n                            \n                                    Optional\n                                media\n                            \n                            \n                                    Optional\n                                mediaType\n                            \n                            \n                                    Optional\n                                receiverEncryptedMessage\n                            \n                            \n                                    Optional\n                                roomId\n                            \n                            \n                                    Optional\n                                senderEncryptedMessage\n                            \n                            \n                                text\n                            \n                            \n                                toUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fromUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mediaType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        receiverEncryptedMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        senderEncryptedMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/chat/dto/create-chat.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateChatDto {\n  text: ArrayBuffer;\n  media?: string;\n  mediaType?: string;\n  toUserId: string;\n  fromUserId: string;\n  roomId?: string;\n  senderEncryptedMessage?: ArrayBuffer;\n  receiverEncryptedMessage?: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFedUserDto.html":{"url":"classes/CreateFedUserDto.html","title":"class - CreateFedUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFedUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                banner\n                            \n                            \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                img\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        banner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Allow,\n  IsEmail,\n  IsString,\n  MinLength,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img?: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\nexport class CreateFedUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/dto/create-file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                mimetype\n                            \n                            \n                                name\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/file/dto/create-file.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFileDto {\n  name: string;\n  filename: string;\n  mimetype: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHealthDto.html":{"url":"classes/CreateHealthDto.html","title":"class - CreateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/create-health.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateHealthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateNotificationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                longPost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                media\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                mediaTypes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        longPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@ValidateNested({each: true})@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        mediaTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostType, LongPostBlock } from '@prisma/client';\nimport {\n  IsString,\n  ValidateNested,\n  IsArray,\n  ArrayNotEmpty,\n  Allow,\n} from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  text: string;\n\n  @Allow()\n  @IsString({ each: true })\n  media?: string[];\n\n  @Allow()\n  @IsString({ each: true })\n  mediaTypes?: string[];\n\n  @Allow()\n  @IsString()\n  parentId?: string;\n\n  @Allow()\n  @ValidateNested({ each: true })\n  @IsArray()\n  @ArrayNotEmpty()\n  longPost?: {\n    content: LongPostBlock[];\n  };\n\n  @Allow()\n  @IsString()\n  type?: PostType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                participants\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class CreateRoomDto {\n  participants: User[];\n}\n\nexport class UserRoomKey {\n  id: string;\n  userId: string;\n  roomId: string;\n  encryptionKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                banner\n                            \n                            \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                img\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        banner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Allow,\n  IsEmail,\n  IsString,\n  MinLength,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img?: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\nexport class CreateFedUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @Allow()\n  bio?: string;\n\n  @Allow()\n  @IsString()\n  img: string;\n\n  @Allow()\n  @IsString()\n  banner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/exceptionsLogger.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                sanitizeRequestBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/exceptionsLogger.filter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeRequestBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeRequestBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/exceptionsLogger.filter.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as fs from 'fs';\n\n@Catch()\nexport class ExceptionsLoggerFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus ? exception.getStatus() : 500;\n\n    const logMessage = `\n      --------------------------------------------------\n      ${new Date().toISOString()}\n      ${response.statusCode}\n      \n      ${request.method} ${request.url}\n      ${JSON.stringify(this.sanitizeRequestBody(request.body))}\n      ${exception.message}\n      ${exception.stack}\n\n      --------------------------------------------------\n    `;\n\n    fs.appendFile('./error.log', logMessage, (err) => {\n      if (err) {\n        console.error('Error writing to log file:', err);\n      }\n    });\n\n    //format response object when exception is thrown\n    response.status(status).json({\n      status: status,\n      message: exception.message,\n    });\n  }\n\n  private sanitizeRequestBody(body: any): any {\n    if (body && typeof body === 'object') {\n      const sanitizedBody = { ...body };\n      if (sanitizedBody.password) {\n        sanitizedBody.password = '***REDACTED***';\n      }\n      return sanitizedBody;\n    }\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/File.html":{"url":"classes/File.html","title":"class - File","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  File\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/entities/file.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class File {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateFileDto: UpdateFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(files: Array, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post('upload')\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFiles,\n  Request,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileService } from './file.service';\nimport { UpdateFileDto } from './dto/update-file.dto';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { extname, join } from 'path';\nimport * as fs from 'fs';\nimport { compressFiles } from './file.manager';\n\nconst destination = join(__dirname, '../../../../', 'media');\n\nfs.mkdirSync(destination, { recursive: true });\n\nconst allowedMimeTypes = new Set([\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n  'video/mp4',\n  'audio/mpeg',\n  'audio/mp3',\n]);\n\nconst storage = diskStorage({\n  destination,\n  filename: (req, file, cb) => {\n    const name = file.originalname.split('.')[0];\n    const extension = extname(file.originalname);\n    const randomName = Array(32)\n      .fill(null)\n      .map(() => Math.round(Math.random() * 16).toString(16))\n      .join('');\n    cb(null, `${name}-${randomName}${extension}`);\n  },\n});\n\n@Controller('file')\nexport class FileController {\n  constructor(private readonly fileService: FileService) {}\n\n  @UseInterceptors(\n    AnyFilesInterceptor({\n      storage: storage,\n      limits: {\n        fileSize: 1024 * 1024 * 20, // 20MB\n        files: 4,\n      },\n      fileFilter: (req, file, cb) => {\n        if (!allowedMimeTypes.has(file.mimetype)) {\n          return cb(\n            new BadRequestException(\n              `Unsupported file type. Allowed types are: ${Array.from(\n                allowedMimeTypes,\n              ).join(', ')}`,\n            ),\n            false,\n          );\n        }\n        cb(null, true);\n      },\n    }),\n  )\n  @Post('upload')\n  async uploadFile(\n    @UploadedFiles() files: Array,\n    @Request() req: any,\n  ) {\n    const compressedFiles = await compressFiles(files);\n    return await this.fileService.create(compressedFiles, req.user.sub);\n  }\n\n  @Get()\n  findAll() {\n    return this.fileService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.fileService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFileDto: UpdateFileDto) {\n    return this.fileService.update(id, updateFileDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.fileService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\n\nFileService\n\nFileService\n\n\n\nFileModule\n\nFileModule\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nFileModule -->\n\nPrismaService->FileModule\n\n\n\n\n\nUserService\n\nUserService\n\nFileModule -->\n\nUserService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileService } from './file.service';\nimport { FileController } from './file.controller';\nimport { UserService } from 'src/user/user.service';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  controllers: [FileController],\n  providers: [FileService, UserService, PrismaService],\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                deleteFilesAndRecords\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getFilesUrls\n                            \n                            \n                                    \n                                    Async\n                                handleCron\n                            \n                            \n                                    Async\n                                markFileAsUploaded\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/file/file.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(files: Array, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        deleteFilesAndRecords\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFilesAndRecords(files: Array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                            Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFilesUrls\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilesUrls(fileIds: string[] | Prisma.PostCreatemediaInput[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileIds\n                                            \n                                                        string[] | Prisma.PostCreatemediaInput[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_11PM)\n                \n            \n\n                    \n                        \n                            Defined in src/file/file.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markFileAsUploaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    markFileAsUploaded(fileIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFileDto: UpdateFileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file/file.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger()\n                    \n                \n                    \n                        \n                                Defined in src/file/file.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { PrismaService } from '../prisma.service';\nimport { Prisma, Status, File as FileModel } from '@prisma/client';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport * as fs from 'fs/promises';\nimport { UpdateFileDto } from './dto/update-file.dto';\n\n@Injectable()\nexport class FileService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  private readonly logger = new Logger();\n\n  @Cron(CronExpression.EVERY_DAY_AT_11PM)\n  async handleCron() {\n    this.logger.log('remove orphaned files every day at 11pm');\n\n    const twentyFourHoursAgo = new Date();\n    twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n\n    const pendingFiles = await this.prisma.file.findMany({\n      where: {\n        status: Status.PENDING,\n        createdAt: {\n          lt: twentyFourHoursAgo,\n        },\n      },\n    });\n    await this.deleteFilesAndRecords(pendingFiles);\n  }\n\n  private async deleteFilesAndRecords(files: Array) {\n    for (const file of files) {\n      try {\n        await fs.unlink(file.path);\n        console.log(`File deleted from storage: ${file.path}`);\n\n        // 2. Delete (or update) the database record\n        await this.prisma.file.update({\n          where: { id: file.id, status: Status.PENDING },\n          data: { status: Status.DELETED },\n        });\n      } catch (error) {\n        console.error(`Error deleting file ${file.path}:`, error);\n      }\n    }\n  }\n\n  async create(\n    files: Array,\n    email: string,\n  ): Promise {\n    const user = await this.userService.findUser(email);\n    const savedFiles: string[] = [];\n    const media_base_url = process.env.FILE_BASE_URL;\n\n    for (const file of files) {\n      const savedFile = await this.prisma.file.create({\n        data: {\n          filename: file.filename,\n          originalname: file.originalname,\n          path: file.path,\n          url: `${media_base_url}${file.filename}`,\n          mimetype: file.mimetype,\n          size: file.size,\n          status: Status.PENDING,\n          type: file.mimetype.split('/')[0],\n          owner: {\n            connect: { id: user.id },\n          },\n        } as Prisma.FileCreateInput,\n      });\n      savedFiles.push(savedFile.id);\n    }\n\n    return savedFiles;\n  }\n\n  async getFilesUrls(\n    fileIds: string[] | Prisma.PostCreatemediaInput[],\n  ): Promise {\n    return await Promise.all(\n      fileIds.map(async (fileId) => {\n        const file = await this.prisma.file.findUnique({\n          where: {\n            id: fileId,\n            status: { in: [Status.PENDING, Status.UPLOADED] },\n          },\n        });\n\n        if (!file) {\n          throw new NotFoundException('File not found');\n        }\n\n        return { url: file.url, type: file.type };\n      }),\n    );\n  }\n\n  async markFileAsUploaded(fileIds: string[]) {\n    return Promise.all(\n      fileIds.map(async (fileId) => {\n        const file = await this.prisma.file.update({\n          where: { id: fileId },\n          data: { status: Status.UPLOADED },\n        });\n\n        if (!file) {\n          throw new NotFoundException('File not found');\n        }\n\n        return file.status;\n      }),\n    );\n  }\n\n  findAll() {\n    return `This action returns all file`;\n  }\n\n  findOne(id: string) {\n    return `This action returns a #${id} file`;\n  }\n\n  update(id: string, updateFileDto: UpdateFileDto) {\n    return `This action updates a #${id} file ${updateFileDto}`;\n  }\n\n  remove(id: string) {\n    return `This action removes a #${id} file`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleAuthUser.html":{"url":"classes/GoogleAuthUser.html","title":"class - GoogleAuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleAuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aud\n                            \n                            \n                                azp\n                            \n                            \n                                email\n                            \n                            \n                                email_verified\n                            \n                            \n                                exp\n                            \n                            \n                                family_name\n                            \n                            \n                                given_name\n                            \n                            \n                                iat\n                            \n                            \n                                iss\n                            \n                            \n                                jti\n                            \n                            \n                                name\n                            \n                            \n                                nbf\n                            \n                            \n                                picture\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aud\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        azp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        family_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        given_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iss\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jti\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nbf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Health.html":{"url":"classes/Health.html","title":"class - Health","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Health\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/entities/health.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Health {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                check\n                            \n                            \n                                    \n                                    \n                                    \n                                checkFrontend\n                            \n                            \n                                    \n                                    \n                                    \n                                databaseCheck\n                            \n                            \n                                    \n                                    \n                                    \n                                memoryCheck\n                            \n                            \n                                    \n                                    \n                                    \n                                storageCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('api')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        checkFrontend\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkFrontend()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('ui')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        databaseCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    databaseCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('db')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        memoryCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    memoryCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('memory')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        storageCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    storageCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('storage')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  PrismaHealthIndicator,\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from 'src/auth/auth.guard';\nimport { api_base_url, ui_base_url } from 'utils';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly http: HttpHealthIndicator,\n    private readonly db: PrismaHealthIndicator,\n    private readonly disk: DiskHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n  ) {}\n\n  url = api_base_url;\n  ui_url = ui_base_url;\n\n  @Public()\n  @Get('api')\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('bree-api', this.url + '/hello'),\n    ]);\n  }\n\n  @Public()\n  @Get('ui')\n  @HealthCheck()\n  checkFrontend() {\n    return this.health.check([\n      () =>\n        this.http.responseCheck(\n          'bree-web',\n          this.ui_url + '/login',\n          (res) => res.status === 200,\n        ),\n    ]);\n  }\n\n  @Public()\n  @Get('db')\n  @HealthCheck()\n  databaseCheck() {\n    return this.health.check([\n      () => this.http.pingCheck('bree-db', 'database'),\n    ]);\n  }\n\n  @Public()\n  @Get('storage')\n  @HealthCheck()\n  storageCheck() {\n    return this.health.check([\n      () =>\n        this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ]);\n  }\n\n  @Public()\n  @Get('memory')\n  @HealthCheck()\n  memoryCheck() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\n\nHealthService\n\nHealthService\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HealthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthService } from './health.service';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n  providers: [HealthService],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HealthService.html":{"url":"injectables/HealthService.html","title":"injectable - HealthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HealthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createHealthDto: CreateHealthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createHealthDto\n                                            \n                                                            CreateHealthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/health.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateHealthDto } from './dto/create-health.dto';\n\n@Injectable()\nexport class HealthService {\n  create(createHealthDto: CreateHealthDto) {\n    return `This action adds a new health ${createHealthDto}}`;\n  }\n\n  findAll() {\n    return `This action returns all health`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} health`;\n  }\n\n  update(id: number) {\n    return `This action updates a #${id} health`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} health`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinRoomDto.html":{"url":"classes/JoinRoomDto.html","title":"class - JoinRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/update-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoomDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                publicKey\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ArrayBuffer\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRoomDto } from './create-room.dto';\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\nexport class JoinRoomDto extends PartialType(CreateRoomDto) {\n  roomId: string;\n  userId: string;\n  publicKey: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtSubPayload.html":{"url":"interfaces/JwtSubPayload.html","title":"interface - JwtSubPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtSubPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\nimport { SetMetadata } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core/services/reflector.service';\n\ninterface JwtSubPayload {\n  sub: string;\n  username: string;\n}\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload: JwtSubPayload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggingInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/app.interceptor.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LoggingInterceptor.name);\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const now = Date.now();\n\n    if (request.is('multipart/form-data')) {\n      if (!request.files) return next.handle();\n      this.logger.log(\n        `Incoming Multipart Request - ${request.method} ${request.url} ${request.file}`,\n      );\n      for (const file of Object.values(\n        request.files as { [fieldname: string]: Express.Multer.File[] },\n      )[0]) {\n        this.logger.log(\n          `File: ${file?.originalname}, Size: ${file.size} bytes`,\n        );\n      }\n    } else\n      this.logger.log(`Incoming Request - ${request.method} ${request.url} `);\n\n    return next.handle().pipe(\n      tap(() => {\n        this.logger.log(\n          `Outgoing Response - ${request.method} ${request.url} - ${Date.now() - now}ms`,\n        );\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/entities/notification.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Notification {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                triggerNotifications\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        triggerNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    triggerNotifications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('* * 0 * * *', {name: 'notifications', timeZone: 'Europe/London'})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateNotificationDto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { NotificationService } from './notification.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\n\n@Controller('notification')\nexport class NotificationController {\n  constructor(private readonly notificationService: NotificationService) {}\n\n  @Cron('* * 0 * * *', {\n    name: 'notifications',\n    timeZone: 'Europe/London',\n  })\n  triggerNotifications() {}\n\n  @Post()\n  create(@Body() createNotificationDto: CreateNotificationDto) {\n    return this.notificationService.create(createNotificationDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.notificationService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.notificationService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateNotificationDto: UpdateNotificationDto,\n  ) {\n    return this.notificationService.update(id, updateNotificationDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.notificationService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService\n\nNotificationService\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationService } from './notification.service';\nimport { NotificationController } from './notification.controller';\n\n@Module({\n  controllers: [NotificationController],\n  providers: [NotificationService],\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateNotificationDto: UpdateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateNotificationDto\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\n\n@Injectable()\nexport class NotificationService {\n  create(createNotificationDto: CreateNotificationDto) {\n    return `This action adds a new notification ${createNotificationDto}`;\n  }\n\n  findAll() {\n    return `This action returns all notification`;\n  }\n\n  findOne(id: string) {\n    return `This action returns a #${id} notification`;\n  }\n\n  update(id: string, updateNotificationDto: UpdateNotificationDto) {\n    return `This action updates a #${id} notification, ${updateNotificationDto}`;\n  }\n\n  remove(id: string) {\n    return `This action removes a #${id} notification`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                bookmarkPost\n                            \n                            \n                                    \n                                    Async\n                                checkBookmarkedByUser\n                            \n                            \n                                    \n                                    Async\n                                checkLikedByUser\n                            \n                            \n                                    \n                                    Async\n                                createDraft\n                            \n                            \n                                    \n                                    Async\n                                createPost\n                            \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getCommentsForPost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                    Async\n                                getUserPosts\n                            \n                            \n                                    \n                                    Async\n                                likePost\n                            \n                            \n                                    \n                                    Async\n                                publishPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        bookmarkPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    bookmarkPost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('bookmark/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkBookmarkedByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkBookmarkedByUser(id: string, req: any, postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/check-bookmark/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkLikedByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkLikedByUser(id: string, req: any, postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/check-like/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDraft(req: any, postData: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-draft')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(req: any, postData: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-post')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postData\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCommentsForPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentsForPost(req: any, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/comments/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredPosts(req: any, q?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/search')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts(req: any, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                post feed in descending order based on the skip and take values\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPosts(params: literal type, req: any, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id/posts')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the id of the user whose posts should be returned\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                post feed in descending order based on the skip and take values and the user id\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    likePost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('like/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { Post as PostModel } from '@prisma/client';\nimport { CreatePostDto } from './dto/create-post.dto';\n\n@Controller('posts')\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post('create-draft')\n  async createDraft(\n    @Request() req: any,\n    @Body() postData: CreatePostDto,\n  ): Promise {\n    return await this.postService.createPost(\n      {\n        ...postData,\n        ...(postData.type && { type: postData.type }),\n        ...(postData.longPost && {\n          longPost: postData.longPost,\n        }),\n      },\n      false,\n      req.user.sub,\n    );\n  }\n\n  @Post('create-post')\n  async createPost(\n    @Request() req: any,\n    @Body() postData: CreatePostDto,\n  ): Promise {\n    console.log(postData);\n    return await this.postService.createPost(\n      {\n        ...postData,\n        ...(postData.type && { type: postData.type }),\n        ...(postData.longPost && {\n          longPost: postData.longPost,\n        }),\n      },\n      true,\n      req.user.sub,\n    );\n  }\n\n  @Put('publish/:id')\n  async publishPost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.updatePost({\n      where: { id: String(id) },\n      data: { published: true },\n      email: req.user.sub,\n    });\n  }\n\n  @Put('bookmark/:id')\n  async bookmarkPost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.bookmarkPost(id, req.user.sub);\n  }\n\n  @Put('like/:id')\n  async likePost(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.likePost(id, req.user.sub);\n  }\n\n  @Get('/:id')\n  async getPostById(\n    @Param('id') id: string,\n    @Request() req: any,\n  ): Promise {\n    return await this.postService.viewSinglePost(id, req.user.sub);\n  }\n\n  @Get('/comments/:id')\n  async getCommentsForPost(\n    @Request() req: any,\n    @Param('id') id: string,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { parent: { id: id } },\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Post('/check-like/:id')\n  async checkLikedByUser(\n    @Param('id') id: string,\n    @Request() req: any,\n    @Body() postData: { email?: string },\n  ): Promise {\n    return await this.postService.checkIfUserLikedPost(\n      id,\n      postData.email ?? req.user.sub,\n    );\n  }\n\n  @Post('/check-bookmark/:id')\n  async checkBookmarkedByUser(\n    @Param('id') id: string,\n    @Request() req: any,\n    @Body() postData: { email?: string },\n  ): Promise {\n    return await this.postService.checkIfUserBookmarkedPost(\n      id,\n      postData.email ?? req.user.sub,\n    );\n  }\n\n  /**\n   * @returns post feed in descending order based on the skip and take values\n   */\n  @Post('feed')\n  async getPublishedPosts(\n    @Request() req: any,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { published: true },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      skip: Number(skip),\n      take: Number(take),\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  /**\n   * @param {{id: string}} params the id of the user whose posts should be returned\n   * @returns post feed in descending order based on the skip and take values and the user id\n   */\n  @Get('user/:id/posts')\n  async getUserPosts(\n    @Param() params: { id: string },\n    @Request() req: any,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    return await this.postService.getMultiplePosts({\n      where: { published: true, author: { id: params.id } },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      skip: Number(skip),\n      take: Number(take),\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Post('/search')\n  async getFilteredPosts(\n    @Request() req: any,\n    @Query('q') q?: string,\n  ): Promise {\n    const cleanedQuery = q.trim().replace(/[^a-zA-Z0-9\\s]/g, ' ');\n\n    const query =\n      cleanedQuery.split(/[ \\+]/).length > 1\n        ? cleanedQuery.split(' ').join(' | ')\n        : cleanedQuery;\n\n    return await this.postService.getMultiplePosts({\n      where: {\n        published: true,\n        text: {\n          search: query,\n        },\n      },\n      currentUserEmail: req.user.sub,\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return await this.postService.deletePost({ id: String(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nFileService\n\nFileService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nFileService->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostModule -->\n\nPrismaService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nPostModule -->\n\nUserService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                        \n                            PostService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './post.service';\nimport { PrismaService } from '../prisma.service';\nimport { FileService } from 'src/file/file.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService, FileService, UserService, PrismaService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookmarkPost\n                            \n                            \n                                    Async\n                                checkIfUserBookmarkedPost\n                            \n                            \n                                    Async\n                                checkIfUserLikedPost\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                findParentPost\n                            \n                            \n                                    Async\n                                findPost\n                            \n                            \n                                    Async\n                                getMultiplePosts\n                            \n                            \n                                    Async\n                                getPostBookmarks\n                            \n                            \n                                    Async\n                                getPostComments\n                            \n                            \n                                    Async\n                                getPostLikes\n                            \n                            \n                                    Async\n                                incrementParentPostCommentCount\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                            \n                                    Async\n                                viewSinglePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        bookmarkPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    bookmarkPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:352\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserBookmarkedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserBookmarkedPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:217\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserLikedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserLikedPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(data: CreatePostDto, published: boolean, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                published\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:410\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findParentPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    findParentPost(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMultiplePosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMultiplePosts(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBookmarks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBookmarks(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:392\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:401\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostLikes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostLikes(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:384\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        incrementParentPostCommentCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    incrementParentPostCommentCount(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    likePost(postId: string, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:323\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:281\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        viewSinglePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    viewSinglePost(postId: string, email)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { Post, PostType, Prisma } from '@prisma/client';\nimport { FileService } from 'src/file/file.service';\nimport { CreatePostDto } from './dto/create-post.dto';\n\n@Injectable()\nexport class PostService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly fileService: FileService,\n  ) {}\n\n  async createPost(\n    data: CreatePostDto,\n    published: boolean,\n    email: string,\n  ): Promise {\n    const fileIds = data.media;\n    const clone = data.longPost?.content;\n\n    if (fileIds.length > 0 && data.type !== PostType.LONG) {\n      const res = await this.fileService.getFilesUrls(data.media as any);\n      data.media = res.map((file) => file.url);\n      data.mediaTypes = res.map((file) => file.type);\n    }\n    if (data.type === PostType.LONG) {\n      try {\n        const contents = await Promise.all(\n          data.longPost.content.map(async (c) => {\n            const res = await this.fileService.getFilesUrls(c.media);\n            return res[0];\n          }),\n        );\n\n        data.longPost.content = data.longPost.content.map((c, index) => ({\n          ...c,\n          media: [contents[index].url],\n          mediaTypes: [contents[index].type],\n        }));\n      } catch (error) {\n        console.error('Error uploading files:', error);\n        throw new Error('Failed to process long post media.');\n      }\n    }\n    const createData: Prisma.PostCreateInput = {\n      ...data,\n      author: { connect: { email } },\n      longPost:\n        data.longPost && data.longPost.content.length > 0\n          ? {\n              create: {\n                content: {\n                  createMany: {\n                    data: data.longPost.content.map((c) => ({\n                      text: c.text,\n                      media: c.media,\n                      mediaTypes: c.mediaTypes,\n                    })),\n                    skipDuplicates: true,\n                  },\n                },\n              },\n            }\n          : undefined,\n\n      published,\n    };\n\n    const post = await this.prisma.post.create({\n      data: createData,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    //Mark uploaded for short posts\n    if (fileIds.length > 0) await this.fileService.markFileAsUploaded(fileIds);\n\n    //Mark uploaded for long posts\n    if (data.type === PostType.LONG && clone.length > 0) {\n      await Promise.all(\n        clone.map(async (c) => {\n          await this.fileService.markFileAsUploaded(c.media);\n        }),\n      );\n    }\n\n    if (post.parentId)\n      this.incrementParentPostCommentCount(post.parentId, email);\n\n    return post;\n  }\n\n  async findParentPost(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Parent post not found');\n    }\n\n    return post;\n  }\n\n  async incrementParentPostCommentCount(\n    postId: string,\n    email: string,\n  ): Promise {\n    const parentPost = await this.findParentPost(postId);\n\n    return this.updatePost({\n      where: { id: postId },\n      data: { commentCount: parentPost.commentCount + 1 },\n      email,\n    });\n  }\n\n  async findPost(postId: string, email: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === email),\n      bookmarkedByMe: post.bookmarkedBy.some((user) => user.email === email),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async viewSinglePost(postId: string, email): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: {\n        comments: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        likedBy: true,\n        bookmarkedBy: true,\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === email),\n      bookmarkedByMe: post.bookmarkedBy.some((user) => user.email === email),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async checkIfUserLikedPost(\n    postId: string,\n    email: string,\n  ): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { likedBy: true },\n    });\n\n    return { status: post.likedBy.some((user) => user.email === email) };\n  }\n\n  async checkIfUserBookmarkedPost(\n    postId: string,\n    email: string,\n  ): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    return { status: post.bookmarkedBy.some((user) => user.email === email) };\n  }\n\n  async getMultiplePosts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n    currentUserEmail: string;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    const posts = await this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n            username: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postsWithUserFlags = posts.map((post) => {\n      return {\n        ...post,\n        author: post.author,\n\n        likedByMe: post.likedBy.some(\n          (user) => user.email === params.currentUserEmail,\n        ),\n        bookmarkedByMe: post.bookmarkedBy.some(\n          (user) => user.email === params.currentUserEmail,\n        ),\n      };\n    });\n\n    return postsWithUserFlags;\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n    email: string;\n  }): Promise {\n    const { data, where } = params;\n\n    const post = await this.prisma.post.update({\n      data,\n      where,\n      include: {\n        likedBy: true,\n        bookmarkedBy: true,\n        author: {\n          select: {\n            id: true,\n            name: true,\n            img: true,\n          },\n        },\n        longPost: {\n          select: {\n            id: true,\n            content: true,\n          },\n        },\n      },\n    });\n\n    const postWithUserFlags = {\n      ...post,\n      author: post.author,\n\n      likedByMe: post.likedBy.some((user) => user.email === params.email),\n      bookmarkedByMe: post.bookmarkedBy.some(\n        (user) => user.email === params.email,\n      ),\n    };\n\n    return postWithUserFlags;\n  }\n\n  async likePost(postId: string, email: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const status = (await this.checkIfUserLikedPost(postId, email)).status;\n    return this.updatePost({\n      where: { id: postId },\n      data: {\n        likedBy: status ? { disconnect: { email } } : { connect: { email } },\n        likeCount: status ? post.likeCount - 1 : post.likeCount + 1,\n      },\n      email,\n    });\n  }\n\n  async bookmarkPost(postId: string, email: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    const status = (await this.checkIfUserBookmarkedPost(postId, email)).status;\n\n    return this.updatePost({\n      where: { id: postId },\n      data: {\n        bookmarkedBy: status\n          ? { disconnect: { email } }\n          : { connect: { email } },\n        bookmarkCount: status ? post.bookmarkCount - 1 : post.bookmarkCount + 1,\n      },\n      email,\n    });\n  }\n\n  async getPostLikes(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { likedBy: true },\n    });\n    return post.likedBy.length;\n  }\n\n  async getPostBookmarks(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { bookmarkedBy: true },\n    });\n\n    return post.bookmarkedBy.length;\n  }\n\n  async getPostComments(postId: string): Promise {\n    const post = await this.prisma.post.findUnique({\n      where: { id: postId },\n      include: { comments: true },\n    });\n\n    return post;\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient({\n    omit: {\n      user: {\n        password: true,\n      },\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  prisma = new PrismaClient({\n    omit: {\n      user: {\n        password: true,\n      },\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/entities/room.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Room {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findChatsInRoom\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findRoomByParticipantsOrCreate\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findChatsInRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    findChatsInRoom(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/chats/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findRoomByParticipantsOrCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomByParticipantsOrCreate(user1Id: string, user2Id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-create/')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user1Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user2Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { RoomService } from './room.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\n\n@Controller('rooms')\nexport class RoomController {\n  constructor(private readonly roomService: RoomService) {}\n\n  @Get('/all')\n  findAll(@Request() req: any) {\n    return this.roomService.findAllWithParticipant(req.user.sub);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.roomService.findOne(id);\n  }\n\n  @Get('/find-create/')\n  findRoomByParticipantsOrCreate(\n    @Query('user1') user1Id: string,\n    @Query('user2') user2Id: string,\n  ) {\n    return this.roomService.findRoomByParticipantsOrCreate(user1Id, user2Id);\n  }\n\n  @Get('/chats/:id')\n  findChatsInRoom(@Param('id') id: string) {\n    return this.roomService.findChatsInRoom(id);\n  }\n\n  @Patch('/update/:id')\n  update(@Param('id') id: string, @Body() updateRoomDto: UpdateRoomDto) {\n    return this.roomService.update(id, updateRoomDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.roomService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomGateway.html":{"url":"classes/RoomGateway.html","title":"class - RoomGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                joinRoom\n                            \n                            \n                                    \n                                leaveRoom\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room/room.gateway.ts:25\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('find-one-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(roomData: JoinRoomDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            JoinRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveRoom(roomId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('leave-room')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeRoom')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateRoom')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { RoomService } from './room.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\nimport { ui_base_url } from 'utils';\nimport { JoinRoomDto } from '../room/dto/update-room.dto';\nimport { Socket, Server } from 'socket.io';\n\n@WebSocketGateway({\n  cors: {\n    namespace: 'room',\n    origin: ui_base_url,\n    transports: ['websocket'],\n  },\n})\nexport class RoomGateway {\n  constructor(private readonly roomService: RoomService) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  @SubscribeMessage('find-one-room')\n  findOne(@MessageBody() id: string) {\n    return this.roomService.findOne(id);\n  }\n\n  @SubscribeMessage('join-room')\n  async joinRoom(\n    @MessageBody() roomData: JoinRoomDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const status = await this.roomService.joinRoom(\n      roomData.roomId,\n      roomData.userId,\n    );\n    if (status) {\n      client.join(roomData.roomId);\n      this.server.to(roomData.roomId).emit('user-joined', client.id);\n      console.log(`User ${client.id} joined room ${roomData.roomId}`);\n      return roomData;\n    }\n  }\n\n  @SubscribeMessage('leave-room')\n  leaveRoom(\n    @MessageBody('roomId') roomId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    // client.leave(roomId);\n    console.log(`User ${client.id} left room ${roomId}`);\n  }\n\n  @SubscribeMessage('updateRoom')\n  update(@MessageBody() updateRoomDto: UpdateRoomDto) {\n    return `${updateRoomDto});`;\n  }\n\n  @SubscribeMessage('removeRoom')\n  remove(@MessageBody() id: number) {\n    return this.roomService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoomService } from './room.service';\nimport { RoomGateway } from './room.gateway';\nimport { RoomController } from './room.controller';\nimport { PrismaService } from 'src/prisma.service';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  controllers: [RoomController],\n  providers: [RoomGateway, RoomService, UserService, PrismaService],\n})\nexport class RoomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAllWithParticipant\n                            \n                            \n                                findChatsInRoom\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRoomByParticipantsOrCreate\n                            \n                            \n                                    Async\n                                joinRoom\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(sender: User, receiver: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sender\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                receiver\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithParticipant\n                        \n                    \n                \n            \n            \n                \nfindAllWithParticipant(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findChatsInRoom\n                        \n                    \n                \n            \n            \n                \nfindChatsInRoom(roomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRoomByParticipantsOrCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomByParticipantsOrCreate(user1Id: string, user2Id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user1Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user2Id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(roomId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(roomId: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(RoomService.name)\n                    \n                \n                    \n                        \n                                Defined in src/room/room.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, Logger } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { UpdateRoomDto } from './dto/update-room.dto';\nimport { Room, User } from '@prisma/client';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class RoomService {\n  private readonly logger = new Logger(RoomService.name);\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly userService: UserService,\n  ) {}\n\n  async create(sender: User, receiver: User): Promise {\n    const room = await this.prisma.room.create({\n      data: {\n        participants: {\n          connect: [\n            {\n              id: sender.id,\n            },\n            {\n              id: receiver.id,\n            },\n          ],\n        },\n      },\n    });\n\n    return room;\n  }\n\n  findAllWithParticipant(email: string) {\n    return this.prisma.room.findMany({\n      where: {\n        participants: {\n          some: {\n            email,\n          },\n        },\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n  }\n\n  findChatsInRoom(roomId: string) {\n    return this.prisma.chat.findMany({\n      where: {\n        roomId,\n      },\n      include: {\n        userEncryptedMessages: true,\n      },\n    });\n  }\n\n  async joinRoom(\n    roomId: string,\n    userId: string,\n    // publicKey: ArrayBuffer,\n  ): Promise {\n    try {\n      const user = await this.userService.findUser(userId);\n      const room = await this.findOne(roomId);\n\n      if (!user || !room) {\n        throw new NotFoundException('User or room not found');\n      }\n\n      await this.prisma.room.update({\n        where: { id: roomId },\n        data: {\n          participants: {\n            connect: { id: userId },\n          },\n        },\n      });\n\n      return true;\n    } catch (error: Error | any) {\n      this.logger.error(\n        `Error joining room roomId: ${roomId} userId: ${userId}: ${error.message}`,\n        error.stack,\n      );\n      return false;\n    }\n  }\n\n  async findOne(id: string): Promise {\n    const room = await (this.prisma.room.findUnique({\n      where: {\n        id,\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    }) ?? null);\n    return room;\n  }\n\n  async findRoomByParticipantsOrCreate(\n    user1Id: string,\n    user2Id: string,\n  ): Promise {\n    const user1 = await this.userService.findUser(user1Id);\n    const user2 = await this.userService.findUser(user2Id);\n\n    if (!user1 || !user2) {\n      throw new NotFoundException('User not found');\n    }\n\n    const existingRoom = await this.prisma.room.findFirst({\n      where: {\n        participants: {\n          every: { id: { in: [user1Id, user2Id] } },\n        },\n      },\n      include: {\n        participants: true,\n        chats: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (existingRoom) {\n      return existingRoom;\n    }\n\n    return this.create(user1, user2);\n  }\n\n  async update(roomId: string, updateRoomDto: UpdateRoomDto) {\n    return updateRoomDto;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} room`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-in.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class SignInDto {\n  email: string;\n  password: string;\n}\n\nexport class GoogleAuthUser {\n  iss: string;\n  azp: string;\n  aud: string;\n  sub: string;\n  email: string;\n  email_verified: boolean;\n  nbf: number;\n  name: string;\n  picture: string;\n  given_name: string;\n  family_name: string;\n  iat: number;\n  exp: number;\n  jti: string;\n}\n\nexport interface AuthUser extends User {\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatDto.html":{"url":"classes/UpdateChatDto.html","title":"class - UpdateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/dto/update-chat.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateChatDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatDto } from './create-chat.dto';\n\nexport class UpdateChatDto extends PartialType(CreateChatDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFileDto.html":{"url":"classes/UpdateFileDto.html","title":"class - UpdateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/dto/update-file.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateFileDto } from './create-file.dto';\n\nexport class UpdateFileDto extends PartialType(CreateFileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateHealthDto.html":{"url":"classes/UpdateHealthDto.html","title":"class - UpdateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/update-health.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateHealthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateHealthDto } from './create-health.dto';\n\nexport class UpdateHealthDto extends PartialType(CreateHealthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/update-notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateNotificationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CreatePostDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                longPost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                media\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                mediaTypes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        longPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@ValidateNested({each: true})@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        mediaTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Allow()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:36\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends CreatePostDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/update-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRoomDto } from './create-room.dto';\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\nexport class JoinRoomDto extends PartialType(CreateRoomDto) {\n  roomId: string;\n  userId: string;\n  publicKey: ArrayBuffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredUsers\n                            \n                            \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signupUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredUsers(searchString: string, skip?: number, take?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/search')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(userData: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, data: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, User as UserModel } from '@prisma/client';\nimport { Public } from 'src/auth/auth.guard';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Public()\n  @Post('register')\n  async signupUser(\n    @Body()\n    userData: CreateUserDto,\n  ): Promise {\n    return this.userService.createUser(userData);\n  }\n\n  @Get('/:id')\n  async getUserById(@Param('id') id: string): Promise {\n    return this.userService.findUser(id);\n  }\n\n  @Post('/search')\n  async getFilteredUsers(\n    @Query('q') searchString: string,\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n  ): Promise {\n    console.log('SEARCH:::', searchString);\n    return this.userService.getMultipleUsers({\n      skip: Number(skip),\n      take: Number(take),\n      orderBy: {\n        createdAt: 'desc',\n      },\n      where: {\n        OR: [\n          {\n            name: { contains: searchString },\n          },\n          {\n            username: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Put('update/:id')\n  async updateUser(\n    @Param('id') id: string,\n    @Body() data: Partial,\n  ): Promise {\n    return this.userService.updateUser({\n      where: { id: String(id) },\n      data,\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return this.userService.deleteUser({ id: String(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PrismaService } from '../prisma.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, PrismaService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRoomKey.html":{"url":"classes/UserRoomKey.html","title":"class - UserRoomKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRoomKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                encryptionKey\n                            \n                            \n                                id\n                            \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        encryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class CreateRoomDto {\n  participants: User[];\n}\n\nexport class UserRoomKey {\n  id: string;\n  userId: string;\n  roomId: string;\n  encryptionKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFedUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                getMultipleUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createFedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFedUser(data: CreateFedUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateFedUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(d: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                d\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(usernameOrEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                usernameOrEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMultipleUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMultipleUsers(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { CreateFedUserDto, CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findUser(usernameOrEmail: string): Promise {\n    const searchTerm = usernameOrEmail.startsWith('@')\n      ? usernameOrEmail\n      : `@${usernameOrEmail}`;\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        OR: [\n          { username: searchTerm },\n          { email: usernameOrEmail },\n          { id: usernameOrEmail },\n        ],\n      },\n    });\n\n    if (!user) throw new NotFoundException('User not found');\n    return user;\n  }\n\n  async getMultipleUsers(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(d: CreateUserDto): Promise {\n    const default_img = process.env.DEFAULT_PROFILE_IMG;\n\n    const data = {\n      ...d,\n      img: d.img ?? default_img,\n      password: await bcrypt.hash(d.password, 10),\n    };\n\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async createFedUser(data: CreateFedUserDto): Promise {\n    return this.prisma.user.create({ data });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: UpdateUserDto;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            interface\n            JwtSubPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/auth.guard.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            class\n            GoogleAuthUser\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-in.dto.ts\n            \n            interface\n            AuthUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/chat/dto/create-chat.dto.ts\n            \n            class\n            CreateChatDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/chat/dto/update-chat.dto.ts\n            \n            class\n            UpdateChatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/entities/chat.entity.ts\n            \n            class\n            Chat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/events/chat.event.ts\n            \n            class\n            ChatCreatedEvent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/listeners/chat.listener.ts\n            \n            injectable\n            ChatCreatedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file/dto/update-file.dto.ts\n            \n            class\n            UpdateFileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/entities/file.entity.ts\n            \n            class\n            File\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/file.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            allowedMimeTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            destination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.controller.ts\n            \n            variable\n            storage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressAudio\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressFiles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressImage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            function\n            compressVideo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/file/file.manager.ts\n            \n            variable\n            execPromise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/file.service.ts\n            \n            injectable\n            FileService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/health/dto/create-health.dto.ts\n            \n            class\n            CreateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/dto/update-health.dto.ts\n            \n            class\n            UpdateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/entities/health.entity.ts\n            \n            class\n            Health\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/exceptionsLogger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/health/health.service.ts\n            \n            injectable\n            HealthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/entities/notification.entity.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/room/dto/create-room.dto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room/dto/create-room.dto.ts\n            \n            class\n            UserRoomKey\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/room/dto/update-room.dto.ts\n            \n            class\n            JoinRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/room/dto/update-room.dto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/room/entities/room.entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/room/room.gateway.ts\n            \n            class\n            RoomGateway\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateFedUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        utils/index.ts\n            \n            variable\n            api_base_url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        utils/index.ts\n            \n            variable\n            ui_base_url\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/cache-manager : ^2.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/event-emitter : ^2.0.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.4.4\n        \n            @nestjs/platform-socket.io : ^10.4.6\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @nestjs/throttler : ^6.2.1\n        \n            @nestjs/websockets : ^10.4.6\n        \n            @prisma/client : ^5.22.0\n        \n            axios : ^1.7.7\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^5.7.6\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.5\n        \n            helmet : ^7.1.0\n        \n            multer : ^1.4.5-lts.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.33.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            compressAudio   (src/.../file.manager.ts)\n                        \n                        \n                            compressFile   (src/.../file.manager.ts)\n                        \n                        \n                            compressFiles   (src/.../file.manager.ts)\n                        \n                        \n                            compressImage   (src/.../file.manager.ts)\n                        \n                        \n                            compressVideo   (src/.../file.manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/file/file.manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compressAudio\n                        \n                    \n                \n            \n            \n                \ncompressAudio(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressFile\n                        \n                    \n                \n            \n            \n                \ncompressFile(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressFiles\n                        \n                    \n                \n            \n            \n                \ncompressFiles(files: Array)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressImage\n                        \n                    \n                \n            \n            \n                \ncompressImage(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compressVideo\n                        \n                    \n                \n            \n            \n                \ncompressVideo(file)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBree API\nThe fun social app \nWelcome\nCreate an account or login\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nChatModule -->\n\nPrismaService->ChatModule\n\n\n\nFileModule -->\n\nPrismaService->FileModule\n\n\n\nPostModule -->\n\nPrismaService->PostModule\n\n\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nChatModule -->\n\nUserService->ChatModule\n\n\n\nFileModule -->\n\nUserService->FileModule\n\n\n\nPostModule -->\n\nUserService->PostModule\n\n\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nChatModule -->\n\nRoomService->ChatModule\n\n\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\nPostModule -->\n\nFileService->PostModule\n\n\n\n\n\nHealthService\n\nHealthService\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedMimeTypes   (src/.../file.controller.ts)\n                        \n                        \n                            api_base_url   (utils/.../index.ts)\n                        \n                        \n                            destination   (src/.../file.controller.ts)\n                        \n                        \n                            execPromise   (src/.../file.manager.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../auth.guard.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Public   (src/.../auth.guard.ts)\n                        \n                        \n                            storage   (src/.../file.controller.ts)\n                        \n                        \n                            ui_base_url   (utils/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/file/file.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        allowedMimeTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n  'video/mp4',\n  'audio/mpeg',\n  'audio/mp3',\n])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, '../../../../', 'media')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : diskStorage({\n  destination,\n  filename: (req, file, cb) => {\n    const name = file.originalname.split('.')[0];\n    const extension = extname(file.originalname);\n    const randomName = Array(32)\n      .fill(null)\n      .map(() => Math.round(Math.random() * 16).toString(16))\n      .join('');\n    cb(null, `${name}-${randomName}${extension}`);\n  },\n})\n                    \n                \n\n\n        \n    \n\n    utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        api_base_url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.API_BASE_URL || 'http://localhost:3000'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ui_base_url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.UI_BASE_URL || 'https://localhost:4000'\n                    \n                \n\n\n        \n    \n\n    src/file/file.manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        execPromise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(exec)\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secret',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
